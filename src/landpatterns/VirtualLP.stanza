#use-added-syntax(jitx)
defpackage jsl/landpatterns/VirtualLP:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/design/Classable
  import jsl/geometry/box
  import jsl/landpatterns/courtyard
  import jsl/landpatterns/thermal-pads

doc: \<DOC>
Base Type for the Elements of the Virtual Landpattern Tree

This type provides an interface for the elements to provide
the name/class labeling that will later be used for filtering.
<DOC>
public deftype VirtualElement <: Classable

val DEF_VLP_LOC = loc(0.0, 0.0)

doc: \<DOC>
Landpattern Content Generator Function

This function is a generator for creating the content of this
element into the `pcb-landpattern` definition.
@param v VirtualElement (self)
@param pose Optional transform to apply to the elements's content
<DOC>
public defmulti make-landpattern (v:VirtualElement, pose:Pose = ?)

doc: \<DOC>
Helper Struct for Constructing Virtual Landpattern definitions
<DOC>
public defstruct VirtualPad <: VirtualElement :
  pad-id:Int|Ref
  pad-def:Pad
  loc:Pose with:
    updater => update-loc
  side:Side

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)

with:
  constructor => #VirtualPad
  printer => true

public defn VirtualPad (
  pad-id:Int|Ref,
  pad-def:Pad,
  loc:Pose
  --
  name:String = ?,
  class:Seqable<String>|String = []
  side:Side = Top
  ) -> VirtualPad :

  #VirtualPad(pad-id, pad-def, loc, side, name, to-class-vector(class))

doc: \<DOC>
Construct a set of `class` strings for VirtualPad creation.

This will construct the following class strings:

1.  "pad"
2.  "col-N" where `N` will be the column number
3.  "row-M" where `M` will be the row number
<DOC>
public defn build-vpad-classes (r:Int, c:Int) -> Tuple<String> :
  [
    "pad",
    to-string("col-%_" % [c]),
    to-string("row-%_" % [r])
  ]



public defn print-pads (o:OutputStream, pds:Seqable<VirtualPad> ) :
  val pds* = to-vector<VirtualPad>(pds)
  qsort!(pad-id, pds*)
  println(o, "Pads count=%_" % [length(pds*)])
  for pd in pds* do:
    println(o, "%_" % [[pd]])

doc: \<DOC>
Generator to create a `pad` statement for this `VirtualPad` instance

@param p Self
@param offset Extra offset to apply to the pad definition.
This is often used for translating an entire landpattern.
<DOC>
public defmethod make-landpattern (p:VirtualPad, offset:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    val r = ref(p)
    pad (r) : pad-def(p) at offset * loc(p) on side(p)

doc: \<DOC>
Function to mimic `layer` from jitx/commands on `VirtualPad`
<DOC>
public defn get-layer (p:VirtualPad, ls:LayerSpecifier) -> Tuple<Shape> :
  layer{_, ls} $ pad-def(p)

doc: \<DOC>
Function to mimic `layers` from jitx/commands on `VirtualPad`
<DOC>
public defn get-layers (p:VirtualPad) -> Tuple<LayerShape> :
  layers $ pad-def(p)

; Helpers for making `VirtualPad` behave like `LandpatternPad`

public defn ref (p:VirtualPad) -> Ref:
  match(pad-id(p)):
    (i:Int): IndexRef(Ref("p"), i)
    (x:Ref): x

public defn pad (p:VirtualPad) -> Pad :
  pad-def(p)

public defn pose (p:VirtualPad) -> Pose :
  loc(p)


public defstruct VirtualCopper <: VirtualElement :
  layer-index:LayerIndex
  shape:Shape

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualCopper
  printer => true

public defn VirtualCopper (
  layer-index:LayerIndex,
  shape:Shape
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualCopper :
  #VirtualCopper(layer-index, shape, name?, to-class-vector(class))

public defmethod make-landpattern (cu:VirtualCopper, pose:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    copper(layer-index(cu)) = pose * shape(cu)

public defstruct VirtualArtwork <: VirtualElement :
  layer-spec:LayerSpecifier
  shape:Shape with:
    updater => update-shape

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualArtwork
  printer => true

public defn VirtualArtwork (
  layer-spec:LayerSpecifier,
  shape:Shape
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualArtwork :
  #VirtualArtwork(layer-spec, shape, name?, to-class-vector(class))

public defn to-layer-shape (art:VirtualArtwork, pose:Pose = loc(0.0, 0.0)) -> LayerShape :
  LayerShape(layer-spec(art), pose * shape(art))

public defmethod make-landpattern (art:VirtualArtwork, pose:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    layer(layer-spec(art)) = pose * shape(art)

doc: \<DOC>
Virtual LandPattern Node

This type is used to create a virtual landpattern
model. We use this so that we can modify the landpattern
elements (pads, artwork, etc) before writing it to the
ESIR `pcb-landpattern` definition. Once written to ESIR,
the landpattern cannot be modified.

<DOC>
public defstruct VirtualLP <: VirtualElement :
  doc: \<DOC>
  Optional Parent node. If `None` then this node
  is the root of the tree.
  <DOC>
  parent:Maybe<VirtualLP> with: (
    setter => set-parent
  )
  doc: \<DOC>
  Child nodes of this landpattern
  <DOC>
  children:Vector<VirtualLP>

  doc: \<DOC>
  Pads to be placed in this virtual landpattern frame of reference
  <DOC>
  lands:Vector<VirtualPad>

  doc: \<DOC>
  Layer Artwork to be placed in this virtual landpattern frame of reference.
  <DOC>
  artwork:Vector<VirtualArtwork>

  doc: \<DOC>
  Virtual `copper` statements as placed in the virtual landpattern
  frame of reference.
  <DOC>
  metal:Vector<VirtualCopper>

  doc: \<DOC>
  Kinematic transform of this node of the virtual landpattern tree.

  This pose will be applied to the reference frame of this node.
  This means that all geometry in this node will experience this
  transformation. Additionally, all children node's frames of
  reference will be transformed by this pose.
  <DOC>
  pose:Pose with: (
    setter => set-pose
  )

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)

with:
  constructor => #VirtualLP
  printer => true

val DEF_VLP_POSE = loc(0.0, 0.0)

doc: \<DOC>
Construct a VirtualLP Leaf Node
This is not intended to be public. Use `create-child`
instead.
<DOC>
defn VirtualLP (
  parent:VirtualLP,
  pose:Pose = DEF_VLP_POSE
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualLP:
  #VirtualLP(
    One(parent),
    Vector<VirtualLP>(),
    Vector<VirtualPad>(),
    Vector<VirtualArtwork>(),
    Vector<VirtualCopper>(),
    pose,
    name?,
    to-class-vector(class)
  )

doc: \<DOC>
Construct a VirtualLP Root Node
<DOC>
public defn VirtualLP (
  pose:Pose = DEF_VLP_POSE
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualLP :
  #VirtualLP(
    None(),
    Vector<VirtualLP>(),
    Vector<VirtualPad>(),
    Vector<VirtualArtwork>(),
    Vector<VirtualCopper>(),
    pose,
    name?,
    to-class-vector(class)
  )

doc: \<DOC>
Check if this is the root node in a Virtual Landpattern Tree
<DOC>
public defn is-root? (vp:VirtualLP) -> True|False :
  parent(vp) is None

public defn get-artwork (vp:VirtualLP, ls:LayerSpecifier) -> Seqable<VirtualArtwork> :
  for va in artwork(vp) filter:
    layer-spec(va) == ls

doc: \<DOC>
Attempts to mimic the `layer` function from jitx/commands

This returns the shapes present on a specific layer that
are defined directly in the landpattern or its children. It
does not include the geometry defined in the pads.

<DOC>
public defn get-layer (vp:VirtualLP, ls:LayerSpecifier) -> Tuple<Shape> :
  ; @NOTE - to match the behavior of `layer` which doesn't seem
  ;  to act recursively on a landpattern definition - we are not
  ;  inspecting the pads in this function.
  val local-shapes = for va in artwork(vp) seq?:
    if layer-spec(va) == ls:
      One $ shape(va)
    else:
      None()

  val kid-shapes = for child in children(vp) seq-cat:
    val shs = get-layer(child, ls)
    for sh in shs seq:
      pose(child) * sh
  to-tuple $ cat(local-shapes, kid-shapes)

doc: \<DOC>
Get all shapes on the specified layer - including pad defined shapes
This function is an expansion on `get-layer` that includes
<DOC>
public defn get-layer-all (vp:VirtualLP, ls:LayerSpecifier) -> Tuple<Shape> :
  val local-shapes = get-layer(vp, ls)
  val land-shapes = for land in lands(vp) seq-cat:
    get-layer(land, ls)
  val kid-shapes = for child in children(vp) seq-cat:
    val shs = get-layer-all(child, ls)
    for sh in shs seq:
      pose(child) * sh
  to-tuple $ for shList in [local-shapes, land-shapes, kid-shapes] seq-cat:
    shList

doc: \<DOC>
Attempts to mimic the `pads` function from jitx/commands

This function is recursive over all of the nodes of the virtual
land pattern scene graph.

@return A Tuple of VirtualPad, 1 for each of the virtual pads in `vp`.
For any children - the `loc:Pose` of the `VirtualPad` will be updated
so that returned VirtualPad is correctly situated in the parent frame
of reference. That means that the VirtualPad objects returned by this function
are not necessarily the same as the parent definition.
<DOC>
public defn get-pads (vp:VirtualLP) -> Tuple<VirtualPad> :
  val kid-pads = for child in children(vp) seq-cat:
    ; Here I transform the pads into the parent coordinate frame - otherwise,
    ;   I will get unexpected results when attempting to compute total bounds
    ;   etc.
    for c-pad in get-pads(child) seq:
      update-loc(c-pad, pose(child) * loc(c-pad))

  val lp-pads = lands(vp)
  to-tuple $ cat(lp-pads, kid-pads)

doc: \<DOC>
Attempts to mimic the `layers` function from jitx/commands

This function is recursive over all of the nodes of the
virtual landpattern scene graph.

@param vp Virtual LP scene graph
@param pose Offset position to apply to the created LayerShape objects.
This will cause all created objects to be in the same root frame of reference
for the VirtualLP `vp`.
@return A Tuple of LayerShape object
<DOC>
public defn get-layers (vp:VirtualLP, offset:Pose = loc(0.0, 0.0)) -> Tuple<LayerShape> :
  ; @NOTE - to match the behavior of `layer` which doesn't seem
  ;  to act recursively on a landpattern definition - we are not
  ;  inspecting the pads in this function.
  val local-art = for va in artwork(vp) seq:
    to-layer-shape(va, offset)
  val kid-art = for child in children(vp) seq-cat:
    get-layers(child, offset * pose(child))
  to-tuple $ cat(local-art, kid-art)

public defn get-copper (vp:VirtualLP, li:LayerIndex) -> Tuple<VirtualCopper> :
  to-tuple $ for m in metal(vp) filter:
    layer-index(m) == li

public defn get-coppers (vp:VirtualLP) -> Tuple<VirtualCopper> :
  to-tuple $ metal(vp)

doc: \<DOC>
Construct artwork for the package outline in the silkscreen layer.

@param vp Virtual Landpattern Scene Graph
@param outline-geom Shape of the silkscreen content to create.
@param side Optional Side - Default is Top Side.
<DOC>
public defn add-silkscreen-outline (
  vp:VirtualLP, outline-geom:Shape
  --
  side:Side = Top,
  ):
  add-artwork(vp, Silkscreen("outline", side), outline-geom, class = "outline")

doc: \<DOC>
Retrieve the silkscreen outline shape as a `VirtualArtwork` object.

This function looks for a `VirtualArtwork` object with class `outline`.
If it finds a single object meeting this description - it will be
returned. Otherwise it throws a `ValueError`

This function will search recursively through the passed `vp` node
and all child nodes for the `outline` artwork.
<DOC>
public defn get-silkscreen-outline! (vp:VirtualLP) -> VirtualArtwork :
  val outlines = to-tuple $ seq{as-VirtualArtwork, _} $ find-by-class(vp, "outline")
  if length(outlines) != 1:
    throw $ ValueError("Expected only one element in class 'outline': %," % [outlines])

  outlines[0]

public defn add-artwork (
  vp:VirtualLP,
  ls:LayerSpecifier,
  shape:Shape
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False :
  append(vp, VirtualArtwork(ls, shape, name? = name, class = class))

public defn add-artwork (
  vp:VirtualLP,
  ls:LayerSpecifier,
  shapes:Seqable<Shape>
  --
  class:Seqable<String>|String = []

  ) -> False :
  val new-art = for sh in shapes seq:
    VirtualArtwork(ls, sh, class = class)
  append-all(vp, new-art)

doc: \<DOC>
  Add cutouts to the landpattern based on specified shapes.
<DOC>
public defn add-cutout (
  vp:VirtualLP,
  shape:Shape
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  append(vp, VirtualArtwork(Cutout(), shape, name? = name, class = class))

public defn add-cutout (
  vp:VirtualLP,
  shapes:Seqable<Shape>
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  val new-cos =
    for s in shapes seq :
      VirtualArtwork(Cutout(), s, name? = name, class = class)
  append-all(vp, new-cos)

doc: \<DOC>
  Add keepout regions to the landpattern based on specified shapes.
<DOC>
public defn add-keepout (
  vp:VirtualLP,
  shape:Shape
  --
  start:LayerIndex = LayerIndex(0)
  end:LayerIndex = LayerIndex(0)
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  append(vp, VirtualArtwork(ForbidCopper(start, end), shape, name? = name, class = class))

public defn add-keepout (
  vp:VirtualLP,
  shapes:Seqable<Shape>
  --
  start:LayerIndex = LayerIndex(0)
  end:LayerIndex = LayerIndex(0)
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  val new-kos =
    for s in shapes seq :
      VirtualArtwork(ForbidCopper(start, end), s, name? = name, class = class)
  append-all(vp, new-kos)


doc: \<DOC>
Add a Thermal Pad to the Virtual LandPattern Scene Graph

@param vp Scene Graph
@param pad-id Pad Id for this thermal pad - this is used in the
`pin-properties` mapping of the `pcb-component` to map symbol pin
to landpattern pad.
@param thermal-lead? Thermal Lead Object Definition.
If `False` - this function does nothing.
If `Shape` - then we construct a `ThermalPad` with no special
handling.
Otherwise, we use the `ThermalPad` to construct a large thermal
pad with optional paste subdivision etc. and add it to the
passed scenegraph.
<DOC>
public defn add-thermal-pad (
  vp:VirtualLP, pad-id:Int|Ref, thermal-lead?:False|Shape|ThermalPad,
  --
  pose:Pose = loc(0.0, 0.0)
  ):
  if thermal-lead? is-not False:
    val tp = match(thermal-lead?):
      (lead-shape:Shape):
        ThermalPad(shape = lead-shape)
      (tp-obj:ThermalPad): tp-obj

    val cls = ["pad", "thermal"]
    val pd-def = smd-thermal-pad(tp)
    append(vp, VirtualPad(pad-id, pd-def, pose, class = cls))


doc: \<DOC>
Create a reference designator in the current virtual landpattern


If a courtyard exists - This function will place a reference designator outside the courtyard outline
of the component, just above the upper-left corner of the bounds of the outline.

If no courtyard exists - then this function places the silkscreen reference designator
at the VirtualLP node origin.

In either case, this placement is really just an initial placement. The user will
use the placer in the board view to move it to a more reasonable
location.

@param vp Land Pattern Node where content will be drawn.
@param ls Layer to draw the reference designator. By default this is the top silkscreen.
@param text-size Size of designator text height in mm. Default is 1.0 mm.
@param font Optional Font to use. See the `Text` object in JITX runtime.

<DOC>
public defn add-reference-designator (
  vp:VirtualLP,
  ls:LayerSpecifier = Silkscreen("F-SilkS", Top)
  text-size:Double = 1.0,
  font:String = ""
  ) -> False :

  val o-box? = get-courtyard-boundary(vp)
  val pos = match(o-box?):
    (_:False):
      ; Drop at the origin if there is no courtyard
      loc(0.0, 0.0)
    (o-box:Box):
      val text-margin = 0.25
      loc(left(o-box), up(o-box) + text-margin)

  val sh = Text(">REF", text-size, SW, pos, font, TrueTypeFont, false, false)
  add-artwork(vp, ls, [sh], class = "ref-des")

doc: \<DOC>
Add a `VirtualArtwork` instance to the landpattern
<DOC>
public defn append (vp:VirtualLP, va:VirtualArtwork) -> False :
    add{_, va} $ artwork(vp)

doc: \<DOC>
Add multipple `VirtualArtwork` instances to the landpattern.
<DOC>
public defn append-all (vp:VirtualLP, vas:Seqable<VirtualArtwork>) -> False :
    add-all{_, vas} $ artwork(vp)

doc: \<DOC>
Add a pad to the virtual landpattern
<DOC>
public defn append (vp:VirtualLP, p:VirtualPad) -> False :
  add{_, p} $ lands(vp)

doc: \<DOC>
Add a multiple pads to the virtual landpattern
<DOC>
public defn append-all (vp:VirtualLP, ps:Seqable<VirtualPad>) -> False :
  add-all{_, ps} $ lands(vp)

doc: \<DOC>
Add a virtual `copper` statement to virtual landpattern
<DOC>
public defn append (vp:VirtualLP, cu:VirtualCopper) -> False:
  add{_, cu} $ metal(vp)

doc: \<DOC>
Add multiple virtual `copper` statements to virtual landpattern
<DOC>
public defn append-all (vp:VirtualLP, cus:Seqable<VirtualCopper>) -> False:
  add-all{_, cus} $ metal(vp)

doc: \<DOC>
Add a copper geometry to the landpattern on a particular layer index.
<DOC>
public defn add-copper (
  vp:VirtualLP,
  li:LayerIndex,
  shape:Shape
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  append(vp, VirtualCopper(li, shape, name? = name, class = class))

doc: \<DOC>
Add multiple copper geometry elements to the landpattern on a particular layer index.
<DOC>
public defn add-copper (
  vp:VirtualLP,
  li:LayerIndex,
  shapes:Seqable<Shape>
  --
  class:Seqable<String>|String = []
  ) -> False:
  val new-cu = for sh in shapes seq:
    VirtualCopper(li, sh, class = class)
  append-all(vp, new-cu)

doc: \<DOC>
Add a new child virtual landpattern node
@param vp Self
@param child VirtualLP to include as a child of `vp`
@throws ValueError If the passed `child` is already associated
with a parent.
<DOC>
public defn append (vp:VirtualLP, child:VirtualLP) -> False :
  ; TODO - check for cycles
  if parent(child) is-not None:
    throw $ ValueError("VirtualLP Child is already claimed by Parent")
  set-parent(child, One(vp))
  add{_, child} $ children(vp)

doc: \<DOC>
Create a new Virtual Landpattern that is a child of this node
@param vp Self
@param offset Default pose for the child node. This pose will
  be relative to the parent's pose.
@return VirtualLP with parent set to `vp`.
<DOC>
public defn create-child (
  vp:VirtualLP
  --
  offset:Pose = DEF_VLP_POSE
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> VirtualLP :
  val ret = VirtualLP(
    vp,
    offset,
    name? = name,
    class = class
    )
  add{_, ret} $ children(vp)
  ret

doc: \<DOC>
Retrieve a child node by name from the parent virtual land pattern

This function is recursive. It will attempt to match to a child
node in the `vp` scene graph by name.

@param vp The parent scope to search
@param name Child name that we will match on. Unnamed children will
be ignored.
@return One<VirtualLP> if we find a child with `name? = name` else `None()`
<DOC>
public defn get-child (vp:VirtualLP, name:String) -> Maybe<VirtualLP> :
  val elems = to-tuple $ for elem in find-by-name(vp, name) filter:
    elem is VirtualLP
  if length(elems) > 1:
    println("Found Multiple Nodes with name='%_'")

  if length(elems) > 0:
    One(elems[0] as VirtualLP)
  else:
    None()

public defn get-child! (vp:VirtualLP, name:String) -> VirtualLP :
  val child? = get-child(vp, name)
  value!(child?)

doc: \<DOC>
Local Elements for this Virtual Landpattern

This does not search recursively into the children, it just
reports the elements of this node.
<DOC>
public defn elements (vp:VirtualLP) -> Seqable<VirtualElement> :
  for grp in [lands(vp), artwork(vp), metal(vp)] seq-cat:
    for elem in grp seq:
      elem as VirtualElement

doc: \<DOC>
Recursively generate the pads and layer artwork for this virtual landpattern

This function should be called from within a `pcb-landpattern`
definition. It will create `pad` and `layer` statements
which build up the landpattern
<DOC>
public defmethod make-landpattern (vp:VirtualLP, parent-pose:Pose = DEF_VLP_POSE) :
  inside pcb-landpattern:
    val curr-pose = parent-pose * pose(vp)
    ; Pads, Artwork, and Metal
    for elem in elements(vp) do:
      make-landpattern(elem, curr-pose)

    for child in children(vp) do:
      make-landpattern(child, curr-pose)

doc: \<DOC>
Find all virtual landpattern elements with the given name
<DOC>
public defn find-by-name (vp:VirtualLP, name:String) -> Seqable<VirtualElement> :
  val local-elems = for elem in cat( [vp], elements(vp) ) filter:
    name?(elem) is-not None
    match(name?(elem)):
      (_:None): false
      (x:One<String>): value(x) == name

  val kid-elems = for child in children(vp) seq-cat:
    find-by-name(child, name)

  cat(local-elems, kid-elems)

doc: \<DOC>
Find all virtual landpattern elements with the given class
<DOC>
public defn find-by-class (vp:VirtualLP, cls:String) -> Seqable<VirtualElement> :
  val local-elems = for elem in cat([vp], elements(vp)) filter:
    contains?(class(elem), cls)
  val kid-elems = for child in children(vp) seq-cat:
    find-by-class(child, cls)
  cat(local-elems, kid-elems)

defn identify-pad-row-col (vp:VirtualLP, prefix:String) -> Tuple<Int> :
  val pad-elems = find-by-class(vp, "pad")
  val found-indices = for pad-elem in pad-elems seq?:
    val row-cls = for cls in class(pad-elem) first:
      if prefix?(cls, prefix):
        One(cls)
      else:
        None()
    match(row-cls):
      (_:None):
        throw $ ValueError("Pad '%_' does not have a '%_*' class" % [pad-elem, prefix])
        None()
      (given:One<String>):
        val index = last $ to-list $ split(value(given), "-")
        match(to-int(index)):
          (_:False): None()
          (x:Int): One(x)

  to-tuple $ unique(found-indices)

doc: \<DOC>
Identify the unique rows of pads in this land pattern
@param vp VirtualLP SceneGraph
@return Tuple of row indices. For example, a dual
with 16 pins (2 x 8) will have 8 rows and 2 columns. This
function will return 8.
<DOC>
public defn identify-pad-rows (vp:VirtualLP) -> Tuple<Int> :
  identify-pad-row-col(vp, "row-")

doc: \<DOC>
Identify the unique columns of pads in this land pattern
@param vp VirtualLP SceneGraph
@return Tuple of row indices. For example, a square quad
with 8 x 8 will have 8 rows and 4 columns. This function
will return 4.
<DOC>
public defn identify-pad-columns (vp:VirtualLP) -> Tuple<Int> :
  identify-pad-row-col(vp, "col-")

doc: \<DOC>
Retrieve the pads in the specified row
@param vp VirtualLP SceneGraph
@param row Identifies the row of pads to retrieve. Must be >= 0.
@return Sequence of `VirtualPad` objects. If no row with
index `row` is present, then an empty sequence will be provided.
<DOC>
public defn get-pads-by-row (vp:VirtualLP, row:Int) -> Seq<VirtualPad> :
  ensure-non-negative!("row", row)
  seq{as-VirtualPad, _} $ find-by-class(vp, to-string $ "row-%_" % [row])

doc: \<DOC>
Retrieve the pads in the specified column
@param vp VirtualLP SceneGraph
@param row Identifies the column of pads to retrieve. Must be >= 0.
@return Sequence of `VirtualPad` objects. If no column with
index `column` is present, then an empty sequence will be provided.
<DOC>
public defn get-pads-by-column (vp:VirtualLP, column:Int) -> Seq<VirtualPad> :
  ensure-non-negative!("column", column)
  seq{as-VirtualPad, _} $ find-by-class(vp, to-string $ "col-%_" % [column])

doc: \<DOC>
Find a virtual pad with the given reference
<DOC>
public defn get-pad-by-ref (vp:VirtualLP, r:Ref|Int) -> Maybe<VirtualPad> :
  for lp-pad in get-pads(vp) first:
    if pad-id(lp-pad) == r:
      One(lp-pad)
    else:
      None()

doc: \<DOC>
Forcefully find a virtual pad with the given reference
<DOC>
public defn get-pad-by-ref! (vp:VirtualLP, r:Ref|Int) -> VirtualPad :
  val pin-1-pad? = get-pad-by-ref(vp, r)
  match(pin-1-pad?):
    (_:None): throw $ ValueError("Failed to find Pad with Ref: %_" % [r])
    (x:One<VirtualPad>): value(x)

doc: \<DOC>
Find the earliest virtual pad in the given landpattern by comparing pad references
<DOC>
public defn get-first-pad (vp:VirtualLP) -> VirtualPad :
  defn earlier-pad (p1:VirtualPad, p2:VirtualPad) -> VirtualPad :
    p2 when compare-pad-id(pad-id(p2), pad-id(p1)) < 0 else p1
  val pads = get-pads(vp)
  if empty?(pads) :
    throw(Exception("Virtual landpattern has no pads"))
  reduce(earlier-pad, pads)

; Converters
#for (vType in [VirtualPad, VirtualArtwork, VirtualCopper, VirtualLP]
  funcName in [as-VirtualPad, as-VirtualArtwork, as-VirtualCopper ,as-VirtualLP]) :
  public defn funcName (e:VirtualElement) -> vType :
    e as vType

;============================================================
;================= Pad Reference Comparison =================
;============================================================

doc: \<DOC>
Compare two pad references
<DOC>
public defn compare-pad-id (r1:Ref|Int, r2:Ref|Int) -> Int :
  ; Returns the result of the second compare if the first is 0
  defn comp-join (comp0:Int, comp1:(() -> Int)) -> Int :
    comp1() when (comp0 == 0) else comp0

  ; Compares symbolic row names such that A < Y < AA
  defn row-comp (r1:Symbol, r2:Symbol) -> Int :
    val s1 = to-string(r1)
    val s2 = to-string(r2)
    comp-join(compare(length(s1), length(s2)), {compare(s1, s2)})

  ; Converts ref into list of symbols and ints
  defn* to-list (r:Ref|Int, tail:List<Symbol|Int>) :
    match(r) :
      (r:Int) : cons(r, tail)
      (r:VarRef) : cons(name(r), tail)
      (r:FieldRef) : to-list(ref(r), cons(name(field(r)), tail))
      (r:IndexRef) : to-list(ref(r), cons(index(r), tail))

  val l1 = to-list(r1, List())
  val l2 = to-list(r2, List())
  let loop (l1:List<Symbol|Int> = l1, l2:List<Symbol|Int> = l2) :
    if empty?(l1) : 0 when empty?(l2) else -1
    else if empty?(l2) : 1
    else :
      match(head(l1), head(l2)) :
        (s1:Symbol, s2:Symbol) :
          comp-join(row-comp(s1, s2), {loop(tail(l1), tail(l2))})
        (s1:Symbol, s2:Int) : -1
        (s1:Int, s2:Symbol) : 1
        (s1:Int, s2:Int) :
          comp-join(compare(s1, s2), {loop(tail(l1), tail(l2))})
