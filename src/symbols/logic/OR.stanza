#use-added-syntax(jitx)
defpackage jsl/symbols/logic/OR:
  import core
  import math
  import jitx

  import jsl/ensure
  import jsl/errors
  import jsl/symbols/framework

; OR Gate Symbol Geometry is a lot more complex than the
;  AND gate but still it boils down to a combination
;  of lines and arcs.
; Supposedly, there is an IEEE spec for this symbol but I've
;  been unable to explicitly find it.
; It is mentioned here:
;  https://forum.kicad.info/t/logic-gate-shapes/22811
;

val DEF_OR_APEX_TO_CENTERS_RATIO = 10.0 / 26.0
val DEF_OR_REAR_CURVE_R_TO_H_RATIO = 26.0 / 26.0
val DEF_OR_XOR_CURVE_R_TO_H_RATIO = 26.0 / 26.0
val DEF_OR_XOR_OFFSET_TO_H_RATIO = 5.0 / 26.0


val DEF_OR_HEIGHT = 3.0
val DEF_OR_FILLED? = false
val DEF_OR_LINE_WIDTH = 0.05
val DEF_OR_PIN_LEN = 2.0
val DEF_OR_PAD_REF_SIZE = 0.65

public defstruct ORGateSymbolParams <: SymbolParams :
  doc: \<DOC>
  Gate Body Height
  All of the other dimensions of the OR gate are derived from the
  total height of the body. Typically we select this so that the pins
  will fit nicely in the input side.
  <DOC>
  height:Double with:
    updater => sub-size
    default => DEF_OR_HEIGHT
  filled?:True|False with:
    updater => sub-filled?
    default => DEF_OR_FILLED?
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    default => DEF_OR_LINE_WIDTH
  pin-length:Double with:
    ensure => ensure-positive!
    updater => sub-pin-length
    default => DEF_OR_PIN_LEN
  pad-ref-size:Double with:
    ensure => ensure-positive!
    updater => sub-pad-ref-size
    default => DEF_OR_PAD_REF_SIZE
  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  printer => true
  equalable => true

defn get-body-size (p:ORGateSymbolParams, exclusive?:True|False) -> [Double, Double] :
  val h = height(p)
  val w = compute-symbol-width(h, exclusive?)
  [w, h]

var DEF_OR_PARAMS = ORGateSymbolParams()
public defn get-default-or-gate-symbol-params () -> ORGateSymbolParams :
  DEF_OR_PARAMS

public defn set-default-or-gate-symbol-params (v:ORGateSymbolParams) -> False :
  DEF_OR_PARAMS = v

defn compute-centers-to-origin (h:Double) -> Double :
  ; We use Pythagorean theorem to compute the
  ;  centers offset from the origin (-x)
  val c = h
  val a = h / 2.0
  sqrt(pow(c, 2.0) - pow(a, 2.0))

defn compute-rear-arc-radius (h:Double) -> Double :
  DEF_OR_REAR_CURVE_R_TO_H_RATIO * h

defn compute-rear-arc-center (h:Double) -> Point :
  val centers-to-origin = compute-centers-to-origin(h)
  val rear-apex-to-centers = DEF_OR_APEX_TO_CENTERS_RATIO * h
  val rear-R = compute-rear-arc-radius(h)
  val xoff = centers-to-origin + rear-apex-to-centers + rear-R
  Point((- xoff), 0.0)

defn compute-rear-arc-end-point (h:Double) -> Point :

  val rear-R = compute-rear-arc-radius(h)
  val rear-center = compute-rear-arc-center(h)
  ; Use Pythogorean Algo to compute the X offset of
  ;   the rear arc endpoint.
  val c = rear-R
  val a = h / 2.0
  val b = sqrt(pow(c, 2.0) - pow(a, 2.0))

  val xoff = x(rear-center) + b
  Point(xoff, a)

doc: \<DOC>
Compute Rear arc sweep angle in degrees
<DOC>
defn compute-rear-arc-sweep (h:Double) -> Double:

  val rear-center = compute-rear-arc-center(h)
  val rear-ep = compute-rear-arc-end-point(h)

  val xy = rear-ep - rear-center
  to-degrees $ 2.0 * atan(y(xy) / x(xy))

doc: \<DOC>
Compute the front arc sweep angle in degrees
<DOC>
defn compute-front-arc-sweep (h:Double) -> Double:
  val x-off = compute-centers-to-origin(h)
  to-degrees $ atan(x-off / (h / 2.0))

defn compute-symbol-width (h:Double, exclusive?:True|False) -> Double:
  val rear-ep = compute-rear-arc-end-point(h)
  val xor-offset = if exclusive? : DEF_OR_XOR_OFFSET_TO_H_RATIO * h
  else: 0.0
  abs(x(rear-ep)) + xor-offset

doc: \<DOC>
Compute the symbol grid container for the gate width
The user can provide a symbol body width of any value. To
support this and keep the pins on the schematic grid,
we round the width up to the next half-number. Then we insert
extra lines on the inputs to extend to the grid.
<DOC>
defn round-body-width (w:Double) -> Double :
  ceil(w)

doc: \<DOC>
Construct the OR Gate Symbol Glyphs
The origin for the OR gate is the base of the
output pin. This allows for the output pin to always
be on grid. For the inputs, we add an extra line per
input so that input pin lands on the grid.
<DOC>
public defn build-or-gate-glyphs (
  node:SymbolNode,
  num-inputs:Int,
  pin-pitch:Double,
  exclusive?:True|False,
  p:ORGateSymbolParams
  ):
  val lw = line-width(p)
  val [w, h] = get-body-size(p, exclusive?)
  val h2 = h / 2.0

  val ctr-offset = compute-centers-to-origin(h)
  val front-r = h
  val front-sweep = compute-front-arc-sweep(h)
  val top-front-start = 90.0 - front-sweep

  val top-front-arc = Arc(
    Point((- ctr-offset), (- h2)),
    front-r,
    top-front-start,
    front-sweep
  )
  val bot-front-arc = Arc(
    Point((- ctr-offset), h2),
    front-r,
    270.0
    front-sweep
  )

  val top-rear-ep = compute-rear-arc-end-point(h)
  val bot-rear-ep = Point(x(top-rear-ep), (- y(top-rear-ep)))

  val rear-r = h
  val rear-center = compute-rear-arc-center(h)
  val rear-sweep = compute-rear-arc-sweep(h)
  val rear-arc = Arc(
    rear-center,
    rear-r,
    (rear-sweep / 2.0),
    (- rear-sweep)
  )

  polyline(node, [
    top-front-arc
    Point((- ctr-offset), h2)
    top-rear-ep
    rear-arc
    bot-rear-ep
    Point((- ctr-offset), (- h2))
    bot-front-arc,
    ; This last point should not technically be required
    ;  but there seems to be an issue with the Arc rendering
    ;  the last segment connecting the arc to the output point.
    Point(0.0, 0.0),
  ], width = lw, name = "body")

  val [arc-ctr, arc-r] = if not exclusive? :
    [rear-center, rear-r]
  else:
    val xor-r = DEF_OR_XOR_CURVE_R_TO_H_RATIO * h
    val xor-offset = Point(DEF_OR_XOR_OFFSET_TO_H_RATIO * h, 0.0)
    val xor-center = rear-center - xor-offset
    val top-xor-ep = top-rear-ep - xor-offset
    val bot-xor-ep = bot-rear-ep - xor-offset

    val xor-arc = Arc(
      xor-center,
      xor-r,
      (rear-sweep / 2.0),
      (- rear-sweep)
    )
    polyline(node, [
      top-xor-ep,
      xor-arc,
      bot-xor-ep
      ], width = lw, name = "xor-arc")
    [xor-center, xor-r]

  val W = round-body-width(w)
  val inpos-set = get-input-pin-positions(num-inputs, pin-pitch, W)

  val eps = 0.01
  for (inpos in inpos-set, i in 1 to false) do:
    val [pos, lead-len] = compute-pin-leader(inpos, arc-ctr, arc-r)
    if lead-len > eps:
      val name = to-string $ "leader-%_" % [i]
      line(node, [inpos, pos], width = lw, name = name)


defn compute-pin-leader (inpos:Point, arc-ctr:Point, arc-r:Double) -> [Point, Double]:
  ; Use Pythagorean theorem to solve for X position on the
  ;  arc
  val b = sqrt(pow(arc-r, 2.0) - pow(y(inpos), 2.0))
  val arc-x = x(arc-ctr) + b
  val leader-pos = Point(arc-x, y(inpos))
  [leader-pos, abs(x(inpos) - arc-x)]

public val OR_IN_REF = Ref("in")
public val OR_OUT_REF = Ref("out")

val DEF_OR_INVERTED = false
val DEF_OR_EXCLUSIVE = false
val DEF_OR_OC_TYPE = None()

val DEF_OR_NUM_INPUTS = 2
; This default is good for 2 inputs but for 3-pins it will
;  be too large.
val DEF_OR_PIN_PITCH = 2.0

public defstruct ORGateSymbol <: SymbolDefn :
  doc: \<DOC>
  Sets a active low bubble out the output or not
  This is how to make an NOR gate symbol.
  <DOC>
  inverted?:True|False with:
    updater => sub-inverted?,
    default => DEF_OR_INVERTED
  doc: \<DOC>
  Sets the symbol to an Exclusive OR (XOR) style
  <DOC>
  exclusive?:True|False with:
    updater => sub-exclusive?,
    default => DEF_OR_EXCLUSIVE
  doc: \<DOC>
  Optional open-collector symbol on output pin.
  Default is None()
  <DOC>
  open-collector?:Maybe<OpenCollectorType> with:
    updater => sub-oc-type,
    default => DEF_OR_OC_TYPE
  doc: \<DOC>
  Number of OR gate inputs
  The default is 2 and this value must be greater than 1
  <DOC>
  num-inputs:Int with:
    updater => sub-num-inputs,
    default => DEF_OR_NUM_INPUTS
    ensure => ensure-greater!(1)
  doc: \<DOC>
  Spacing between input pins.
  This value is in symbol grid units. The best values are
  whole numbers or half-numbers (0.5, 1.5, etc).
  <DOC>
  pin-pitch:Double with:
    updater => sub-pin-pitch,
    default => DEF_OR_PIN_PITCH,
    ensure => ensure-positive!
  doc: \<DOC>
  Input Base Reference
  The symbol will construct individual `IndexRef` values from this
  base `Ref`, starting at 1. Example: For a 2-input OR gate, the
  input pins would be `in[1]` and `in[2]`.
  <DOC>
  in-ref:Ref with:
    default => OR_IN_REF
  doc: \<DOC>
  Output Reference
  User can override the default for supporting multi-channel
  chips.
  <DOC>
  out-ref:Ref with:
    default => OR_OUT_REF
  params:Maybe<ORGateSymbolParams> with:
    default => None()
with:
  printer => true
  keyword-constructor => true


public defmethod name (x:ORGateSymbol) -> String :
  match(inverted?(x), exclusive?(x)):
    (i:True,e:True): "XNOR Gate"
    (i:True,e:False): "NOR Gate"
    (i:False,e:True): "XOR Gate"
    (i:False,e:False): "OR Gate"

defmethod get-params (x:ORGateSymbol) -> ORGateSymbolParams :
  match(params(x)):
    (_:None): get-default-or-gate-symbol-params()
    (v:One<ORGateSymbolParams>): value(v)

doc: \<DOC>
Compute the pin positions for the Gate Symbol.
<DOC>
defn get-input-pin-positions (num-pins:Int, pin-pitch:Double, width:Double) -> Tuple<Point> :
  val y-start = (to-double(num-pins - 1) * pin-pitch) / 2.0
  to-tuple $ for i in 0 to num-pins seq :
    Point((- width), y-start - (to-double(i) * pin-pitch))

defn get-output-pin-position (width:Double) -> Point :
  Point(0.0, 0.0)

public defmethod build-pins (x:ORGateSymbol, node:SymbolNode) :
  val p = get-params(x) as ORGateSymbolParams

  val numPins = num-inputs(x)
  val pinPitch = pin-pitch(x)

  val [w, h] = get-body-size(p, exclusive?(x))
  val W = round-body-width(w)

  val inpos-set = get-input-pin-positions(numPins, pinPitch, W)
  val out-pos = get-output-pin-position(W)

  val input-params = VirtualPinParams(
    direction = Left,
    pin-length = pin-length(p),
    pad-ref-size = pad-ref-size(p)
  )
  for (inpos in inpos-set, i in 1 to false) do:
    val pin-ref = in-ref(x)[i]
    add-pin(node, pin-ref, inpos, params = input-params, name = to-string("pin-%_" % [[pin-ref]]))

  val output-params = VirtualPinParams(
    direction = Right,
    pin-length = pin-length(p),
    pad-ref-size = pad-ref-size(p)
  )
  val out-pin = add-pin(node, out-ref(x), out-pos, params = output-params, name = to-string("pin-%_" % [out-ref(x)]))
  if inverted?(x):
    add-decorator(out-pin, ActiveLowDecorator())
  match(open-collector?(x)):
    (_:None): false
    (oc-type:One<OpenCollectorType>):
      add-decorator(out-pin, OpenCollectorDecorator(oc-type = value(oc-type)))

public defmethod build-artwork (x:ORGateSymbol, node:SymbolNode) :
  val p = get-params(x) as ORGateSymbolParams
  build-or-gate-glyphs(node, num-inputs(x), pin-pitch(x), exclusive?(x), p)

public defmethod build-params (x:ORGateSymbol, sn:SymbolNode) :
  val p = get-params(x) as ORGateSymbolParams
  val [w, h] = get-body-size(p, exclusive?(x))
  val h2 = h / 2.0
  build-labels(
    get-label-params(p),
    sn,
    LabelPosition([0.0, h2 + 0.5], SW)
    LabelPosition([0.0, (- (h2 + 0.5))], NW)
    )
