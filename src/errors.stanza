#use-added-syntax(jitx)
defpackage jsl/errors:
  import core
  import jitx
  ; import jitx/commands

doc: \<DOC>
Value Error
This exception is intended to be thrown when checking
for values that don't meet pre-/post- conditions for a
function. This may include invalid values for a particular
application.
<DOC>
public defstruct ValueError <: Exception:
  msg:String

public defn ValueError (msg:Printable) -> ValueError:
  ValueError(to-string(msg))

public defmethod print (o:OutputStream, e:ValueError):
  print(o, "ValueError: %_" % [msg(e)])


public defstruct ArgumentError <: Exception:
  msg:String

public defn ArgumentError (msg:Printable) -> ArgumentError:
  ArgumentError(to-string(msg))

public defmethod print (o:OutputStream, e:ArgumentError):
  print(o, "ArgumentError: %_" % [msg(e)])

public defstruct NotImplementedYet <: RuntimeError:
  msg:String

public defn NotImplementedYet (msg:Printable) -> NotImplementedYet:
  NotImplementedYet(to-string(msg))

public defmethod print (o:OutputStream, e:NotImplementedYet):
  print(o, "Not Implemented Yet: %_" % [msg(e)])

doc: \<DOC>
This exception is thrown when we expect two ports/pins to be of the same type and they aren't
<DOC>
public defstruct MisMatchPortError <: Exception:
  p1:PortType
  p2:PortType
  msg:Maybe<String>
with:
  constructor => #MisMatchPortError

public defn MisMatchPortError (
  p1:PortType, p2:PortType
  --
  msg:String = ?
  ) -> MisMatchPortError:
  #MisMatchPortError(p1, p2, msg)

public defmethod print (o:OutputStream, e:MisMatchPortError) :
  println(o, "Mis-Matched Port Type: p1=%_  p2=%_" % [p1(e), p2(e)])
  match(msg(e)):
    (_:None): false
    (m?:One<String>): println("  %_" % [value(m?)])

public defstruct MaxIterationsExceededError <: RuntimeError :
  msg:String

public defn MaxIterationsExceededError (msg:Printable) -> MaxIterationsExceededError:
  MaxIterationsExceededError(to-string(msg))

public defmethod print (o:OutputStream, e:MaxIterationsExceededError):
  print(o, "Max Iterations Limit Exceed: %_" % [msg(e)])

doc: \<DOC>
This exception is thrown when an Instance lacks `supports` for a particular bundle type.
<DOC>
public defstruct InvalidComponentSupports <: Exception:
  expected-supports:Tuple<String>

public defmethod print (o:OutputStream, e:InvalidComponentSupports):
  print(o, "Expected Instance to provide one of '%,' supports - but none were found"  % [expected-supports(e)])
