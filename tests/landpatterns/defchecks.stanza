#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/defchecks:
  import core
  import collections
  import jitx
  import jitx/commands
  import jsl/errors
  import jsl/tests/utils

doc: \<DOC>
Pad Grid - Tool for Checking Landpatterns
This type provides a means of using the introspection
tools to discover the generated pads and check
that they are correct.
<DOC>
public defstruct PadGrid :
  rows:HashTable<Double, Tuple<LandPatternPad>>
  columns:HashTable<Double, Tuple<LandPatternPad>>

defn update (rows:HashTable<Double, Tuple<LandPatternPad>>, y-pos:Double, pd:LandPatternPad) :
  val res = get?(rows, y-pos, [])
  val newPads = to-tuple $ cat(res, [pd])
  set(rows, y-pos, newPads)

val GRID-EPS = 1.0e-6

public defn combine-within-threshold (
  pad-set:HashTable<Double, Tuple<LandPatternPad>>,
  eps:Double
  ) -> HashTable<Double, Tuple<LandPatternPad>> :
  val ret = HashTable<Double, Tuple<LandPatternPad>>()
  val ordinals = to-vector<Double> $ keys(pad-set)
  while length(ordinals) > 0:
    val ordinal = pop(ordinals)

    val m-indices = to-vector<Int> $ for (sister in ordinals, i in 0 to false) seq?:
      if almost-equal?(ordinal, sister, eps):
        One(i)
      else:
        None()

    qsort!(m-indices)

    val matches = to-tuple $ for i in in-reverse(m-indices) seq:
      remove(ordinals, i)

    val matching-ordinals = cat([ordinal], matches)
    val ord-set = to-tuple $ for o in matching-ordinals seq-cat :
      pad-set[o]
    ret[ordinal] = ord-set

  ret


public defn PadGrid (lp-def:LandPattern) -> PadGrid:
  val rows = HashTable<Double, Tuple<LandPatternPad>>()
  val cols = HashTable<Double, Tuple<LandPatternPad>>()
  for lp-pad in pads(lp-def) do:
    val l = pose(lp-pad)
    val pos = center(l)
    update(rows, y(pos), lp-pad)
    update(cols, x(pos), lp-pad)

  val rows* = combine-within-threshold(rows, GRID-EPS)
  val cols* = combine-within-threshold(cols, GRID-EPS)
  PadGrid(rows*, cols*)


doc: \<DOC>
Diff the elements of a series
This function assumes that the values in `x` are sorted in
ascending order.
<DOC>
public defn diff-series (x:Seqable<Double>) -> Seqable<Double> :
  val x* = to-tuple(x)
  for i in 0 to length(x*) seq?:
    if i == 0:
      None()
    else:
      One(x*[i] - x*[i - 1])

doc: \<DOC>
Retrieve the Y coordinates of all the rows [Sorted]
<DOC>
public defn row-Ys (x:PadGrid) -> Vector<Double> :
  val ys = to-vector<Double>(keys(rows(x)))
  qsort!(ys)
  ys

doc: \<DOC>
Extract the pitch between the sequence of pad rows
@return Ordered sequence of distance from one pad row to the next.
If `x` is length N, the returned sequence will be N-1 in length.
@throws ValueError If there are less than 2 rows in the found grid.
<DOC>
public defn row-pitch (x:PadGrid) -> Seqable<Double> :
  val ys = row-Ys(x)
  if length(ys) < 2:
    throw $ ValueError("Invalid Grid for Pitch Check: # rows = %_" % [length(ys)])

  diff-series(ys)

doc: \<DOC>
Check if all row pitches match the passed tolerance range.
<DOC>
public defn check-row-pitch (x:PadGrid, exp-Pitch:Toleranced) -> True|False :
  val pitches = to-tuple $ row-pitch(x)
  val ret = for pitch in pitches all?:
    in-range?(exp-Pitch, pitch)
  if not ret:
    println("Row Pitches: %," % [pitches])
  ret

doc: \<DOC>
Retrieve the X coordinates of all the columns [Sorted]
<DOC>
public defn column-Xs (x:PadGrid) -> Vector<Double>:
  val xs = to-vector<Double>(keys(columns(x)))
  qsort!(xs)
  xs

doc: \<DOC>
Extract the pitch between the sequence of pad columns
@return Ordered sequence of distance from one pad column to the next.
If `x` is length N, the returned sequence will be N-1 in length.
@throws ValueError If there are less than 2 columns in the found grid.
<DOC>
public defn column-pitch (x:PadGrid) -> Seqable<Double> :
  val xs = column-Xs(x)
  if length(xs) < 2:
    throw $ ValueError("Invalid Grid for Pitch Check: # columns = %_" % [length(xs)])

  diff-series(xs)

doc: \<DOC>
Check if all column pitches match the passed tolerance range.
<DOC>
public defn check-column-pitch (x:PadGrid, exp-Pitch:Toleranced) -> True|False :
  val pitches = to-tuple $ column-pitch(x)
  val ret = for pitch in pitches all?:
    in-range?(exp-Pitch, pitch)

  if not ret:
    println("Column Pitches: %," % [pitches])
  ret

doc: \<DOC>
Retrieve the ordered column of Pads by column index
@param x (Self)
@param column Which column of pads to extract.
@return The pads in this column are sorted in ascending ordered by
the Y coordinate of the pad
<DOC>
public defn get-column (pg:PadGrid, column:Int) -> Vector<LandPatternPad> :
  val colX = to-vector<Double>(keys(columns(pg)))
  qsort!(colX)
  val colPads = to-vector<LandPatternPad>(columns(pg)[colX[column]])
  qsort!({y $ center $ pose(_)}, colPads)
  colPads

doc: \<DOC>
Retrieve the ordered row of Pads by row index
@param x (Self)
@param row Which row of pads to extract.
@return The pads in this row are sorted in ascending ordered by
the X coordinate of the pad
<DOC>
public defn get-row (pg:PadGrid, row:Int) -> Vector<LandPatternPad> :
  val rowY = to-vector<Double>(keys(rows(pg)))
  qsort!(rowY)
  val rowPads = to-vector<LandPatternPad>(rows(pg)[rowY[row]])
  qsort!({x $ center $ pose(_)}, rowPads)
  rowPads

doc: \<DOC>
Find a Pad in a Landpattern by Reference or Pin Number
<DOC>
public defn find-pad-by-ref (lp-def:LandPattern, pin-id:Int|Ref) -> LandPatternPad|False :
  val r = match(pin-id):
    (pinNum:Int): IndexRef(Ref(`p), pinNum)
    (y): y
  for p in pads(lp-def) find:
    ref(p) == r


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Layer Check Tools
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; These tools are used to verify the layer output
;  of a pad or landpattern matches expectations.

#if-defined(TESTING):
  ; This bit of tom foolery is to work around the way that certain layers
  ;   are defined.
  ; Because `Silkscreen(...)` is defined with a string name - I can't just
  ;  add `Silkscreen` to a set. I have to add a special identifier that
  ;  I can handle differently. Here I add that custom specifier to the
  ;  `LayerSpecifier` type.
  ;
  ; The user can then pass `TopSilkscreen()` as an expected layer and
  ;  these functions will not cause a failure if silkscreen on the top
  ;  layer is encountered in a pad/landpattern definition.
  #for (FakeType in [TopSilkscreen, BottomSilkscreen, AnyForbidCopper]):

    public defstruct FakeType <: LayerSpecifier :
      ; Hackity Hack
      ;  I evidently can't create an empty `defstruct`
      dummy:Int
    with:
      hashable => true
      equalable => true
      printer => true

    public defn FakeType () -> FakeType :
      FakeType(1)


  val all-layers = to-hashset<LayerSpecifier>([
    Courtyard(Top)
    Courtyard(Bottom)
    Cutout()
    SolderMask(Top)
    SolderMask(Bottom)
    Paste(Top)
    Paste(Bottom)
    Glue(Top)
    Glue(Bottom)
    Finish(Top)
    Finish(Bottom)
    TopSilkscreen()
    BottomSilkscreen()
    ; Not possible to fully enumerate
    ; Silkscreen("MyGraphics", Top)
    ; Silkscreen("MyGraphics", Bottom)
    BoardEdge()
    ForbidVia()
    ; Not possible to fully enumerate
    ; ForbidCopper()
    AnyForbidCopper()
    ])

  defn minus<?T> (a:HashSet<?T>, b:HashSet<T>) -> HashSet<T> :
    to-hashset<T> $ for elem in a seq? :
      None() when get(b, elem) else One(elem)

  doc: \<DOC>
  Check for unexpected Layers
  This function is used to check if a {@link Landpattern} or
  {@link Pad} has any content on layers where we don't expect to
  see content.

  This function calls `#EXPECT` to fail a unit test if unexpected
  content is found.

  @param lp Definition that we are trying to inspect.
  @param not-empty Set of layers that we expect to see content on. All
    other layers will be checked for content. Think of this argument as a
    white-list of layers that are allowed to have content.
  @return Tuple of the layers that had unexpected content.
  <DOC>
  public defn expect-empty-others (lp:LandPattern|Pad, not-empty:HashSet<LayerSpecifier>) -> Tuple<LayerSpecifier> :
    val exp-empty = all-layers - not-empty

    val layShapes = layers(lp)

    ; Handle Normal Layer Specifiers - Normal here means
    ;   layer specifiers that don't have a random string
    ;   or layer number that can't be known ahead of time.
    val unexpected-normal = for layShape in layShapes seq? :
      val ls = specifier(layShape)
      val fail = get(exp-empty, ls)
      One(ls) when fail else None()

    ; Abnormal layers include unguessable strings in them
    ;   that can't be handled with a blacklist set.
    val unexpected-abnormal = for layShape in layShapes seq? :
        match(specifier(layShape)):
          (x:Silkscreen):
            if get(exp-empty, TopSilkscreen()) and side(x) == Top:
              One(x)
            else if get(exp-empty, BottomSilkscreen()) and side(x) == Bottom:
              One(x)
            else:
              None()
          (x:ForbidCopper):
            One(x) when get(exp-empty, AnyForbidCopper()) else None()
          (x):
            ; Ignore all others because they are handled in the
            ;  `Normal` unexpected for loop.
            None()
    val ret = to-tuple $ cat(unexpected-normal, unexpected-abnormal)
    #EXPECT(ret == [])
    ret
