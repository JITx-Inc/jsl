#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/courtyard:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/tests/utils
  import jsl/tests/landpatterns/defchecks
  import jsl/landpatterns/pads
  import jsl/landpatterns/packages
  import jsl/landpatterns/courtyard
  import jsl/landpatterns/VirtualLP
  import jsl/geometry/box


deftest(courtyard) test-courtyard-origin :

  pcb-landpattern test-lp:
    pad p[1] : smd-pad(Circle(0.5)) at loc(2.0, 2.0)
    pad p[2] : smd-pad(Circle(0.5)) at loc(-2.0, 2.0)
    pad p[3] : smd-pad(Circle(0.5)) at loc(2.0, -3.0)
    pad p[4] : smd-pad(Circle(0.5)) at loc(3.0, -1.0)

    make-courtyard-origin()

  val not-empty = to-hashset<LayerSpecifier>([
    SolderMask(Top)
    Paste(Top)
    CustomLayer("origin", Top)
  ])

  expect-empty-others(test-lp, not-empty)

  ; Check for Origin
  val cy = layer(test-lp, CustomLayer("origin", Top))
  #EXPECT(length(cy) == 1)

  val outline = dims(cy[0])
  #EXPECT(almost-equal?(x(outline), 1.0 + DEF_COURTYARD_LINE_WIDTH))
  #EXPECT(almost-equal?(y(outline), 1.0 + DEF_COURTYARD_LINE_WIDTH))

  val shapes = shapes(cy[0] as Union)
  #EXPECT(length(shapes) == 2)
  for shape in shapes do:
    #EXPECT(shape is Line)

deftest(courtyard) test-courtyard-boundary:

  val excess = 1.0
  val body = PackageBody(length = typ(0.1), width = typ(0.1), height = typ(0.1))
  pcb-landpattern test-lp:
    pad p[1] : smd-pad(Circle(0.5)) at loc(2.0, 2.0)
    pad p[2] : smd-pad(Circle(0.5)) at loc(-2.0, 2.0)
    pad p[3] : smd-pad(Circle(0.5)) at loc(2.0, -3.0)
    pad p[4] : smd-pad(Circle(0.5)) at loc(3.0, -1.0)

    make-courtyard-boundary(body, DensityLevelC, excess = excess)

  val not-empty = to-hashset<LayerSpecifier>([
    SolderMask(Top)
    Paste(Top)
    Courtyard(Top)
  ])

  expect-empty-others(test-lp, not-empty)

  val cy = layer(test-lp, Courtyard(Top))
  #EXPECT(length(cy) == 1)

  val outline = dims(cy[0])
  val position-span = (3.0 + 2.0)
  val pad-diam = 1.0
  val line-width = 0.2
  val mask-clear = clearance(current-rules(), MinSilkSolderMaskSpace)
  val expWidth = position-span + pad-diam + (2.0 * excess) + (2.0 * mask-clear)
  val expHeight = expWidth
  #EXPECT(almost-equal?(x(outline), expWidth))
  #EXPECT(almost-equal?(y(outline), expHeight))

deftest(courtyard) test-courtyard-build-boundary:
  val root = VirtualLP()

  ; I'm override the soldermask to make the calculations
  ;  a bit easier.
  val pad-obj = smd-pad(Circle(0.5), Circle(0.5))
  append(root, VirtualPad(1, pad-obj, loc(-1.0, 0.0), name = "first"))
  append(root, VirtualPad(2, pad-obj, loc(1.0, 0.0), name = "number-2"))

  val body = PackageBody(
    width = 0.75 +/- 0.1,
    length = 0.3 +/- 0.1,
    height = 0.25 +/- [0.06, 0.0]
  )

  val outline = build-courtyard-boundary(root, body, DensityLevelA, excess = 0.1)

  #EXPECT(width(outline) == 3.2)
  val exp-height = 1.2
  #EXPECT(height(outline) == 1.2)

  ; Building the origin marker should result in a fore-shortened
  ;  marker.

  val marker = build-courtyard-origin(root, outline)

  ; Current marker is a union of two lines. To make the math robust
  ;  I'm going to take the bounds of the shape as a `box` and
  ;  then measure its dimensions.

  val b = bounds(marker)

  val b-rect = to-Rectangle(b)
  val exp-marker-len = (exp-height * DEF_COURTYARD_LEN_RATIO) + DEF_COURTYARD_LINE_WIDTH
  val EPS = 1.0e-6
  #EXPECT(almost-equal?(width(b-rect), exp-marker-len, EPS))
  #EXPECT(almost-equal?(height(b-rect), exp-marker-len, EPS))


