#use-added-syntax(jitx, tests)
defpackage jsl/tests/si/Microstrip:
  import core
  import jitx

  import jsl/tests/utils
  import jsl/si/Microstrip
  import jsl/si/TransmissionLine


deftest(si-microstrip) test-Z0-no-thickness:

  val m = Microstrip(
    eps-r = 4.5
    dielectric-height = 1.3
    width =  0.45
    thickness = 0.0
  )

  val obs = Z0(m)
  val expZ0 = 126.194
  #EXPECT(almost-equal?(obs, expZ0, 0.001))


deftest(si-microstrip) test-Z0-with-thickness:

  val m = Microstrip(
    eps-r = 4.7
    dielectric-height = 0.75
    width =  0.35
    thickness = 0.035
  )

  val obs = Z0(m)
  val expZ0 = 107.368
  #EXPECT(almost-equal?(obs, expZ0, 0.001))

  ; Altium Computes this to be 50.0
  ; So does the digikey calculation (IPC 2141)
  ;    https://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-pcb-trace-impedance
  ; But I don't think IPC 2141 is as accurate as Wadell
  val m2 = Microstrip(
    eps-r = 4.05
    dielectric-height = 0.0889
    width = 0.1516
    thickness = 0.03556
  )

  val m2-obs = Z0(m2)
  val m2-expZ0 = 57.211
  #EXPECT(almost-equal?(m2-obs, m2-expZ0, 0.001))

deftest(si-microstrip) test-solve-Z:
  val m = Microstrip(
    eps-r = 4.7
    dielectric-height = 0.75
    width =  0.30
    thickness = 0.035
  )

  val target = 100.0
  val m* = solve-Z(m, target)
  ; println("M1: %_" % [m*])
  val Z* = Z0(m*)
  ; println("CharImped: %_" % [Z*])

  #EXPECT(almost-equal?(Z*, target, 0.001))

  val m2 = Microstrip(
    eps-r = 4.05
    dielectric-height = 0.0889
    width = 0.25
    thickness = 0.03556
  )

  val target-2 = 50.0
  val m2* = solve-Z(m2, target-2)
  ; println("M2: %_" % [m2*])
  val Z2* = Z0(m2*)
  ; println("CharImped: %_" % [Z2*])

  #EXPECT(almost-equal?(Z2*, target-2, 0.001))
