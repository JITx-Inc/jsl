#use-added-syntax(jitx)
defpackage jsl/landpatterns/dual-row:
  import core
  import math
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/design/settings
  import jsl/geometry/LineRectangle
  import jsl/geometry/basics
  import jsl/geometry/box

  import jsl/landpatterns/silkscreen
  import jsl/landpatterns/courtyard
  import jsl/landpatterns/packages
  import jsl/landpatterns/numbering
  import jsl/landpatterns/pads
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/leads
  import jsl/landpatterns/IPC
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/grid-planner
  import jsl/landpatterns/pad-grid

public val DUAL-ROW-COLS = 2

doc: \<DOC>
Base Dual Row Package Definition

This is a base type that is intended to
help construct dual-row package ICs, such
as SOIC, SOP, SON, etc.

The user is expected to create a type that
derives from `Dual-Package` and then
provide the remaining methods to construct
the landpattern, like `build-silkscreen`.
<DOC>
public defstruct Dual-Package <: Package :
  num-leads:Int with: (ensure => ensure-even-positive!, as-method => true)

  doc: \<DOC>
  Lead Profile Defines the Configuration of leads on each edge
  <DOC>
  lead-profile:Lead-Profile
  doc: \<DOC>
  Optional thermal lead for the package.
  <DOC>
  thermal-lead?:False|Shape

  doc: \<DOC>
  Package Body for the Quad-based Package.
  <DOC>
  package-body:PackageBody with: (as-method => true)

  doc: \<DOC>
  Pad Planner for the Quad package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with: (as-method => true)

  doc: \<DOC>
  Lead Numbering Scheme for the Quad Package

  This provides a numbering scheme for the leads of the Dual
  package. By default, it uses {@link Column-Major-Numbering}.
  <DOC>
  lead-numbering:Numbering with: (as-method => true)

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with: (as-method => true)

with:
  printer => true
  constructor => #Dual-Package

public defmethod build-pads (
  pkg:Dual-Package,
  vp:VirtualLP
  ) -> False :

  val profile = lead-profile(pkg)
  val rows = num-leads(pkg) / DUAL-ROW-COLS
  val params = compute-params(profile)

  val pad-seq = pad-grid-smt(
    pad-size = pad-size(params),
    planner = pad-planner(pkg),
    lead-grid = DualGridPlanner(
      lead-params = params
      rows = rows,
    ),
    num-scheme = lead-numbering(pkg) ;  num-scheme,
  )

  append-all(vp, pad-seq)

  match(thermal-lead?(pkg)):
    (lead-shape:Shape):
      val cls = ["pad", "thermal"]
      append(vp, VirtualPad(num-leads(pkg) + 1, smd-pad(lead-shape), loc(0.0, 0.0), class = cls))
    (x:False): false


doc: \<DOC>
Compute outline shape by avoiding overlaps with pads

This function takes an outline (like the outline of the package body)
and computes the set of shapes that can maximally fullfill that outline
but not overlap with any of the pads in a package.

This function will also obey clearance requirements to prevent DRC
issues.

@param outline Starting Outline centered at origin.
@param lp-pads Landpattern pads to avoid. These pads should be centered
  at the origin.
<DOC>
public defn compute-outline (
  vp:VirtualLP,
  pkg-body:PackageBody,
  density-level:DensityLevel
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ) -> Shape :

  val pkg-outline = bounds $ envelope(pkg-body, density-level = density-level)
  val courtyard? = get-courtyard-boundary(vp, side = side)

  ; Check for overlap between the pad soldermask and the
  ;  current proposed outline. We will then shrink the
  ;  proposed outline until there is at least `mask-clearance`
  ;  on either side.
  val h-shrink = let:
    val col-0-pads = seq{as-VirtualPad, _} $ find-by-class(vp, "col-0")
    val col-1-pads = seq{as-VirtualPad, _} $ find-by-class(vp, "col-1")

    val col-0-outline = bounds(col-0-pads, layer-spec = SolderMask(side))
    val col-1-outline = bounds(col-1-pads, layer-spec = SolderMask(side))

    val interstitial = Box(
      Point(right(col-0-outline), down(col-0-outline)),
      Point(left(col-1-outline), up(col-1-outline))
    )

    val iW = x(dims(interstitial)) - ((2.0 * mask-clearance) + line-width)
    val iP = x(dims(pkg-outline))

    ; Compute the shrinkage that will be applid to
    ;   both sides (if any)
    val diff = (iW - iP) / 2.0
    if diff < 0.0 :
      ; We need to shrink the package outline
      fatten(Point(diff, 0.0), pkg-outline)
    else:
      pkg-outline

  LineRectangle(h-shrink, line-width = line-width)

doc: \<DOC>
Build the silkscreen outline for a dual-row SMD package

This function will generate a silkscreen outline
of the package body in the interstitial space between
the two columns of pads. This silkscreen likely will
not be exactly the package body width for aesthetic reasons.

If the package you are construction has a thermal lead -
this may not be the best choice of outline to use.

@param pkg Component Package to model
@param vp Virtual landpattern container.
@param line-width Thickness of the silkscreen lines that
will be used to construct the outline. The default wil be
extracted from the design rules.
@param mask-clearance Minimum silkmask to soldermask
clearance requirement to use when constructing the outline.
The default wil be extracted from the design rules.
@param side Which side of the board to draw this outline.
The default is `Top`. Note that if the pads of the component
are not on `side` - this function will likely fail.
<DOC>
public defn build-pkg-body-outline (
  pkg:Dual-Package,
  vp:VirtualLP,
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top,
  ):
  val pkg-body = package-body(pkg)
  val outline-geom = compute-outline(
    vp, pkg-body, density-level(pkg),
    line-width = line-width,
    mask-clearance = mask-clearance,
    side = side,
  )
  add-artwork(vp, Silkscreen("outline", side), outline-geom, class = "outline")

doc: \<DOC>
Create a Pin-1 indicator for dual-row land patterns

This creates a small circle in the silkscreen directly
above the pin 1 pad.

This function assumes that the landpattern grid is
2 Column x N/2 rows (standard grid for Dual row components)

This function accounts for the minimum mask to silk
clearance distance.

@param vp Virtual Landpattern Container to draw artwork to.
@param pkg-body The phyical component body of the device.
@param pin-1-id Identifier for Pin 1 on the device. Default
is pin `1`. User can override this identifier.
@param line-width Silkscreen line width. We will use this to
define the radius of the circle marker. The default is the
min silkscreen trace width from the design rules.
@param mask-clearance Mask to silk clearance requirement. The
default is the minimum mask to silk clearance from the design
rules.
@param side Which side of the board to draw on the marker on.
The default value is `Top`.
<DOC>
public defn build-smd-pin-1 (
  pkg:Dual-Package,
  vp:VirtualLP,
  --
  pin-1-id:Int|Ref = 1,
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):
  ; Draw a circle dot inside the rectangle above pin 1
  val pin-1-pad = get-pad-by-ref!(vp, pin-1-id)

  val pad-loc = pose(pin-1-pad)
  val pad-center = center(pad-loc)

  val smasks = get-layer(pin-1-pad, SolderMask(side))
  if length(smasks) == 0:
    ; This is a very strange error - it means
    ;  that pad 1 of this component doesn't have a soldermask
    ;  opening.
    ; This could happen if the user passed an erroneous `side` argument
    throw $ ValueError("Pin-1 - No Soldermask Opening for Pad on Side: %_" % [side])
  val smask = smasks[0]

  ; Apply the transform so that I can get the
  ;   true "height" of the pad regardless of rotation.
  val smask* = pad-loc * smask
  val height = y $ dims(smask*)

  val offset = Point(0.0, (height / 2.0) + mask-clearance + line-width)
  val marker-pos = pad-center + offset

  ; TODO - Check that the marker will be visible and not blocked by the package
  ;   body.
  ;
  ; TODO - Check that the marker will not overlap with any existing silkscreen
  ;   that will prevent it from being easily visible.

  add-artwork(vp, Silkscreen("pin-1-marker", side), Circle(marker-pos, line-width), name = "pin-1-dot", class = "pin1-marker")


doc: \<DOC>
Dual-Row Grid Planner

This grid planner supports Dual Row components like SOIC,
SON, SOT, etc.

The idea is that this constructs a 2-Column grid where:
1.  Column 0 is in `-X` half plane and orders ascending for +Y to -Y
2.  Column 1 is in the `+X` half-plane and is rotated 180 degrees such
that the locations are ordered ascending from -Y to +Y.

This creates the typical numbering scheme for ICs:

```
Left-Row    Col 0   Col 1   Right-Row
   0          1       8         3
   1          2       7         2
   2          3       6         1
   3          4       5         0

```

Notice that the row indices are flipped on the left and right side.
<DOC>
public defstruct DualGridPlanner <: GridPlanner :
  doc: \<DOC>
  Lead Profile Parameters
  This object defines aspects of the lead profile such
  as the row center-to-center span and the pitch between
  pads in a column.

  In this implementation, the pitch is assumed constant in
  both columns.
  <DOC>
  lead-params:Lead-Profile-Params

  doc: \<DOC>
  Number of Rows in each Column of the grid.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true
  doc: \<DOC>
  Number of Columns in the Grid
  By default the dual row is pegged to 2 columns.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
    default => DEF_DUAL_GRID_COLS

with:
  constructor => #DualGridPlanner
  printer => true

val DEF_DUAL_GRID_COLS = 2

doc: \<DOC>
Constructor for the DualGridPlanner

This grid planner has a fixed 2 column grid.

@param lead-params Sets the lead span information including pitch and
pad center to center distance
@param rows Number of rows in the grid.
<DOC>
public defn DualGridPlanner (
  --
  lead-params:Lead-Profile-Params
  rows:Int,
  ) -> DualGridPlanner :
  #DualGridPlanner(lead-params, rows, DEF_DUAL_GRID_COLS)

defmethod pitch (g:DualGridPlanner) -> Double|Dims :
  pitch $ lead-params(g)

defmethod grid (g:DualGridPlanner) -> Seq<GridPosition> :
  if columns(g) != DEF_DUAL_GRID_COLS:
    throw $ ValueError("Unexpected 'columns=%_' - Expected '%_'" % [columns(g), DEF_DUAL_GRID_COLS])

  val [_, row-C-to-C, row-pitch] = to-tuple $ lead-params(g)

  for c in 0 to columns(g) seq-cat:
    val rot = to-double(180 * c)
    val offset = loc(0.0, 0.0, rot) * loc((- row-C-to-C) / 2.0, 0.0)

    val row-set = grid-locs(rows(g), 1, 1.0, row-pitch)
    val raw-grid-locs = for row-loc in row-set seq:
      offset * row-loc

    for (raw-grid-loc in raw-grid-locs, r in 0 to false) seq:
      GridPosition(r, c, raw-grid-loc)
