#use-added-syntax(jitx)
defpackage jsl/landpatterns/two-pin/radial:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/design/settings
  import jsl/design/Classable

  import jsl/geometry/basics
  import jsl/geometry/box
  import jsl/geometry/LineRectangle

  import jsl/landpatterns/framework
  import jsl/landpatterns/two-pin/utils

; TODO - Consider adding an angle here that
;   rotates the two pins around the Z axis.
;   This will help support components where the
;   two pads are not located directly on the Y axis.
public defstruct Radial-2pin <: Package :
  doc: \<DOC>
  Center-to-Center Distance between Leads
  <DOC>
  lead-spacing:Toleranced
  doc: \<DOC>
  Lead Construction Type
  <DOC>
  lead:TH-Lead
  doc: \<DOC>
  Component is Polarized and Requires C/A Pad Names
  <DOC>
  polarized?:True|False
  doc: \<DOC>
  Package Body
  Typically a cylinder but other shapes work as well.
  <DOC>
  package-body:PackageBody with: (as-method => true)
  doc: \<DOC>
  Pad Planner
  <DOC>
  pad-planner:PadPlanner with: (as-method => true)
  doc: \<DOC>
  Lead numbering scheme
  <DOC>
  lead-numbering:Numbering with: (as-method => true)
  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with: (as-method => true)
with:
  constructor => #Radial-2pin

doc: \<DOC>
Constructor for Radial 2-pin Components

@param lead-spacing Center to Center distance between radial leads.
@param lead Through-hole lead specifications.
@param polarized? Indicates whether this component requires C/A style
pads or standard `p[1]/p[2]` style pads. By default we use standard pads.
@param package-body Component body specifications.
@param pad-planner Pad planner - default is a through-hole pad planner
with holes sized for the provided lead dimensions. User can override
this with a pad planner of their choosing.
@param lead-numbering Lead Numbering scheme - by default this function
will choose either standard or C/A numbering based on `polarized?`. User
can override with their own selection here.
<DOC>
public defn Radial-2pin (
  --
  lead-spacing:Toleranced,
  lead:TH-Lead,
  polarized?:True|False = false,
  package-body:PackageBody,
  pad-planner:PadPlanner = PthPadPlanner(),
  lead-numbering:Numbering = select-numbering(polarized?),
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> Radial-2pin:
  #Radial-2pin(lead-spacing, lead, polarized?, package-body, pad-planner, lead-numbering, density-level)

public defmethod name (pkg:Radial-2pin) -> String:
  defn to-deci (v:Double) -> String:
    val v* = to-int( v * 100.0 )
    to-string("%_" % [v*])

  val body = package-body(pkg)

  to-string $ "Radial-L%_-D%_-P%_" % [
    to-deci $ typ $ length(body),
    to-deci $ typ $ width(body),
    to-deci $ typ $ length $ lead $ pkg
    ]

public defmethod courtyard-excess (pkg:Radial-2pin) -> Double :
  ; From IPC 7351B - Estimated based on SMT
  ;  components. User may want to override and configure these values.
  switch(density-level(pkg)):
    DensityLevelA: 0.5
    DensityLevelB: 0.25
    DensityLevelC: 0.1

public defmethod build-pads (
  pkg:Radial-2pin,
  vp:VirtualLP
  ) :

  val lead-spacing = typ $ lead-spacing(pkg)

  val planner = pad-planner(pkg)
  val num-scheme = lead-numbering(pkg)

  if polarized?(pkg):
    add(class(vp), "polarized")

  defn gen-pad-info () -> Seq<VirtualPad> :
    ; Column Major
    val num-cols = 1
    val num-rows = 2
    val grid = grid-locs(num-rows, num-cols, 0.0, lead-spacing, false)
    for (r in 0 to num-rows, pos in grid) seq? :
      val pad-id = to-pad-id(num-scheme, r, 0)
      val th-pad-gen? = th-pad-generator(planner, r, 0)
      match(th-pad-gen?):
        (_:False): None()
        (th-pad-gen:((Dims, Dims) -> Pad)):
          val cls = [
            "pad",
          ]
          val pad-def = make-pad-def(lead(pkg), th-pad-gen, density-level(pkg))
          One $ VirtualPad(pad-id, pad-def, pos, class = cls)

  append-all(vp, gen-pad-info())

public defn build-radial-cylinder-outline (
  pkg:Radial-2pin,
  vp:VirtualLP,
  body:CylinderBody
  line-width:Double = default-silk-width(),
  ) -> Shape:
  val body-env = envelope(body, density-level = density-level(pkg)) as Circle
  val R = radius(body-env)
  val outline-shape = Polyline(line-width, [Arc(Point(0.0, 0.0), R, 0.0, 360.0)])
  pose(body) * outline-shape

public defn build-radial-rectilinear-outline (
  pkg:Radial-2pin,
  vp:VirtualLP
  body:PackageBody,
  line-width:Double = default-silk-width(),
  ):
  val body-env = envelope(body, density-level = density-level(pkg)) as Rectangle
  val outline-shape = LineRectangle(body-env, line-width = line-width)
  pose(body) * outline-shape

public defn build-radial-outline (
  pkg:Radial-2pin,
  vp:VirtualLP
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):

  val body = package-body(pkg)
  val outline = match(body):
    (x:CylinderBody):
      build-radial-cylinder-outline(pkg, vp, x, line-width)
    (x:PackageBody):
      build-radial-rectilinear-outline(pkg, vp, x, line-width)
    (x):
      throw $ ValueError("Unhandled Package Body Type: %_" % [body])

  ; TODO - check for clearance violations in the silk to soldermask
  ;   and break up the polyline into multiple parts.
  add-artwork(vp, Silkscreen("outline", side), outline, class = "outline")

val MIN-PLUS-SIZE = 0.75

defn plus-size-ratio (density-level:DensityLevel) -> Percentage:
  switch(density-level):
    DensityLevelA: (25 %)
    DensityLevelB: (20 %)
    DensityLevelC: (15 %)

public defn build-polarity-cylinder-marker (
  pkg:Radial-2pin,
  vp:VirtualLP
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ) -> Shape:

  val body = package-body(pkg)
  val box = bounds $ envelope(body, density-level = density-level(pkg))
  val d = dims(box)
  val R = to-radius $ y(d)

  val markers = Vector<Shape>()

  val ratio = plus-size-ratio $ density-level(pkg)
  val plus-len = max(MIN-PLUS-SIZE, x(d) * ratio)
  val plus-y = R + (line-width / 2.0) + mask-clearance + (line-width / 2.0) + (plus-len / 2.0)
  val pos-marker = PlusSymbol(line-length = plus-len, line-width = line-width, pose = loc(0.0, plus-y))
  add(markers, pos-marker)

  val neg-width = 2.5 * line-width
  val neg-R = R + (line-width / 2.0) + (neg-width / 2.0)
  val neg-marker = Polyline(1.0 * neg-width, [Arc(Point(0.0, 0.0), neg-R, 240.0, 60.0)])
  add(markers, neg-marker)

  ; This creates the fill on the negative terminal that is
  ;  typical of electrolytic (polarized) radial capacitors
  ;  Unfortunately - the `Difference` shape isn't supported
  ;  yet in the front-end rendering.
  ; val [pad-1, pad-2] = get-two-pin-pads(vp)
  ; val neg-fill = PolygonWithArcs([Point(R, 0.0), Point((- R), 0.0), Arc(Point(0.0, 0.0), R, 180.0, 180.0)])
  ; val neg-smask = get-layer(pad-2, SolderMask(side))
  ; val neg-smask* = expand(pose(pad-2) * neg-smask[0], mask-clearance)
  ; val neg-fill* = Difference(neg-fill, neg-smask*)
  ; add(markers, neg-fill*)

  Union $ to-tuple(markers)

public defn build-polarity-rectilinear-marker (
  pkg:Radial-2pin,
  vp:VirtualLP
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ) -> Shape:

  val body = package-body(pkg)
  val box = bounds $ envelope(body, density-level = density-level(pkg))
  val d = dims(box)
  val R = to-radius $ y(d)

  val markers = Vector<Shape>()

  val ratio = plus-size-ratio $ density-level(pkg)
  val plus-len = max(MIN-PLUS-SIZE, x(d) * ratio)
  val plus-y = R + (line-width / 2.0) + mask-clearance + (line-width / 2.0) + (plus-len / 2.0)
  val pos-marker = PlusSymbol(line-length = plus-len, line-width = line-width, pose = loc(0.0, plus-y))
  add(markers, pos-marker)

  val MIN-MARKER-HEIGHT = 0.5
  val marker-height = max(MIN-MARKER-HEIGHT, x(d) * ratio)
  val tri-shape = create-corner-marker-shape(line-width, marker-height)

  val tri-marker-pts = [Point(left(box), up(box)), Point(right(box), up(box))]
  for tri-marker-pt in tri-marker-pts do:
    val corner = compute-corner(tri-marker-pt)
    val rot = corner-to-rotation(corner)
    val marker-pose = loc(tri-marker-pt, rot)
    val tri-marker = marker-pose * tri-shape
    add(markers, tri-marker)

  Union $ to-tuple(markers)

public defn build-polarity-marker (
  pkg:Radial-2pin,
  vp:VirtualLP
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):

  val body = package-body(pkg)
  val shape = match(body):
    (x:CylinderBody):
      build-polarity-cylinder-marker(pkg, vp, line-width, mask-clearance, side)
    (x:PackageBody):
      build-polarity-rectilinear-marker(pkg, vp, line-width, mask-clearance, side)
    (x): throw $ ValueError("Unhandle Package Body Type: %_" % [x])

  add-artwork(vp, Silkscreen("polarity", side), shape, class = "polarity-marker" )

public defmethod build-silkscreen (
  pkg:Radial-2pin,
  vp:VirtualLP
  ) :
  build-radial-outline(pkg, vp)
  if polarized?(pkg):
    build-polarity-marker(pkg, vp)
  add-reference-designator(vp)
