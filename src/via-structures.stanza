#use-added-syntax(jitx)
defpackage jsl/via-structures:
  import core
  import math
  import collections
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/bundles
  import jsl/symbols/arrows

var debug-mode = false
val debug-layer = CustomLayer("vs-debug", Top)

doc: \<DOC>
Enable or Disable debug mode for Via Structures
@param x true = enable, false = disable
<DOC>
public defn set-via-structure-debug-mode (x:True|False) -> False :
  debug-mode = x

doc: \<DOC>
Query the state of debug mode for via structures.
<DOC>
public defn is-via-structure-debug-mode? () -> True|False :
  debug-mode


doc: \<DOC>
Via Ground Cage Interface

The Via Ground Cage is the return signal path for the signal
going through the central via. This type provides the method for
defining different configurations of this ground cage.
<DOC>
public deftype ViaGroundCage
public defmulti via-def (v:ViaGroundCage) -> Via
doc: \<DOC>
Generator for the Ground Cage

This function must be called from within a `pcb-module` context.

This function will generate the necessary vias that surround the central
vias of the via structure.

@param v This object
@param n A `net` object for which a `geom` statement will be constructed.
@param pose Offset in the module's coordinate frame at which to place the vias.
Typically this is `loc(0.0, 0.0)` indicating no offset.
<DOC>
public defmulti make-ground-cage (v:ViaGroundCage, n:JITXObject -- pose:Pose) -> False


doc: \<DOC>
Polar Via Ground Cage

This an implementation of the `ViaGroundCage` that places
vias in polar space at a particular radius around the signal
vias at the center of the via structure.

TODO - Diagram Here

Vias start at index 0 which is placed at (radius, 0.0). Vias 1 to `N-1` are
then place in a counter-clock wise pattern at `radius` from the origin in increments
of `2 * PI / count` radians.

The `theta` parameter can provide an initial angle offset in degrees. A positive value
advances the angle such that Via 0 starts at (radius, theta * PI / 180.0)

The `skips` argument provides a means of depopulating particular via indices depending
on what structure the user wants to build. This collection will contain 0 or more
zero-based indices for via locations.

<DOC>
public defstruct PolarViaGroundCage <: ViaGroundCage :
  doc: \<DOC>
  Via Definition to use for all of the via placements.
  <DOC>
  via-def:Via with:
    as-method => true
  doc: \<DOC>
  Total number of via placements. Must be positive.
  <DOC>
  count:Int with:
    ensure => ensure-positive!
  doc: \<DOC>
  Radius in mm for the circular pattern of via placements. Must be positive.
  <DOC>
  radius:Double with:
    ensure => ensure-positive!
  doc: \<DOC>
  Starting angle for the pattern. Value in degrees.
  <DOC>
  theta:Double with:
    default => 0.0
  doc: \<DOC>
  Skipped indices in the via pattern. Each value in this collection
  must be in the range `[0, count-1]`
  <DOC>
  skips:Collection<Int> with:
    default => []
with:
  constructor => #PolarViaGroundCage
  printer => true

doc: \<DOC>
Polar Via Ground Cage Constructor

@param via-def Via to use for all via placements
@param count Number of via placements
@param radius Radius in mm of the via placement arc.
@param theta-deg Initial angle in degrees. Default value is 0.0
@param skips Collection of via placement indicies to skip. Default value is `[]`
which implies no placements are skipped.
<DOC>
public defn PolarViaGroundCage (
  --
  via-def:Via,
  count:Int,
  radius:Double,
  theta-deg:Double = 0.0,
  skips:Collection<Int> = []
  ) -> PolarViaGroundCage :
  ensure-positive!("count", count)
  ensure-positive!("radius", radius)

  for (skip in skips, i in 0 to false) do:
    if not (skip < count):
      throw $ InvalidSkipIndexError("Skip[%_]: %_ < %_" % [i, skip, count])

  #PolarViaGroundCage(via-def, count, radius, theta-deg, skips)

defn compute-pos (v:PolarViaGroundCage, N:Int) -> Pose :
  val phase = (2.0 * PI * to-double(N) / to-double(count(v))) + to-radians(theta(v))
  val r = radius(v)
  loc(r * cos(phase), r * sin(phase))

defmethod make-ground-cage (v:PolarViaGroundCage, n:JITXObject -- pose:Pose) -> False:

  val valid-pos = for i in 0 to count(v) filter:
    not contains?(skips(v), i)

  inside pcb-module:
    geom(n):
      for i in valid-pos do:
        val pos = pose * compute-pos(v, i)
        via(via-def(v)) at pos * Point(0.0, 0.0)

    if debug-mode:
      for i in 0 to count(v) do:
        val pos = pose * compute-pos(v, i)
        layer(debug-layer) = pos * Circle(0.1)


doc: \<DOC>
AntiPad Definition Interface

An anti-pad is a `ForbidCopper` region in the via structure to
prevent the ground plane or other nets from interfering with the
signal characteristics of the via structure.
<DOC>
public deftype AntiPad
doc: \<DOC>
Generator for an AntiPad Definition

This function will construct the `layer()` statements for the
forbid copper (keepout) regions of the via structure.
@param a this AntiPad
@param pose Offset in the module's coordinate frame. This value
is typically `loc(0.0, 0.0)`.
<DOC>
public defmulti make-anti-pad (a:AntiPad -- pose:Pose) -> False


doc: \<DOC>
Simple Anti-Pad Definition

This type implements the `AntiPad` interface and provides a
simple shape based antipad on one or more layers.

The `start` and `end` layers are inclusive - so the specified shape
will be applied on all layers `start` through `end`. The `start` and
`end` layers follow the same behavior as `ForbidCopper`.
<DOC>
public defstruct SimpleAntiPad <: AntiPad :
  doc: \<DOC>
  Shape of the constructed anti-pad region. This shape is applied
  to all of the layer `start` through `end`
  <DOC>
  shape:Shape
  start:LayerIndex
  end:LayerIndex
with:
  constructor => #SimpleAntiPad
  printer => true

doc: \<DOC>
Simple AntiPad Constructor

@param shape Forbid Region Shape for all applicable layers
@param start Starting layer for the antipad
@param end Optional end layer for the antipad. If not provide, the
default behavior is that the antipad will only be created on the start layer.
<DOC>
public defn SimpleAntiPad (
  --
  shape:Shape,
  start:LayerIndex,
  end:LayerIndex = start
  ) -> SimpleAntiPad:
  #SimpleAntiPad(shape, start, end)

defmethod make-anti-pad (a:SimpleAntiPad -- pose:Pose) -> False:
  inside pcb-module:
    layer(ForbidCopper(start(a), end(a))) = pose * shape(a)

doc: \<DOC>
Via Signal Identifier Enum

This type distinguishes between single-ended and differential
via structures.
<DOC>
public defenum ViaSignalType:
  Via-Single-Ended
  Via-Differential

doc: \<DOC>
Via Structure Definition Interface

This type defines the common interfaces for defining
a Via Structure Generator.
<DOC>
public deftype ViaStructureDef
public defmulti name (v:ViaStructureDef) -> String
public defmulti signal-type (v:ViaStructureDef) -> ViaSignalType

public defmulti ground-cages (v:ViaStructureDef) -> Vector<ViaGroundCage>
public defmulti anti-pads (v:ViaStructureDef) -> Vector<AntiPad>
public defmulti insertion-points (v:ViaStructureDef) -> Vector<Pose>

public defmulti add-ground-cage (v:ViaStructureDef, cage:ViaGroundCage) -> False
public defmulti add-anti-pad (v:ViaStructureDef, a:AntiPad) -> False
public defmulti add-insertion-point (v:ViaStructureDef, a:Pose) -> False

public defmulti make-insertion-points (v:ViaStructureDef -- pose:Pose) -> False
public defmulti make-anti-pads (v:ViaStructureDef -- pose:Pose) -> False

doc: \<DOC>
Create the shape placed at each insertion point.

This shape will generally be placed in the custom fab layers
as an indicator of where control points and insertion points
are expected to be place.

This function creates a shape that consists of an arrow pointing
in the positive Y direction starting from the origin at 0,0.
It also constructs an arc around the origin at `radius`.

TODO - Diagram
<DOC>
public defn create-insertion-point-shape (radius:Double = 0.2) -> Shape:
  val ap = ArrowSymbolParams()
  val arrow = construct-arrow(ap)
  Union([
    Polyline(0.05, [Arc(Point(0.0, 0.0), radius, 115.0, 310.0)])
    loc(0.0, shaft-length(ap), -90.0) * arrow
  ])

val INSERT-LAYER = Silkscreen("insert-pts", Top)
; Custom Layers aren't showing right now in the layer stack.
; val INSERT-LAYER = CustomLayer("insert-pts", Top)

doc: \<DOC>
Default Implementation of the Insertion Point Generator Functions

This function is expected to be called from a `pcb-module` context.

This function creates `layer` statements for each of the insertion points

@param v This Via Structure
@param pose Offset from the module's coordinate frame origin. Typically,
this will be `loc(0.0, 0.0)`
<DOC>
defmethod make-insertion-points (v:ViaStructureDef -- pose:Pose) -> False:
  val shape = create-insertion-point-shape()
  inside pcb-module:
    for pt in insertion-points(v) do:
      layer(INSERT-LAYER) = pose * pt * shape

doc: \<DOC>
Default Implementation of the anti-pad generator functions

This function is expected to be called from a `pcb-module` context.

This function creates `layer` statements for each of the `AntiPad`
instances.

@param v This Via Structure
@param pose Offset from the module's coordinate frame origin. Typically,
this will be `loc(0.0, 0.0)`
<DOC>
defmethod make-anti-pads (v:ViaStructureDef -- pose:Pose) -> False:
  inside pcb-module:
    for ap in anti-pads(v) do:
      make-anti-pad(ap, pose = pose)

public defmulti make-via-structure (v:ViaStructureDef -- pose:Pose = ?) -> False
public defmulti create-via-structure (v:ViaStructureDef -- pose:Pose = ?) -> Instantiable

defmethod create-via-structure (v:ViaStructureDef -- pose:Pose = DEF_VS_LOC) -> Instantiable:
  pcb-module generated-via-structure:
    name = name(v)
    make-via-structure(v, pose = pose)

  generated-via-structure


doc: \<DOC>
Helper Method for all ViaStructureDef implementations
<DOC>
defmethod add-ground-cage (v:ViaStructureDef, cage:ViaGroundCage) -> False:
  add(ground-cages(v), cage)

doc: \<DOC>
Helper Method for all ViaStructureDef implementations
<DOC>
defmethod add-anti-pad (v:ViaStructureDef, a:AntiPad) -> False:
  add(anti-pads(v), a)

doc: \<DOC>
Helper Method for all ViaStructureDef implementations
<DOC>
defmethod add-insertion-point (v:ViaStructureDef, p:Pose) -> False:
  add(insertion-points(v), p)

doc: \<DOC>
Add two insertion points, at (0.0, +R) pointed UP and (0.0, -R) pointed DOWN
<DOC>
public defn add-std-insertion-points (v:ViaStructureDef, radius:Double) -> False:
  add(insertion-points(v), loc(0.0, radius))
  add(insertion-points(v), loc(0.0, 0.0, 180.0) * loc(0.0, radius))

doc: \<DOC>
Single-Ended Via Structure Definition

This type is used to create a single-ended via structure
generator.
<DOC>
public defstruct SingleViaStructure <: ViaStructureDef :
  name:String with:
    as-method => true
  via-def:Via
  ground-cages:Vector<ViaGroundCage> with:
    default => Vector<ViaGroundCage>()
    as-method => true
  anti-pads:Vector<AntiPad> with:
    default => Vector<AntiPad>()
    as-method => true
  insertion-points:Vector<Pose> with:
    default => Vector<Pose>()
    as-method => true
  signal-type:ViaSignalType with:
    as-method => true
    default => Via-Single-Ended
with:
  constructor => #SingleViaStructure
  printer => true

doc: \<DOC>
Constructor for Single-Ended Via Structure Definitions

@param name Unique name for this via structure
@param via-def Via definition used for the signal via
@param ground-cages Optional explicit collection of ground cages. Default is `[]`.
User can use the {@link add-ground-cage} function to add ground cages after creation.
@param anti-pads Optional explicit collection of anti-pads. Default is `[]`.
User can use the {@link add-anti-pad} function to add anti-pads after creation.
@param insertion-points Optional explicit collection of insertion-points. Default is `[]`.
User can use the {@link add-insertion-point} function to add insertion points after creation.
<DOC>
public defn SingleViaStructure (
    --
    name:String,
    via-def:Via,
    ground-cages:Collection<ViaGroundCage> = [],
    anti-pads:Collection<AntiPad> = [],
    insertion-points:Collection<Pose> = []
  ) -> SingleViaStructure:

  #SingleViaStructure(
    name,
    via-def,
    to-vector<ViaGroundCage>(ground-cages),
    to-vector<AntiPad>(anti-pads),
    to-vector<Pose>(insertion-points)
  )

val DEF_VS_LOC = loc(0.0, 0.0)

doc: \<DOC>
Generator to construct statements for a Single-Ended Via Structure

This function will construct the ports, nets, topology segments, etc
for a functional via structure.

1.  Creates two ports, `sig-in` and `sig-out` for the explicit signal via connections.
2.  Createa a `COMMON` pin for the ground connection of the cage vias.
3.  Constructs a `pass-through` support for working with Pin Assignment.
4.  Constructs the ground cage vias via the {@link make-ground-cage} method.
5.  Constructs the signal via with a `geom` statement.
6.  Constructs the anti-pad and insertion point artwork.

@param v This Via Structure
@param pose Optional offset from the module's coordinate frame. The default value
is `loc(0.0, 0.0)`
<DOC>
defmethod make-via-structure (v:SingleViaStructure -- pose:Pose = DEF_VS_LOC) -> False:
  inside pcb-module:
    port sig-in : pin
    port sig-out : pin

    port COMMON : pin

    net cage (COMMON)

    net via-net (sig-in, sig-out)
    topology-segment(sig-in, sig-out)

    supports pass-through:
      pass-through.A => sig-in
      pass-through.B => sig-out

    for cv in ground-cages(v) do:
      make-ground-cage(cv, cage, pose = pose)

    geom(via-net):
      via(via-def(v)) at pose * Point(0.0, 0.0)

    make-anti-pads(v, pose = pose)
    make-insertion-points(v, pose = pose)


doc: \<DOC>
Differential Via Structure Definition Type

This type is used to encoded the necessary information and then produce
a via structure definition in the form of a `pcb-module`.

This definition utilizes the `diff-pair` bundle as the interface
for the signals and then constructs the appropriate via definitions
with that interface in mind. This will allow the constructed
via structure module to work with {@link /jsl/si/pairs/topo-pairs} as well
as other SI helper functions.

TODO - Diagram Here

The differential via structure is constructed by default such that the
P/N signal vias are centered across the Y axis at `X = pitch/2` and `X = -pitch/2`.
It is expected that the insertion points would likely be placed in the +Y or -Y
locations centered across the X axis.

<DOC>
defstruct DifferentialViaStructure <: ViaStructureDef :
  name:String with:
    as-method => true
  via-def:Via|[Via, Via]
  pitch:Double with:
    ensure => ensure-positive!
  ground-cages:Vector<ViaGroundCage> with:
    default => Vector<ViaGroundCage>()
    as-method => true
  anti-pads:Vector<AntiPad> with:
    default => Vector<AntiPad>()
    as-method => true
  insertion-points:Vector<Pose> with:
    default => Vector<Pose>()
    as-method => true
  signal-type:ViaSignalType with:
    as-method => true
    default => Via-Differential

with:
  constructor => #DifferentialViaStructure
  printer => true

doc: \<DOC>
Constructor for the Differential Pair Via Structure

@param name Unique name for this via structure module definition
@param via-def Defines what vias will be used for the P/N signals.
If this parameter is a single `Via` definition, then that definition
will be used for both the `P` and the `N` signals. If a `[Via, Via]`
argument is provided, then the first `Via` is for the `P` signal and
the second `Via` is for the `N` signal.
@param pitch Distance between the P / N signal vias.
@param ground-cages Optional explicit collection of ground cages. Default is `[]`.
User can use the {@link add-ground-cage} function to add ground cages after creation.
@param anti-pads Optional explicit collection of anti-pads. Default is `[]`.
User can use the {@link add-anti-pad} function to add anti-pads after creation.
@param insertion-points Optional explicit collection of insertion-points. Default is `[]`.
User can use the {@link add-insertion-point} function to add insertion points after creation.
<DOC>
public defn DifferentialViaStructure (
  --
  name:String,
  via-def:Via|[Via, Via],
  pitch:Double,
  ground-cages:Collection<ViaGroundCage> = [],
  anti-pads:Collection<AntiPad> = [],
  insertion-points:Collection<Pose> = []
  ) -> DifferentialViaStructure:

  #DifferentialViaStructure(
    name,
    via-def,
    pitch,
    to-vector<ViaGroundCage>(ground-cages),
    to-vector<AntiPad>(anti-pads),
    to-vector<Pose>(insertion-points)
  )

doc: \<DOC>
Generator for constructing the differential pair via structure.

This function expects to be called from within a `pcb-module` context.

This function will create the ports, nets, topology segments, etc that make
this a usable structure in a design.

This function will create:

1.  The `sig-in` and `sig-out` explicit `diff-pair` ports for input and output signals
2.  A `COMMON` pin for the ground reference of the cage vias.
3.  Net and Topology Segments for the `sig-in` and `sig-out` ports
4.  A `dual-pair` supports statement so that these modules can work with other SI helpers
like {@link /jsl/si/pairs/topo-pair}
5.  Ground Cage Vias
6.  The signal vias for the P/N signals
7.  AntiPad and Insertion Point artwork.
<DOC>
defmethod make-via-structure (v:DifferentialViaStructure -- pose:Pose = DEF_VS_LOC) -> False:
  inside pcb-module:
    port sig-in : diff-pair
    port sig-out : diff-pair

    port COMMON : pin

    net via-net-P (sig-in.P, sig-out.P)
    topology-segment(sig-in.P, sig-out.P)
    net via-net-N (sig-in.N, sig-out.N)
    topology-segment(sig-in.N, sig-out.N)

    net cage (COMMON)

    supports dual-pair:
      dual-pair.A.P => sig-in.P
      dual-pair.A.N => sig-in.N
      dual-pair.B.P => sig-out.P
      dual-pair.B.N => sig-out.N

    for cv in ground-cages(v) do:
      make-ground-cage(cv, cage, pose = pose)

    val vp = pitch(v) / 2.0

    val [vd-P, vd-N] = match(via-def(v)):
      (obj1:Via): [obj1, obj1]
      (obj2:[Via, Via]): obj2

    geom(via-net-P):
      via(vd-P) at pose * Point(vp, 0.0)

    geom(via-net-N):
      via(vd-N) at pose * Point((- vp), 0.0)

    make-anti-pads(v, pose = pose)
    make-insertion-points(v, pose = pose)


doc: \<DOC>
Exception for Invalid LayerIndex Configurations
<DOC>
public defstruct InvalidLayerIndicesError <: Exception:
  msg:String|Printable

defmethod print (o:OutputStream, e:InvalidLayerIndicesError):
  print(o, "Invalid Layer Indexes: %_" % [to-string $ msg(e)])

doc: \<DOC>
Exception for Invalid `skips` array in ViaGroundCage
<DOC>
public defstruct InvalidSkipIndexError <: Exception :
  msg:String|Printable

defmethod print (o:OutputStream, e:InvalidSkipIndexError):
  print(o, "Invalid Skip Index: %_" % [to-string $ msg(e)])
