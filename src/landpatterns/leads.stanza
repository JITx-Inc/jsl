#use-added-syntax(jitx)
defpackage jsl/landpatterns/leads:
  import core
  import jitx

  import jsl/design/settings
  import jsl/landpatterns/IPC


;TODO:
;  - BGA (table 3-17)
;  - PSON/PQFN/DFN (table 3-18)
;  - OSCCC (table 3-19)
;  - CGA/LGA (table 3-21)

doc: \<DOC>
Land Protrusion Types for SMT components

This enum is for describing the different types of
SMT contacts that are possible. We use this to generate the
different pad shapes required for SMT components
<DOC>
public pcb-enum jsl/landpatterns/leads/LandProtrusionType:
  SmallFlatRibbonLLeads,  ; Flat ribbon L leads for pitch less than 0.0625mm
  SmallGullWingLeads,     ; Gull wing leads with pitch less than 0.0625mm
  BigFlatRibbonLLeads,    ; Flat ribbon L leads for pitch greater than 0.0625mm
  BigGullWingLeads,       ; GullWing leads for pitch greater than 0.0625mm
  JLeads,                 ; J Leads
  SmallRectangularLeads,  ; Leads for rectangular components (chip capacitors, resistors, inductors) smaller than 0601
  BigRectangularLeads,    ; Leads for rectangular components (chip capacitors, resistors, inductors) 0601 or larger
  CylindricalLeads,       ; Cylindrical end cap leads
  LeadlessConcaveCastellated, ; Lead less chip carrier leads
  LeadlessChipCarrierLeads, ; Lead less chip carrier leads
  ConcaveChipArrayLeads,    ; Concave chip array leads
  ConvexChipArrayLeads,     ; Convex chip array leads
  FlatChipArrayLeads,       ; Flat chip array leads
  ButtJointLeads,           ; Butt joint leads
  InwardFlatRibbonLLeads,   ; Inward flat ribbons L leads
  FlatLugLeads,             ; flat lug leads
  QuadFlatNoLeads,          ; quad flat components without leads
  SmallOutlineNoLeads,      ; small outline packages without leads
  SmallOutlineFlatLeads,    ; small outline flat leads
  ShortTwoPinCrystalLeads,  ; two pin crystal components shorter than 10mm
  ShortAluminumElectrolyticLeads, ; electrolytic capacitor shorter than 10mm
  TallTwoPinCrystalLeads,         ; two pin crystal components 10mm or taller
  TallAluminumElectrolyticLeads,  ; electrolytic capacitor 10mm or taller



doc: \<DOC>
Pin or Electrical contact of a component package

The leads of a device are the electrical contact of the
internal semiconductor to the outside world.

These come in a variety of styles:
-  For through hole components, the leads are typically cylindrical
   pieces of metal extending from the ends (axial) or the bottom (radial)
-  For surface mount components, the leads are typically embedded into
   the body of the package.
<DOC>
public defstruct Lead <: Hashable & Equalable :
  doc: \<DOC>
  Dimension of the lead that is normal to the edge of the package body

  Examples:
  -  For through-hole components, the lead length is the overall length
    of the cylindrical copper.
  -  For SOP/SOIC/QFP, the lead length is typically the length of
    mate-able surface between the lead contact and the PCB. It typically
    does not include any bends in the lead to reach the mating surface.
  -  For SMT chip resistors (0603, etc), the length is the termination
    (typically labeled `b` in drawings)
    TODO - need a figure here.
  <DOC>
  length:Toleranced
  doc: \<DOC>
  Dimension of the lead that is parallel to the edge of the package body.

  Examples:
  -  For through-hole components, the lead width is typically the
    diameter of the cylindrical lead.
  -  For SOP/SOIC/QFP, the lead width is measured parallel to the body
    and must be strictly smaller than the pitch of the pins.
  -  For SMT chip resistors, the lead width is typically the entire width
    of the package body.
  <DOC>
  width:Toleranced
with:
  equalable => true
  hashable => true
  printer => true

doc: \<DOC>
Surface Mount Component Lead

This type is for describing leads from SMT packages
such as SOIC, SOP, QFN, etc.
<DOC>
public defstruct SMT-Lead <: Lead :
  doc: \<DOC>
  The lead type defines the physical nature of the lead.
  <DOC>
  lead-type:jsl/landpatterns/leads/LandProtrusionType
  doc: \<DOC>
  Length of the surface contact for the electrical lead of an SMT package.

  This is the length of the lead that will be mateable to the pad. This
  length does not include any bends in the lead to reach the mating surface
  from the body of the package.

  This is typically identified with the letter `L` in mechanical drawings
  of a component datasheet.

  TODO - add figure here.
  <DOC>
  length:Toleranced with: (as-method => true)
  doc: \<DOC>
  Width of the electrical lead of an SMT package.

  This is typically identified with the letter `b` in mechanical drawings
  of a component datasheet.

  TODO - add figure here.
  <DOC>
  width:Toleranced with: (as-method => true)
with:
  equalable => true
  hashable => true
  printer => true

doc: \<DOC>
Compute the IPC-compliant Pad Constraints for this SMT Lead
This result provides the necessary dimensions for computing
the pad size and position in a landpattern.

@param x self
@param lead-span
@param density-level
<DOC>
public defmulti pad-constraints (
  x:SMT-Lead,
  lead-span:Toleranced
  --
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> IpcResults

doc: \<DOC>
Default Implementation for `pad-constraints`
<DOC>
public defmethod pad-constraints (
  x:SMT-Lead
  lead-span:Toleranced
  --
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> IpcResults :
  val fillets = lead-fillets(lead-type(x), density-level)
  ipc-formula(lead-span, length(x), width(x), fillets)


doc: \<DOC>
Through-hole Component Lead

This type is for describing the leads from a Through-hole
package such as a Radial Capacitor, or an Axial Resistor.
<DOC>
public defstruct TH-Lead <: Lead :
  doc: \<DOC>
  The length of the lead describes the total length of the
  metal contact. This is not describing the pad placement
  in anyway.
  <DOC>
  length:Toleranced with: (as-method => true)
  doc: \<DOC>
  The width of the lead is typically describing the diameter
  of a cylindrical lead.
  <DOC>
  width:Toleranced with: (as-method => true)
with:
  equalable => true
  hashable => true
  printer => true


; LeadFillets are extra spacing along the sides of a lead when generating a land for
; a component's leads.
public pcb-struct jsl/landpatterns/leads/LeadFillets:
  toe:Double  ; space away from the component towards the board
  heel:Double ; space towards the component
  side:Double ; space on the edges of the lead
  courtyard-excess:Double ; additional area to add to the courtyard

public defn to-tuple (l:LeadFillets) -> [Double, Double, Double, Double]:
  [toe(l), heel(l), side(l), courtyard-excess(l)]

public defmethod print (o:OutputStream, l:LeadFillets):
  print(o, "LeadFillets(toe:%_, heel:%_, side:%_, courtyard-excess:%_)" % to-tuple(l))


; Compute the LeadFillets of a lead type, given a design producability level.
public defn lead-fillets (lead-type:LandProtrusionType, p:DensityLevel = DensityLevelA) -> LeadFillets:
  match(lead-type):
    (_:SmallFlatRibbonLLeads): flat-ribbon-L(p, 0.0)
    (_:SmallGullWingLeads): gull-wing-leads(p, 0.0)
    (_:BigFlatRibbonLLeads): flat-ribbon-L(p, 1.0)
    (_:BigGullWingLeads): gull-wing-leads(p, 1.0)
    (_:JLeads): j-leads(p)
    (_:BigRectangularLeads): big-rectangular(p)
    (_:SmallRectangularLeads): small-rectangular(p)
    (_:LeadlessConcaveCastellated): leadless-concave-castellated(p)
    (_:CylindricalLeads): cylindrical(p)
    (_:LeadlessChipCarrierLeads): leadless-chip-carrier(p)
    (_:ConcaveChipArrayLeads): concave-chip-array(p)
    (_:ConvexChipArrayLeads): convex-chip-array(p)
    (_:FlatChipArrayLeads): flat-chip-array(p)
    (_:ButtJointLeads): butt-joints(p)
    (_:InwardFlatRibbonLLeads): inward-flat-ribbon-l-leads(p)
    (_:FlatLugLeads): flat-lug-leads(p)
    (_:QuadFlatNoLeads): quad-flat-no-lead(p)
    (_:SmallOutlineNoLeads): small-outline-no-lead(p)
    (_:SmallOutlineFlatLeads): small-outline-flat-lead(p)
    (_:ShortTwoPinCrystalLeads): two-pin-crystal(p, 0.0)
    (_:ShortAluminumElectrolyticLeads): aluminum-electrolytic(p, 0.0)
    (_:TallTwoPinCrystalLeads): two-pin-crystal(p, 11.0)
    (_:TallAluminumElectrolyticLeads): two-pin-crystal(p, 11.0)

;==============================================================================
;============================ LeadFillet tables ===============================
;==============================================================================
protected defn flat-ribbon-L (p:DensityLevel, pitch:Double):
  if pitch > 0.0625:
    switch(p):
      DensityLevelA: LeadFillets(0.55, 0.45, 0.05, 0.5)
      DensityLevelB: LeadFillets(0.35, 0.35, 0.03, 0.25)
      DensityLevelC: LeadFillets(0.15, 0.25, 0.01, 0.1)
  else:
    switch(p):
      DensityLevelA: LeadFillets(0.55, 0.45, 0.01  0.5)
      DensityLevelB: LeadFillets(0.35, 0.35, -0.02 0.25)
      DensityLevelC: LeadFillets(0.15, 0.25, -0.04 0.1)

protected defn gull-wing-leads (p:DensityLevel, pitch:Double):
  flat-ribbon-L(p, pitch)

protected defn j-leads (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, 0.10, 0.05 , 0.5)
    DensityLevelB: LeadFillets(0.35, 0.00, 0.03 , 0.25)
    DensityLevelC: LeadFillets(0.15, -0.10, 0.01, 0.1)

; rectangular or square-end components with lead widths larger than 0.8
; Jt is calculated based on component height for density level B
protected defn big-rectangular (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, 0.00, 0.05 , 0.5)
    DensityLevelB: LeadFillets(0.35, 0.00, 0.00 , 0.25)
    DensityLevelC: LeadFillets(0.15, 0.00, 0.00, 0.1)

; rectangular or square-end components with lead widths smaller than 0.8
; Jt is calculated based on component height for all density levels
protected defn small-rectangular (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.30, 0.00, 0.00 , 0.2)
    DensityLevelB: LeadFillets(0.20, 0.00, 0.00 , 0.15)
    DensityLevelC: LeadFillets(0.10, 0.00, 0.00, 0.1)

; Jh is calculated based on component height for density level B
protected defn leadless-concave-castellated (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.25, 0.65, 0.05 , 0.5)
    DensityLevelB: LeadFillets(0.15, 0.45, 0.00 , 0.25)
    DensityLevelC: LeadFillets(0.05, 0.45, 0.00, 0.1)

protected defn cylindrical (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.60, 0.20, 0.10, 0.5)
    DensityLevelB: LeadFillets(0.40, 0.10, 0.05, 0.25)
    DensityLevelC: LeadFillets(0.20, 0.02, 0.01, 0.1)

protected defn leadless-chip-carrier (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.65, 0.25, 0.05, 0.5)
    DensityLevelB: LeadFillets(0.55, 0.15, -0.05, 0.25)
    DensityLevelC: LeadFillets(0.45, 0.05, -0.15, 0.1)

protected defn concave-chip-array (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, -0.05, -0.05, 0.5)
    DensityLevelB: LeadFillets(0.45, -0.07, -0.07, 0.25)
    DensityLevelC: LeadFillets(0.35, -0.20, -0.10, 0.1)

protected defn convex-chip-array (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, -0.05, -0.05, 0.5)
    DensityLevelB: LeadFillets(0.45, -0.07, -0.07, 0.25)
    DensityLevelC: LeadFillets(0.35, -0.20, -0.10, 0.1)

protected defn flat-chip-array (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, -0.05, -0.05, 0.5)
    DensityLevelB: LeadFillets(0.45, -0.07, -0.07, 0.25)
    DensityLevelC: LeadFillets(0.35, -0.20, -0.10, 0.1)

protected defn butt-joints (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(1.0, 1.0, 0.3, 1.5)
    DensityLevelB: LeadFillets(0.8, 0.8, 0.2, 0.8)
    DensityLevelC: LeadFillets(0.6, 0.6, 0.1, 0.2)

protected defn inward-flat-ribbon-l-leads (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.25, 0.8, 0.01, 0.5)
    DensityLevelB: LeadFillets(0.15, 0.5, -0.05, 0.25)
    DensityLevelC: LeadFillets(0.07, 0.2, -0.10, 0.1)

protected defn flat-lug-leads (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.55, 0.45, 0.05, 0.5)
    DensityLevelB: LeadFillets(0.35, 0.35, 0.03, 0.25)
    DensityLevelC: LeadFillets(0.15, 0.25, 0.01, 0.1)

protected defn quad-flat-no-lead (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.4, 0.00, -0.04, 0.5)
    DensityLevelB: LeadFillets(0.3, 0.00, -0.04, 0.25)
    DensityLevelC: LeadFillets(0.2, 0.00, -0.04, 0.1)

protected defn small-outline-no-lead (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.4, 0.00, -0.04, 0.5)
    DensityLevelB: LeadFillets(0.3, 0.00, -0.04, 0.25)
    DensityLevelC: LeadFillets(0.2, 0.00, -0.04, 0.1)

protected defn small-outline-flat-lead (p:DensityLevel):
  switch(p):
    DensityLevelA: LeadFillets(0.3, 0.00,  0.05, 0.2)
    DensityLevelB: LeadFillets(0.2, 0.00,  0.00, 0.15)
    DensityLevelC: LeadFillets(0.1, 0.00, -0.05, 0.1)

protected defn two-pin-crystal (p:DensityLevel, height:Double):
  if height < 10.0:
    switch(p):
      DensityLevelA: LeadFillets(0.7,  0.00, 0.5, 1.0)
      DensityLevelB: LeadFillets(0.5, -0.10, 0.4, 0.5)
      DensityLevelC: LeadFillets(0.3, -0.20, 0.3, 0.25)
  else:
    switch(p):
      DensityLevelA: LeadFillets(1.0,  0.00, 0.6, 1.0)
      DensityLevelB: LeadFillets(0.7, -0.05, 0.5, 0.5)
      DensityLevelC: LeadFillets(0.4, -0.10, 0.4, 0.25)

protected defn aluminum-electrolytic (p:DensityLevel, height:Double):
  two-pin-crystal(p, height)

public defn bga-courtyard-excess (density-level:DensityLevel):
  switch(density-level):
    DensityLevelA: 2.0
    DensityLevelB: 1.0
    DensityLevelC: 0.5
