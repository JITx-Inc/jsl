#use-added-syntax(jitx)
defpackage jsl/landpatterns/grid-planner:
  import core
  import math
  import jitx
  import jitx/commands

  import jsl/ensure
  import jsl/errors

public defstruct GridPosition :
  row:Int with:
    ensure => ensure-non-negative!
  column:Int with:
    ensure => ensure-non-negative!
  pose:Pose
with:
  printer => true

doc: \<DOC>
Pad Grid Pose Planner

This type defines the interface for the grid creation of a land pattern.
The most obvious package with a grid is a Ball Grid Array (BGA) which is
typically 2D orthonormal. But there is a wide diversity of different land
pattern grids even within BGAs.

In JSL, the land pattern framework assumes that all land patterns have a
grid. Some of those grids may be quite trivial - ie a single row or column
with N pins. Others can be quite complex with Uneven sides, unpopulated grid
locations, among other idiosyncrasies.

The Grid Planner type allows us to define typical grid patterns in a common
reusable way so that we don't have to copy and paste the same implementations
over and over.

<DOC>
public defstruct GridPlanner:
  doc: \<DOC>
  Compute the Pitch (inter-pad distance) for the grid.

  The interpretation of the `pitch` is up to the `GridPlanner` implementation.
  For example a `Equilateral Triangle` grid generator may interpret the
  pitch as being non-orthonormal and instead be the equidistant distance between
  pads.

  By default this is a field but could be implemented as a defmethod
  if needed.

  @return The value return can be either:
  1.  A `Double` where the X and Y pitches are the same creating a regular grid
  2.  A `Dims` where the X and Y pitches are different creating an irregular grid.

  The values of this grid are expected to be positive values only.
  <DOC>
  pitch:Double|Dims
  doc: \<DOC>
  Number of Columns in the Grid

  This value is expected to be a positive integer
  The columns traverse the X dimension.
  <DOC>
  columns:Int
  doc: \<DOC>
  Number of Rows in the Grid

  This value is expected to be a positive integer
  The rows traverse the Y dimension.

  This value should be used when there is no uneven-ness
  in the grid.
  <DOC>
  rows:Int

  doc: \<DOC>
  Optional Pose Rotation for the Grid

  This can be useful when we want to orientate the
  grid differently from how we construct it.
  <DOC>
  pose:Pose with:
    default => loc(0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

doc: \<DOC>
Construct GridPlanner with Anchor
<DOC>
public defn GridPlanner (
  --
  pitch:Double|Dims
  columns:Int
  rows:Int
  anchor:Anchor
  ) -> GridPlanner:

  val r = to-double(rows - 1)
  val c = to-double(columns - 1)
  val [w, h] = match(pitch):
    (sp:Double): [c * sp, r * sp]
    (dp:Dims): [c * x(dp), r * y(dp)]

  val [vt, hr] = components(anchor)
  val dx = match(hr) :
    (hr:W) : w / 2.0
    (hr:C) : 0.0
    (hr:E) : w / -2.0
  val dy = match(vt) :
    (vt:S) : h / 2.0
    (vt:C) : 0.0
    (vt:N) : h / -2.0

  GridPlanner(
    pitch = pitch,
    columns = columns,
    rows = rows,
    pose = loc(dx, dy)
    )

doc: \<DOC>
Number of Rows in the Grid

This value is expected to be a positive integer
The rows traverse the Y dimension.
@param c In some grids, the number of rows is variable. This
means that from column to column the row count might change.
The optional `c` argument identifies the column which may or
may not be used.
<DOC>
public defmulti rows (g:GridPlanner, c:Int) -> Int

public defmethod rows (g:GridPlanner, c:Int) -> Int :
  rows(g)

doc: \<DOC>
Grid Generator

This method constructs a sequence of `Pose` locations for the desired grid.

This method must be implemented by the derived grid type to generate
this sequence.

@param g This Grid Planner
@return The generated grid consists of `GridPosition` objects which provide
the row index, column index, and a `Pose` object for identifying the location
of that grid position.

<DOC>
public defmulti grid (g:GridPlanner) -> Seq<GridPosition>

doc: \<DOC>
Default Grid Generator

This default implementation creates either a regular or irregular grid
leveraging the `grid-locs` function.
<DOC>
public defmethod grid (g:GridPlanner) -> Seq<GridPosition> :
  val rs:Int = rows(g)
  val cs:Int = columns(g)
  val raw-grid = to-seq $ match(pitch(g)):
    (p:Double):
      grid-locs(rs, cs, p, p)
    (pa:Dims):
      grid-locs(rs, cs, x(pa), y(pa))

  for r in 0 to rs seq-cat:
    for c in 0 to cs seq:
      val raw-pos = next(raw-grid)
      GridPosition(r, c, pose(g) * raw-pos)

doc: \<DOC>
Stagger Phase Definition

This type is used to construct Staggered Grid implementations.
The phase indicates whether the first row pad 0 is empty or populated.

In the following examples, the `X` indicates a location where the
pad is not populated. An `O` indicates a location where the pad
is populated.

## Pattern #1 - `Odd-Phase` :

  ```
    X | O | X  ...
    O | X | O  ...
    ...
  ```

## Pattern #2 - `Even-Phase` :

  ```
    O | X | O  ...
    X | O | X  ...
    ...
  ```
@member Even-Phase
@member Odd-Phase
<DOC>
public defenum StaggerPhase :
  Even-Phase
  Odd-Phase

doc: \<DOC>
Stagger Pattern for Marking Active Pads

This function is a re-usable pattern generator for the
staggered phase grid approach.

@param phase This indicates the ordering of when a location is populated or not.
@param row Row index (zero-based)
@param column Column index (zero-based)
<DOC>
public defn stagger-pattern (phase:StaggerPhase, row:Int, column:Int) -> True|False :
  val row-offset = 1 when phase == Even-Phase else 0
  ((row + row-offset) % 2) == (column % 2)


doc: \<DOC>
Construct the asymmetric pitch for an equilateral triangle grid.

This function assumes that you will use the {@link stagger-pattern} for
constructing the active pads.

This constructs a pad pattern in the form of a grid where every 3 pads
creates a equilateral triangle.

@param p Side length of the equilateral triangle.
@return A two dimensional pitch where the row pitch is the height
of an equilateral triangle and the col span is `p / 2.0`. Every
skipped pad in a `stagger-pattern` creates a full length side of
the equilateral triangle.
<DOC>
public defn equilateral-triangle-pitch (p:Double) -> Dims :
  val row-span = sqrt(3.0) * 0.5 * p
  val col-span = 0.5 * p
  Dims(col-span, row-span)
