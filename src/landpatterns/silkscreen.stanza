#use-added-syntax(jitx)
defpackage jsl/landpatterns/silkscreen:
  import core
  import math
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/errors
  import jsl/geometry/box
  import jsl/geometry/LineRectangle
  import jsl/landpatterns/framework

public defn default-silk-width () -> Double :
  clearance(current-rules(), MinSilkscreenWidth)

public defn default-mask-clearance () -> Double :
  clearance(current-rules(), MinSilkSolderMaskSpace)

doc: \<DOC>
Compute the closest corner of the passed Box to the Pin1 position.

This tool is used to determine what to place pin 1
markers in a component's silkscreen.

@param pin-1-pos Position of the Pin 1 pad.
@param outline-box Box that represents the silkscreen
outline of the component.
<DOC>
public defn compute-closest-corner (
  pin-1-pos:Point,
  outline-box:Box
  ):
  val corners = corners(outline-box)

  defn compute-dist (x:Point) -> Double:
    l2-norm(x - pin-1-pos)

  minimum(compute-dist, corners)

doc: \<DOC>
Compute the Corner Anchor Position.

Given a point on the outline box that is closest
to pin 1 - compute the anchor position. For example,
if pin 1 is in the top left and the closest corner is
in the top-left, this would be the `NW` anchor position.
@param closest Closest point on the outline
<DOC>
public defn compute-corner (closest:Point) -> Anchor :
  val angle = atan2(y(closest), x(closest))
  if angle > (PI / 2.0): NW
  else if angle < (- PI / 2.0): SW
  else if angle < 0.0: SE
  else: NE

doc: \<DOC>
Compute the rotation of the shape pattern for a particular anchor

We typically position the triangle marker or pin 1 dot
marker by transforming its base configuration. This means
translating and rotating it to fit in one of the outline
corners.

This method takes the corner anchor position and converts
it to rotation angle for a shape pattern.
<DOC>
public defn corner-to-rotation (corner:Anchor) -> Double :
  switch(corner):
    NW: 0.0
    SW: 90.0
    SE: 180.0
    NE: -90.0

doc: \<DOC>
Create a shape for the triangle corner marker

This is often used in a rectangular outlines for marking the
the pin-1 indication in one of the corners of the outline.

This function creates a shape that is a solid, isosceles right triangle (polygon)
in the lower right quadrant of the XY plane. It is then offset
from the X and Y axis (toward the lower right quandrant) by
half the line-width
<DOC>
public defn create-corner-marker-shape (line-width:Double, marker-height:Double) -> Shape :
  val st-offset = line-width / 2.0
  loc(st-offset, (- st-offset)) * Polygon([
    Point(0.0, 0.0),
    Point(marker-height, 0.0),
    Point(0.0, (- marker-height))
    ])


doc: \<DOC>
Compute the Triangle Marker Shape for Pin-1 outline

@param pin-1-pos Position of the pin 1 pad
@param outline-box Silkscreen outline as a 2D box.
@param line-width Silkscreen line width - primarily
used for positioning and not for drawing lines.
@param max-height Max triangle marker height. This
function attempts to compute a reasonable marker size
based on the component's scale. This is a limiter to
prevent unnecessarily large triangle marker features.
<DOC>
public defn compute-triangle-marker (
  pin-1-pos:Point,
  outline-box:Box,
  line-width:Double,
  max-height:Double = 1.25
  ) -> Shape:

  val closest = compute-closest-corner(pin-1-pos, outline-box)

  ; Compute the Marker Shape & Size
  val marker-size = if contains?(outline-box, pin-1-pos):
    ; Pad is inside the outline - so we need to
    ;  take care that the triangle marker doesn't
    ;  overlap the internal pad
    val diff = closest - pin-1-pos
    abs $ y(diff)
  else:
    val marker-ratio = (15 %)
    val opt1 = y(dims(outline-box)) * marker-ratio
    min(opt1, x(dims(outline-box)))
  val marker-height = min(marker-size, max-height)

  val marker-shape = create-corner-marker-shape(line-width, marker-height)

  ; Compute the angle of the marker depending on
  ;  what corner of the outline the marker is in.
  val corner = compute-corner(closest)
  val rot = corner-to-rotation(corner)

  ; Place the marker in the closest corner.
  val marker-pose = loc(closest, rot)
  marker-pose * marker-shape

doc: \<DOC>
Create a triangle shaped marker in the outline on the silkscreen

This function looks for the outline shape in the virtual artwork
of this VirtualLP node and then attempts to find the corner
of that outline closest to the `pin-1-id` pad of the land pattern.

It then construct a triangle shaped marker and places it in that
corner for a heavy indication of the pin 1 location. This corner
marker will be placed in the silkscreen layer on the same side
of the board as the outline is found.

@param vp Land Pattern scene graph node we will search for the outline
@param pin-1-id This argument accepts either an `Int` or a `Ref` for
identifying the "Pin 1" of the component. If this is an `Int` it will
map to the conventional `p[N]` ref syntax used for land patterns. The
default value is `1`.
@throws ValueError If we find more than one `outline` in the silkscreen,
or if we fail to find the `pin-1-id` pad.

<DOC>
public defn build-outline-pin-1-triangle (
  vp:VirtualLP
  --
  pin-1-id:Int|Ref = 1
  ):

  val outline = get-silkscreen-outline!(vp)
  val o-side = side $ (layer-spec(outline) as Silkscreen)
  val o-sh = shape(outline)

  val pin-1-pad = get-pad-by-ref!(vp, pin-1-id)
  ; Find the corner of the outline nearest to pad 1

  ; The Outline is typically a line rectangle which creates a
  ;  single line. We use this to determine the line width
  ;  so that we can place the marker in the mid-line
  val line-width = match(o-sh):
    (x:Line): width(x)
    (_): default-silk-width()

  val o-box = bounds $ o-sh

  val pin-1-pos = center $ pose(pin-1-pad)

  val marker = compute-triangle-marker(pin-1-pos, o-box, line-width)

  add-artwork(
    vp, Silkscreen("pin-1-marker", o-side),
    marker,
    name = "pin-1-triangle",
    class = "pin-1-marker"
    )

doc: \<DOC>
Construct a silkscreen outline of a component based on the Package Body

@param vp Virtual LP scene graph node - outline will be created here.
@param pkg-body 3D body model for the component
@param density-level Indicates whether we will use MMC, NMC, or LMC
@param line-width width of the line to draw.
@param mask-clearance clearance between soldermask openings and the outline.
<DOC>
public defn create-silkscreen-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  ) -> False :

  val pkg-outline = bounds $ envelope(pkg-body, density-level = density-level)
  val pkg-outline* = fatten(line-width / 2.0, pkg-outline)
  val outline-geom = LineRectangle(pkg-outline*, line-width = line-width)

  ; TODO - I want to use `Difference` here will all of the soldermask openings
  ;  defined by the pads.

  add-artwork(vp, Silkscreen("outline", Top), outline-geom, class = "outline")


