doc: \<DOC>
@title Quad Package Generator
@brief Generate landpatterns for packages with pins on 4-sides

@desc
This package contains a general purpose generator for creating
square/rectangular packages that have pins along the 4 external
edges of the package shape.

The generators defined here are parameterized to support multiple
different types of packages.

TODO - add diagram here of the package
 - Explain west, south, east, north with respect to the diagram.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/quad:
  import core
  import jitx
  import jitx/commands
  ; This seems like a bad import
  import lang-utils

  import jsl/design/settings
  import jsl/landpatterns/IPC
  import jsl/landpatterns/leads
  import jsl/landpatterns/pads
  import jsl/landpatterns/helpers


defn shift-locs (x:Double, y:Double, s:Seqable<Pose>) :
  seq({loc(x, y) * _}, s)

defn corner-pad? (num-pads:Int,
                  pad-index:Int,
                  corner-pads:False|[Pad, Pad]) -> False|Pad :
  match(corner-pads:[Pad, Pad]) :
    switch(pad-index) :
      0              : corner-pads[0]
      (num-pads - 1) : corner-pads[1]
      else : false

public defstruct PinEdgeConfig :
  num-pins : Int
  pitch : Double

; helper struct to contain information about how we plan
; to layout the pads on a single side of a quad land pattern
doc: \<DOC>
Quad Package Landpattern Generator
This is a tool for creating components that are typically
square/rectangular and have pins on the external edges of
the package.
TODO - add diagram here of the package
 - Explain west, south, east, north with respect to the diagram.

@param pins-W West Edge Pin configuration
@param pins-S South Edge Pin configuration
@param pins-E East Edge Pin configuration
@param pins-N North Edge Pin configuration
@param lead-length Length of the component lead. This length is in direction normal
  to the edge of the component. So for the West edge, this length is pointing
  in the negative X direction. For the North edge, this length is pointing in
  the positive Y direction.
@param lead-width Width of the component lead. This width is orthogonal to the
  `lead-length` and parallel to the edge of the component. This width must be
  less than the pitch of the pins.
@param lead-span-x The maximum edge-to-edge distance for the pads on the west side to
  the pads on the east side (X direction)
@param lead-span-y The maximum edge-to-edge distance for the pads on the north side to
  the pads on the south side (Y direction)
@param lead-type Type of Land Protrusion that the component package is using.
; TODO again - this is not consistent with the 2-pin definition - is length x and width y or vice versa.
;   Whatever the case - package-* and lead-span-[x/y] need to match
;   so that they are consistent.
@param package-length Component's package body length (X direction)
@param package-width Component's package body width (Y direction)
@param density-level
@param corner-pads?
@param thermal-pad?
<DOC>
public defn make-quad-landpattern (
  pins-W : PinEdgeConfig,
  pins-S : PinEdgeConfig,
  pins-E : PinEdgeConfig,
  pins-N : PinEdgeConfig,
  ; Lead Parameters
  lead-length: Toleranced,
  lead-width: Toleranced,
  ; TODO - we refer to NSEW - but then we use X/Y here - why not remain consistent.
  lead-span-x: Toleranced,
  lead-span-y: Toleranced,
  lead-type: LandProtrusionType,
  ; Pkg Parameters
  package-length: Toleranced,
  package-width: Toleranced = package-length,
  --
  density-level: DensityLevel = DENSITY-LEVEL,     ; the density level of the design
  corner-pads?:False|[Pad, Pad] = false, ; corner pads
  thermal-pad?: Shape|False = false
  ):
  val lead-fillets = lead-fillets(lead-type, density-level)
  inside pcb-landpattern:
    ;----------------------------------------------------------
    ; compute dimensions
    ; @NOTE - This was broken in OCDB because the Y was compared against EW and
    ;   the X against NS instead of the other way around.
    val ipc-ns = ipc-formula(lead-span-y, lead-length, lead-width, lead-fillets)
    val ipc-ew = ipc-formula(lead-span-x, lead-length, lead-width, lead-fillets)
    val pad-sz-ns = pad-size(ipc-ns)
    val pad-sz-ew = pad-size(ipc-ew)

    ;----------------------------------------------------------
    ; compute pad locations

    val x-shift = 0.5 * (Zmax(ipc-ew) - x(pad-sz-ew))
    val y-shift = 0.5 * (Zmax(ipc-ns) - x(pad-sz-ns))

    val pad-1-loc = to-tuple(grid-locs(num-pins(pins-E), 2, 2.0 * x-shift, pitch(pins-E)))[0]
    var pin-count = 0 ; accumulator, holds the number of pins we have laid out

    defn layout-pads (dir:Dir, num-pins:Int, pitch:Double) :
      val locs = switch(dir) :
        Up:
          shift-locs{0.0, y-shift, _ } $
          reverse(to-list(row-locs(num-pins, pitch)))
        Down:
          shift-locs{0.0, (- y-shift), _ } $
          row-locs(num-pins, pitch)
        Left:
          shift-locs{(- x-shift), 0.0, _ } $
          col-locs(num-pins, pitch)
        Right:
          shift-locs{x-shift, 0.0, _ } $
          reverse(to-list(col-locs(num-pins, pitch)))
      val rot = switch(dir) :
        Left  :   0.0
        Right : 180.0
        Down  :  90.0
        Up    : -90.0

      val pad-dims =
        if contains?([Left, Right], dir) :
          pad-sz-ew
        else :
          pad-sz-ns

      val idx = pin-count to (pin-count + num-pins)
      for (i in idx, loc in locs, n in 0 to false) do:
        ; TODO - is `if-false?` from lang-utils fair game ?
        ;   This seems like it is not a valid dependence on JITX
        val pad* = if-false?(smd-pad(pad-dims),
                             corner-pad?(num-pins, n, corner-pads?))
        pad p[i + 1]: pad* at sub-angle(loc, rot)
      pin-count = pin-count + num-pins

    layout-pads(Left,  num-pins(pins-E), pitch(pins-E))
    layout-pads(Down,  num-pins(pins-S), pitch(pins-S))
    layout-pads(Right, num-pins(pins-W), pitch(pins-W))
    layout-pads(Up,    num-pins(pins-N), pitch(pins-N))

    ;----------------------------------------------------------
    ; Compute the courtyard
    val solder-mask-registration = clearance(current-rules(), SolderMaskRegistration)
    val part-sz = Dims(max-value(package-length), max-value(package-width))
    val lp-sz   = enlarge(Dims(Zmax(ipc-ew), Zmax(ipc-ns)), 2.0 * solder-mask-registration)
    val cy-sz   = enlarge(max(part-sz, lp-sz), courtyard-excess(lead-fillets))
    layer(Courtyard(Top)) = Rectangle(cy-sz)

    ;----------------------------------------------------------
    ; Place the polarity marker
    val silk-solder-mask-clearance = clearance(current-rules(), MinSilkSolderMaskSpace)
    val line-width  = clearance(current-rules(), MinSilkscreenWidth)
    val line-length = 3.0 * line-width - line-width
    val dist  = solder-mask-registration + silk-solder-mask-clearance + line-width * 0.5 + 0.01

    val pad-loc = center(pad-1-loc)
    val p1 = Point(
      x(pad-loc) - 0.5 * x(pad-sz-ew),
      y(pad-loc) + 0.5 * y(pad-sz-ew) + dist
    )
    val p2 = Point(
      -0.5 * x(part-sz) - line-width * 0.5,
       0.5 * y(part-sz) - line-width * 0.5,
    )
    val pol = max-distance(p1, p2)
    layer(Silkscreen("pol", Top)) = Line(line-width, [
      pol, pol + Point(line-length, 0.0)
    ])

    ;----------------------------------------------------------
    ; Place the reference label
    val min-silkscreen-text-height = clearance(current-rules(), MinSilkscreenTextHeight)
    val text-y = 0.5 * (y(cy-sz) + min-silkscreen-text-height)
    ref-label(loc(0.0, text-y))

    make-thermal-pad(thermal-pad?, pin-count + 1)

doc: \<DOC>
Quad Package Landpattern Generator

This is a tool for creating components that are typically
square and have pins on the external edges of
the package.

This is a simplified version of the `make-quad-landpattern` tool and
makes the following assumptions:

1.  That the number of pins on each edge of the device package is the same.
2.  That the number of pins is easily divisible by 4.
3.  That the pitch (center-to-center distance between leads) is the same for all edges of the component.
4.  That the package is square
    1.  The body of the package has the same length and width
    2.  The lead span in the X and Y directions are the same.

@param num-pins Total number of pins in the package. This number must be divisible by 4.West Edge Pin configuration
@param lead-length Length of the component lead. This length is in direction normal
  to the edge of the component. So for the West edge, this length is pointing
  in the negative X direction. For the North edge, this length is pointing in
  the positive Y direction.
@param lead-width Width of the component lead. This width is orthogonal to the
  `lead-length` and parallel to the edge of the component. This width must be
  less than the pitch of the pins.
@param lead-span The maximum edge-to-edge distance for the pads on opposite edges of the
  component.
@param lead-type Type of Land Protrusion that the component package is using.
@param package-size Size of the side of the component's body package.
@param density-level
@param corner-pads?
@param thermal-pad?
<DOC>
public defn make-quad-landpattern (
  num-pins: Int,
  pitch:Double,
  ; Lead Parameters
  lead-length: Toleranced, ; the dimension of the leads in the x direction on the east/west faces
  lead-width: Toleranced,  ; the dimension of the leads in the y direction on the east/west faces
  lead-span: Toleranced, ; the distance from pad-edge to pad-edge on the exterior of the part in the x direction
  lead-type: LandProtrusionType, ; the type of the leads
  ; Pkg Parameters
  package-size: Toleranced,  ; the size of the package in the x direction
  --
  density-level: DensityLevel = DENSITY-LEVEL,     ; the density level of the design
  corner-pads?:False|[Pad, Pad] = false, ; corner pads
  thermal-pad?: Shape|False = false
  ):

  ensure-divisible!(num-pins, 4, "make-quad-landpattern(num-pins, ...)")
  val pincfg = PinEdgeConfig(
    num-pins, pitch
  )
  make-quad-landpattern(
    pincfg, pincfg, pincfg, pincfg,
    lead-length, lead-width,
    lead-span, lead-span,
    lead-type,
    package-size, package-size,
    density-level = density-level
    corner-pads? = corner-pads?
    thermal-pad? = thermal-pad?
  )