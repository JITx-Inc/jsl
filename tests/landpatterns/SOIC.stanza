#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/SOIC:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/tests/utils
  import jsl/tests/landpatterns/defchecks

  import jsl/design/settings
  import jsl/landpatterns/SOIC
  import jsl/landpatterns/packages
  import jsl/landpatterns/leads
  import jsl/geometry/box


deftest(SOIC) test-lead:

  val a = SOIC-Lead()
  val b = SOIC-Lead(SmallGullWingLeads())

  #EXPECT( a != b )

  #EXPECT( lead-type(a) == BigGullWingLeads() )
  #EXPECT( in-range?( min-max(0.5, 1.2),  typ $ length(a)) )
  #EXPECT( in-range?( min-max(0.35, 0.5),  typ $ width(a)) )

  #EXPECT( lead-type(b) == SmallGullWingLeads() )

  ; Check Ensures
  val test-vecs = [
    [min-max(-0.1, 0.1), typ(2.0)],
    [min-max(0.0, 0.1), typ(2.0)],
    [typ(2.0), min-max(-0.1, 0.1)],
    [typ(2.0), min-max(0.0, 0.1)],
  ]

  for test-vec in test-vecs do:
    val [l, w] = test-vec
    expect-throw(
      {SOIC-Lead(BigGullWingLeads(), l, w)}
    )


deftest(SOIC) test-body:

  val N-SOIC = make-SOIC-narrow-body(min-max(8.5, 8.7))

  #EXPECT(in-range?(min-max(8.5, 8.7), typ(length(N-SOIC))))
  #EXPECT(in-range?(min-max(3.85, 3.95), typ(width(N-SOIC))))
  #EXPECT(in-range?(min-max(1.4, 1.7), typ(height(N-SOIC))))

  val W-SOIC = make-SOIC-wide-body(min-max(10.2, 10.4))

  #EXPECT(in-range?(min-max(10.25, 10.35), typ(length(W-SOIC))))
  #EXPECT(in-range?(min-max(7.45, 7.55), typ(width(W-SOIC))))
  #EXPECT(in-range?(min-max(2.4, 2.6), typ(height(W-SOIC))))

deftest(SOIC) test-SOIC-N:
  for num-pins in [8, 14, 20] do:
    val N = SOIC-N(
      num-leads = num-pins,
      lead-span = min-max(5.8, 6.2),
      package-length = min-max(8.55, 8.75)
    )
    val expName = to-string("SOIC127P600X155-%_" % [num-pins])
    #EXPECT(name(N) == expName)

    pcb-landpattern N-lp:
      make-pads(N)

    val exp-Pitch-X = tol%(5.2, (1 %))
    val exp-Pitch-Y = tol%(1.27, (1 %))

    val grid = PadGrid(N-lp)

    #EXPECT(length(rows(grid)) == num-pins / 2)
    #EXPECT(check-row-pitch(grid, exp-Pitch-Y))
    #EXPECT(check-column-pitch(grid, exp-Pitch-X))

    for row in values(rows(grid)) do:
      #EXPECT(length(row) == 2)
      for lp-pad in row do:
        val pd = pad(lp-pad)
        val shape = pad-shape(pd)
        #EXPECT(shape is Rectangle)

    val not-empty = to-hashset<LayerSpecifier>([
      SolderMask(Top)
      Paste(Top)
    ])

    expect-empty-others(N-lp, not-empty)


deftest(SOIC) test-SOIC-W:
  for num-pins in [8, 14, 20] do:
    val W = SOIC-W(
      num-leads = num-pins,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(8.788, 9.195)
    )

    val expName = to-string("SOIC127P1032X250-%_" % [num-pins])
    #EXPECT(name(W) == expName)

    pcb-landpattern W-lp:
      make-pads(W)

    val exp-Pitch-X = tol%(9.6, (1 %))
    val exp-Pitch-Y = tol%(1.27, (1 %))

    val grid = PadGrid(W-lp)

    #EXPECT(length(rows(grid)) == num-pins / 2)
    #EXPECT(check-row-pitch(grid, exp-Pitch-Y))
    #EXPECT(check-column-pitch(grid, exp-Pitch-X))

    for row in values(rows(grid)) do:
      #EXPECT(length(row) == 2)
      for lp-pad in row do:
        val pd = pad(lp-pad)
        val shape = pad-shape(pd)
        #EXPECT(shape is Rectangle)

    val not-empty = to-hashset<LayerSpecifier>([
      SolderMask(Top)
      Paste(Top)
    ])

    expect-empty-others(W-lp, not-empty)


deftest(SOIC) test-fine-pitch:
    val num-pins = 32
    val W-fp = SOIC-W(
      num-leads = num-pins,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(10.9, 11.1)
      pitch = 0.65
      density-level = DensityLevelC
    )

    val expName = to-string("SOIC65P1032X250-%_" % [num-pins])
    #EXPECT(name(W-fp) == expName)

    val W-lp = create-landpattern(W-fp)

    val exp-Pitch-X = tol%(9.6, (1 %))
    val exp-Pitch-Y = tol%(0.65, (1 %))

    val grid = PadGrid(W-lp)

    #EXPECT(length(rows(grid)) == num-pins / 2)
    #EXPECT(check-row-pitch(grid, exp-Pitch-Y))
    #EXPECT(check-column-pitch(grid, exp-Pitch-X))

    for row in values(rows(grid)) do:
      #EXPECT(length(row) == 2)
      for lp-pad in row do:
        val pd = pad(lp-pad)
        val shape = pad-shape(pd)
        #EXPECT(shape is Rectangle)

    ; Check for courtyard
    val cy = layer(W-lp, Courtyard(Top))
    #EXPECT(length(cy) == 2)

    ; Check for the silkscreen
    val silk = layer(W-lp, Silkscreen("outline", Top))
    #EXPECT(length(silk) == 1)

    val outline = dims $ silk[0]
    val silk-width = clearance(current-rules(), MinSilkscreenWidth)
    #EXPECT(almost-equal?(outline, Dims(7.4 + silk-width, 10.9 + silk-width)))

    val pin-1-silk  = layer(W-lp, Silkscreen("pin-1-marker", Top))

    ; Expect to see the Dot and the Triangle
    #EXPECT(length(pin-1-silk) == 2)
    for sh in pin-1-silk do:
      match(sh):
        (x:Circle):
          #EXPECT(almost-equal?(center(x), Point(-4.801462, 5.5162 )))
        (x:Polygon):
          val pts = points(x)
          val b = Box(Point(-3.8, 4.1), Point(-2.4, 5.5))
          for pt in pts do:
            #EXPECT(contains?(b, pt))

deftest(SOIC) test-thermal-lead:
  val num-pins = 8
  val W = SOIC-W(
      num-leads = num-pins,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(8.788, 9.195),
      thermal-lead? = RoundedRectangle(3.0, 3.0, 0.2)
    )

    val expName = to-string("SOIC127P1032X250-%_" % [num-pins])
    #EXPECT(name(W) == expName)

    val W-lp = create-landpattern(W)

    val grid = PadGrid(W-lp)

    #EXPECT(length(rows(grid)) == (num-pins / 2) + 1)
    #EXPECT(length(columns(grid)) == 2 + 1)

    val thermPad? = find-pad-by-ref(W-lp, 9)
    #EXPECT(thermPad? is-not False)
    val thermPad = thermPad? as LandPatternPad
    #EXPECT(pad-shape(pad(thermPad)) is RoundedRectangle)

deftest(SOIC) test-pad-numbering:
  val num-pins = 8
  val W = SOIC-W(
      num-leads = num-pins,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(8.788, 9.195),
    )
  val W-lp = create-landpattern(W)

  val grid = PadGrid(W-lp)

  val half = num-pins / 2

  #EXPECT(length(rows(grid)) == half)
  #EXPECT(length(columns(grid)) == 2)

  ; NOTE - `get-column` returns pads in ascending
  ;   Y order. This is the opposite of how we think
  ;   of pad ordering so we must reverse the first
  ;   column but the second column is fine.

  val col0 = get-column(grid, 0)
  #EXPECT(length(col0) == half)
  for (p in in-reverse(col0), i in 1 through half) do:
    val expRef = IndexRef(Ref(`p), i)
    #EXPECT(ref(p) == expRef)

  val col1 = get-column(grid, 1)
  #EXPECT(length(col1) == half)
  for (p in col1, i in (half + 1) through num-pins) do:
    val expRef = IndexRef(Ref(`p), i)
    #EXPECT(ref(p) == expRef)

deftest(SOIC) test-error-handling:

  val num-pin-vecs = [
    0,
    -1,
    -10,
    13,
    1,
    3
  ]
  for num-pin-vec in num-pin-vecs do:
    expect-throw({SOIC-N(
      num-leads = num-pin-vec,
      lead-span = min-max(7.01, 7.64),
      package-length = min-max(8.788, 9.195)
      )})
    expect-throw({SOIC-W(
      num-leads = num-pin-vec,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(8.788, 9.195)
      )})

  val neg-vecs = [
    min-max(-0.1, 3.0),
    min-max(-1.0, -0.9),
    min-max(-10.64, -10.01),
  ]

  for neg-vec in neg-vecs do:
    ; lead-span
    expect-throw({SOIC-N(
      num-leads = 8,
      lead-span = neg-vec,
      package-length = min-max(8.788, 9.195)
      )})
    expect-throw({SOIC-W(
      num-leads = 8,
      lead-span = neg-vec,
      package-length = min-max(8.788, 9.195)
      )})
    ; pkg-len
    expect-throw({SOIC-N(
      num-leads = 8,
      lead-span = min-max(8.788, 9.195),
      package-length = neg-vec
      )})
    expect-throw({SOIC-W(
      num-leads = 8,
      lead-span = min-max(8.788, 9.195),
      package-length = neg-vec
      )})

  val pitch-vecs = [
    0.0,
    -0.1,
    -1.3
  ]
  for pitch-vec in pitch-vecs do:
    expect-throw({SOIC-N(
      num-leads = 8,
      lead-span = min-max(8.788, 9.195),
      package-length = min-max(8.788, 9.195),
      pitch = pitch-vec
      )})
    expect-throw({SOIC-W(
      num-leads = 8,
      lead-span = min-max(8.788, 9.195),
      package-length = min-max(8.788, 9.195),
      pitch = pitch-vec
      )})

deftest(SOIC) test-SOIC-with-pose:

  val num-pins = 8
  val W-fp = SOIC-W(
    num-leads = num-pins,
    lead-span = min-max(10.01, 10.64),
    package-length = min-max(8.788, 9.195)
  )

  val W-lp = create-landpattern(W-fp, pose = loc(1.0, 0.0))

  val exp-Pitch-X = tol%(9.6, (1 %))
  val exp-Pitch-Y = tol%(1.27, (1 %))

  val grid = PadGrid(W-lp)

  val rset = rows(grid)
  #EXPECT(length(rset) == num-pins / 2)
  #EXPECT(check-row-pitch(grid, exp-Pitch-Y))
  #EXPECT(check-column-pitch(grid, exp-Pitch-X))

  ; The pose moves the pads to the right by 1mm
  val Xs = column-Xs(grid)
  #EXPECT(almost-equal?(Xs, [-3.801462, 5.801462]))

  val Ys = row-Ys(grid)
  #EXPECT(almost-equal?(Ys, [-1.905, -0.635, 0.635, 1.905]))

deftest(SOIC) test-SOIC-with-rotation:

  val num-pins = 8
  val W-fp = SOIC-W(
    num-leads = num-pins,
    lead-span = min-max(10.01, 10.64),
    package-length = min-max(8.788, 9.195)
  )

  val W-lp = create-landpattern(W-fp, pose = loc(0.0, 0.0, 90.0))

  val exp-Pitch-Y = tol%(9.6, (1 %))
  val exp-Pitch-X = tol%(1.27, (1 %))

  val grid = PadGrid(W-lp)

  val rset = rows(grid)
  #EXPECT(length(rset) == 2)
  #EXPECT(length(columns(grid)) == num-pins / 2)
  #EXPECT(check-row-pitch(grid, exp-Pitch-Y))
  #EXPECT(check-column-pitch(grid, exp-Pitch-X))

  ; The pose moves the pads to the right by 1mm
  val Xs = column-Xs(grid)
  #EXPECT(almost-equal?(Xs, [-1.905, -0.635, 0.635, 1.905]))

  val Ys = row-Ys(grid)
  #EXPECT(almost-equal?(Ys, [-4.801462, 4.801462]))

deftest(SOIC) test-thermal-lead-with-pose:
  val num-pins = 8
  val W = SOIC-W(
      num-leads = num-pins,
      lead-span = min-max(10.01, 10.64),
      package-length = min-max(8.788, 9.195),
      thermal-lead? = RoundedRectangle(3.0, 3.0, 0.2)
    )

    val expName = to-string("SOIC127P1032X250-%_" % [num-pins])
    #EXPECT(name(W) == expName)

    val W-lp = create-landpattern(W, pose = loc(1.0, 0.0))

    val grid = PadGrid(W-lp)

    #EXPECT(length(rows(grid)) == (num-pins / 2) + 1)
    #EXPECT(length(columns(grid)) == 2 + 1)

    val thermPad? = find-pad-by-ref(W-lp, 9)
    #EXPECT(thermPad? is-not False)
    val thermPad = thermPad? as LandPatternPad
    #EXPECT(pad-shape(pad(thermPad)) is RoundedRectangle)

    val pos = center $ pose(thermPad)
    #EXPECT(almost-equal?(pos, Point(1.0, 0.0)))

