#use-added-syntax(jitx)
defpackage jsl/examples/protocols/ethernet-10G-KR/main:
  import core
  import collections
  import jitx
  import jitx/commands


  import jsl/design/settings

  import jsl/protocols/ethernet-10G-KR
  import jsl/si/helpers

  import jsl/examples/protocols/common/example-board
  import jsl/examples/protocols/common/example-components
  import jsl/examples/protocols/ethernet-10G-KR/ethernet-10G-KR-src


pcb-module ethernet-10G-KR-example :
  
  inst dut1 : jsl/examples/protocols/ethernet-10G-KR/ethernet-10G-KR-src/module
  inst dut2 : jsl/examples/protocols/ethernet-10G-KR/ethernet-10G-KR-src/module
  inst conn1 : jsl/examples/protocols/ethernet-10G-KR/ethernet-10G-KR-src/edge-connector
  require src1 : ethernet-10G-KR(2) from dut1
  require src2 : ethernet-10G-KR(2) from dut1
  require dst1 : ethernet-10G-KR(2) from dut2
  require con1 : ethernet-10G-KR(2) from conn1

  val [skew, channel, loss] = ethernet-10G-KR-get-skew-loss-vals()

  connect-10G-KR(skew, loss, block-cap(100.0e-9), false, src2, con1, false)
  connect-10G-KR(skew, loss, block-cap(100.0e-9), block-cap(100.0e-9), src1, dst1, true)

  ; val [skew, loss] = displayport-get-skew-loss-vals(gen)

  ; connect-displayport(skew, loss, src, dst, block-cap(100.0e-9), [pu-res(50.0e3), VDD])
  ; val trace-imped = displayport-get-trace-impedance()
  ; displayport-apply-routing-structure(diff(trace-imped), src, dst)


set-current-design("ethernet-10G-KR-example")
setup-board()
; Set the schematic sheet size
set-paper(ANSI-B)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(ethernet-10G-KR-example)

; View the results
view-design-explorer()
view-schematic()
view-board()
