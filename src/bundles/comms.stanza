#use-added-syntax(jitx)
defpackage jsl/bundles/comms:
  import core
  import jitx
  import jitx/commands

  import jsl/errors

doc: \<DOC>
I2C Bundle
Inter-Integrated Circuit (I2C) is a serial communication
protocol
@see https://en.wikipedia.org/wiki/I%C2%B2C
@member sda Synchronous Data Line
@member scl Synchronous Clock Line
<DOC>
public pcb-bundle i2c:
  description = "Inter-Integrated Circuit (I2C) - Serial Communication Protocol"
  port sda
  port scl


doc: \<DOC>
SMBus Bundle
System Management Bus (SMBus) is a two wire serial communication protocol
@see http://smbus.org/specs/
@member SMBALERT#
@member SMBSUS#
<DOC>
public pcb-enum jsl/bundles/comms/SMBUSPins :
  SMBALERT#
  SMBSUS#

pcb-bundle smbus-b (pins:Collection<SMBUSPins>):
  description = "System Management Bus (SMBus) - Serial Communication Protocol"
  port smbclk
  port smbdat
  for p in pins do :
    switch(p) :
      SMBALERT#  : make-port(`smbalert#)
      SMBSUS#    : make-port(`smbsus#)

doc: \<DOC>
Configurable SMBus Bundle
@param pins Optional pins that can be included in the bundle.
@member smbclk Synchronous Clock Line
@member smbdat Synchronous Data Line
@member smbalert# Optional Alert Interrupt - Active Low
@member smbsus# Optional Suspend Line - Active Low

@snippet

```stanza
  val b = smbus(SMBALERT#)
  supports b:
    b.smbclk => self.CLK
    b.smbdat => self.DAT
    b.smbalert# => self.ALERT_n
```

@snip-note 1 Adding the `SMBALERT#` value to the function definition
generates a `pcb-bundle` including the base pins `smbclk` and `smbdat`
as well as the optional `smbalert#` pin.

<DOC>
public defn smbus (pins:SMBUSPins ...) :
  smbus-b(pins)

doc: \<DOC>
Standard SMBUS Generator

This generator will construct an SMBUS bundle with the following pins:

@member smbclk Synchronous Clock Line
@member smbdat Synchronous Data Line
<DOC>
public defn std-smbus () :
  smbus()

doc: \<DOC>
CAN Physical Layer Bundle

This bundle defines the physical layer for the CAN interface
which consists of a differential pair `H` / `L`

@member H High side of the differential pair for the transmission line
@member L Low side of the differential pair for the transmission line

<DOC>
public pcb-bundle can-phy :
  port H
  port L

doc: \<DOC>
CAN Logical Interface Bundle

This interface from a microcontroller to the
PHY is typically a two wire interface consisting of a
TX and RX line.

TODO - Add optional error line ?
@member rx Receive line
@member tx Transmit line
<DOC>
public pcb-bundle can-logical :
  port rx
  port tx

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SPI - Serial Peripheral Interface
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

doc: \<DOC>
SPI Bundle Pin Names
A list of possible names for the SPI interface. Note that in order to connect
SPI interfaces automatically, the constituent pins need to be present on all
objects to be connected.
@member SPI-CS
@member SPI-COPI
@member SPI-CIPO
<DOC>

public pcb-enum jsl/bundles/comms/SPIPins :
  SPI-CS
  SPI-COPI
  SPI-CIPO

pcb-bundle spi-b (pins:Collection<SPIPins>):
  port sck
  for p in pins do :
    switch(p) :
      SPI-CS  : make-port(`cs)
      SPI-COPI : make-port(`copi)
      SPI-CIPO : make-port(`cipo)

doc: \<DOC>
SPI Bundle Generator

Serial Peripheral Interface is a serial communication protocol.
@see https://en.wikipedia.org/wiki/Serial_Peripheral_Interface

@param pins User needs to specify which pins will be included in
the SPI interface. Some devices don't have a `MISO` pin for example.
@member sck Synchronous Clock Line
@member cs Chip Select
@member cipo Controller In Peripheral Out
@member copi Controller Out Peripheral In
<DOC>
public defn spi (pins:SPIPins ...) :
  spi-b(pins)

doc: \<DOC>
Standard SPI Generator

This generator will construct an SPI bundle with the following
pins:

@member sck Synchronous Clock Line
@member cipo Controller In Peripheral Out
@member copi Controller Out Peripheral In
<DOC>
public defn std-spi () :
  spi(SPI-CIPO, SPI-COPI)

doc: \<DOC>
Standard SPI with Chip Select Generator

This generator will construct an SPI bundle with the following
pins:

@member sck Synchronous Clock Line
@member cs Chip Select
@member cipo Controller In Peripheral Out
@member copi Controller Out Peripheral In
<DOC>
public defn spi-with-cs () :
  spi(SPI-CIPO, SPI-COPI, SPI-CS)

defn to-wide-name (x:Int) -> String:
  switch(x):
    2: "dual-SPI"
    4: "quad-SPI"
    8: "octal-SPI"
    else:
      to-string("SPI-%_" % [x])


doc: \<DOC>
Wide-SPI Bundle

This bundle is used to define bundles for multi-data-line
SPI busses. These are often seen for high bandwidth comms interfaces
or on flash chips.
@param width Number of datalines to include in this bundle. Common
  values are 2, 4, and 8
@param pins Optionally allow for Chip Select pin on this interface.
  Note CIPO and COPI are not supported.
@member sck Synchronous Clock Line
@member cs Chip Select
@member data Variable Width Data Bus depending on `width` parameter
<DOC>
public pcb-bundle wide-spi (width:Int, pins:Collection<SPIPins>):
  name = to-wide-name(width)
  port sck
  port data : pin[width]
  for p in pins do :
    switch(p):
      SPI-CS : make-port(`cs)
      else:
        throw $ ValueError("Wide-SPI does not support pin type: %_" % [p])

doc: \<DOC>
Dual SPI Bundle Generator
@member sck Synchronous Clock Line
@member cs Chip Select
@member data Data Bus of width=2
<DOC>
public defn dual-spi (pins:SPIPins ...):
  wide-spi(2, pins)

doc: \<DOC>
Quad SPI Bundle Generator
@member sck Synchronous Clock Line
@member cs Chip Select
@member data Data Bus of width=4
<DOC>
public defn quad-spi (pins:SPIPins ...):
  wide-spi(4, pins)

doc: \<DOC>
Octal SPI Bundle Generator

@member sck Synchronous Clock Line
@member cs Chip Select
@member data Data Bus of width=8
<DOC>
public defn octal-spi (pins:SPIPins ...):
  wide-spi(8, pins)

doc: \<DOC>
Octal SPI Bundle with Chip Select and Data Strobe

@member sck Synchronous Clock Line
@member cs Chip Select
@member dqs Data Strobe
@member data Data Bus of width=8
<DOC>
public pcb-bundle octal-spi-with-cs-dqs :
  port sck
  port cs
  port dqs
  port data : pin[8]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UART - Universal Asynchronous Receiver/Transmitter
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

doc: \<DOC>
@member UART-DTR
@member UART-CTS
@member UART-DCD
@member UART-RI
@member UART-DSR
@member UART-RTS
@member UART-CK
@member UART-DE
@member UART-RX
@member UART-TX
<DOC>
public pcb-enum jsl/bundles/comms/UARTPins :
  UART-DTR
  UART-CTS
  UART-DCD
  UART-RI
  UART-DSR
  UART-RTS
  UART-CK
  UART-DE
  UART-RX
  UART-TX

pcb-bundle uart-b (pins:Collection<UARTPins>):
  for p in pins do :
    switch(p) :
      UART-DTR : make-port(`dtr)
      UART-CTS : make-port(`cts)
      UART-DCD : make-port(`dcd)
      UART-RI  : make-port(`ri)
      UART-DSR : make-port(`dst)
      UART-RTS : make-port(`rts)
      UART-CK : make-port(`ck)
      UART-DE : make-port(`de)
      UART-RX : make-port(`rx)
      UART-TX : make-port(`tx)

doc: \<DOC>
UART Bundle Generator
Universal Asynchronous Receiver/Transmitter
Constructs a bundle with the passed pin configuration
@see https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter

@member tx Transmit Data Line
@member rx Receive Data Line
@member cts Clear to Send Line
@member rts Ready to Send Line
@member dtr Data Terminal Ready Line
@member dsr Data Set Ready Line
@member dcd Data Carrier Detect Line
@member ri Ring Indicator Line
@member ck Clock Line
@member de Driver Enable Line
<DOC>
public defn uart (pins:UARTPins ...):
  uart-b(pins)

doc: \<DOC>
Minimal UART Bundle Generator

This generator constructs a UART bundle consisting of:

@member tx Transmit Data Line
@member rx Receive Data Line
<DOC>
public defn minimal-uart () :
  uart(UART-RX, UART-TX)

doc: \<DOC>
Uart with RTS/CTS Flow Control

@member tx Transmit Data Line
@member rx Receive Data Line
@member rts Ready to Send
@member cts Clear to Send
<DOC>
public defn uart-fc () :
  uart(UART-RX, UART-TX, UART-RTS, UART-CTS)

doc: \<DOC>
Inter-Integrated Sound - I2S Protocol

The I2S protocol is a synchronous serial communication
protocol similar to SPI

Originally Specification was from Phillips. Current
specification is present in NXP's references

@see https://www.nxp.com/docs/en/user-manual/UM11732.pdf

@member sck Serial Interface Clock
@member ws Word Select - typically for left vs right differentiation
@member sd Data Signal
<DOC>
public pcb-bundle i2s :
  port sck
  port ws
  port sd
