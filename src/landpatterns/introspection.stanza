#use-added-syntax(jitx)
defpackage jsl/landpatterns/introspection:
  import core
  import jitx
  import jitx/commands

  import jsl/errors

doc: \<DOC>
Retrieve a pad from a landpattern by name

@param obj LandPattern object that we will interrogate
@param name Name of the pad like `p[1]` or `A[3]`, etc
@return If we find a pad with that name, we will require a JITXObject
of that pad. We we don't find a pad by that name, we return `None()`
<DOC>
public defn get-pad-by-name (obj:LandPattern, name:String) -> Maybe<JITXObject> :
  for p in pads(obj) first:
    val refName = to-string("%_" % [ref(p)])
    if suffix?(refName, name) :
      One(p)
    else:
      None()

doc: \<DOC>
Retrieve a pad from a landpattern by name

@param obj LandPattern object that we will interrogate
@param name Name of the pad like `p[1]` or `A[3]`, etc
@return A pad object by that name if one is present.
@throws ValueError when no pad is found by the passed name
<DOC>
public defn get-pad-by-name! (obj:LandPattern, name:String) -> JITXObject :
  val v? = get-pad-by-name(obj, name)
  match(v?):
    (_:None):
      throw $ ValueError("No Pad by name '%_' found in LandPattern '%_'" % [name, obj])
    (v:One<JITXObject>): value(v)


doc: \<DOC>
Info about a Particular Pad of a LandPattern

This type is primarily a helper function for working around
limitations in the `pcb-module` and `pcb-component` hierarchy.

This type consolidates much of the meta-data associated with a
particular pad so that it can be transmitted across `pcb-module`
definition boundaries.

It includes data from the following API calls:

 *  `pad-type()`
 *  `pad-shape()`
 *  `pose()`
 *  `side()`
 *  `layers()`

<DOC>
public pcb-struct jsl/landpatterns/introspection/PadInfo :
  type:PadType
  shape:Shape
  pose:Pose
  side:Side
  layer-data:Tuple<LayerShape>

doc: \<DOC>
Helper functions to consolidate all of the introspection data related to a pad.

@param lp-pd `LandPatternPad` object that we will inspect for data. Typically
this accessed using the `pads()` API function or using the {@link get-pads-from-port}
function.
@return PadInfo object that captures all of the info related to this pad.
<DOC>
public defn get-pad-info (lp-pd:JITXObject) -> PadInfo :
  val pd = pad-def(lp-pd)
  PadInfo(
    pad-type(pd)
    pad-shape(pd)
    pose(lp-pd)
    side(lp-pd)
    layers(pd)
  )

