#use-added-syntax(jitx)
defpackage jsl/landpatterns/dual-row:
  import core
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns/helpers
  import jsl/landpatterns/pads
  import jsl/landpatterns/leads
  import jsl/landpatterns/IPC

public defn draw-pol-marker (locs:Tuple<Pose>,
                             part-sz:Dims,
                             pad-sz:Dims,
                             ) :
  inside pcb-landpattern :
    ; TODO - this is used differently - no current-rules call
    val mask-reg        = clearance(SolderMaskRegistration)
    val silk-mask-space = clearance(MinSilkSolderMaskSpace)
    val min-silk        = clearance(MinSilkscreenWidth)

    val pad-loc = center(locs[0])
    val pol-x = min(-0.5 * x(part-sz), x(pad-loc) - 0.5 * x(pad-sz))
    val pol-y = max( 0.5 * y(part-sz), y(pad-loc) + 0.5 * y(pad-sz))
    val line-length = 2.0 * min-silk

    val dist = mask-reg + silk-mask-space + min-silk * 0.5 + 0.01
    val line = Line(min-silk, [Point(-0.5 * line-length, 0.0), Point(0.5 * line-length, 0.0)])
    layer(Silkscreen("pol", Top)) = loc(pol-x, pol-y + dist) * line



; TODO - reuse PinEdgeConfig ?
; TODO - Why can't I pass in a pad here ?
;   There is a lot of effort in `jsl/landpatterns/pads` to create functions
;   that parametrically build pads of different shapes. Why are we not able
;   to pass in a pad here?
;   At the very least - Rectangle vs RoundedRectangle.
; TODO - We should have variants of the pin numbering here
;   ie, There is the normal dual row numbering but then probably a column
;    major, and row major variant.


doc: \<DOC>
Generator for Dual-Row SMD landpatterns

@param primary-num-pins
@param secondary-num-pins
@param primary-pin-pitch
@param secondary-pin-pitch
@param lead-length Length of the component lead. This length is in direction normal
  to the edge of the component.
@param lead-width Width of the component lead. This width is orthogonal to the
  `lead-length` and parallel to the edge of the component. This width must be
  less than the pitch of the pins.
@param lead-span The maximum edge-to-edge distance from pads on the primary side to
  pads on the secondary side.
@param lead-type Type of Land Protrusion that the component package is using.
@param package-length Length of the package (X direction)
@param package-width Width of the package (Y direction)
@param density-level
@param corner-pads?
@param thermal-pad?
<DOC>
public defn make-dual-row-smd-landpattern (
  primary-num-pins:    Int,
  secondary-num-pins:  Int,
  primary-pin-pitch:   Double,
  secondary-pin-pitch: Double,
  lead-length:         Toleranced,
  lead-width:          Toleranced,
  lead-span:           Toleranced,
  lead-type:           LandProtrusionType
  package-length:      Toleranced,
  package-width:       Toleranced,
  --
  density-level:       DensityLevel = DENSITY-LEVEL,
  with-pol-marker?:    True|False = true,
  thermal-pad?:        False|Shape = false
  ) :
  ensure-positive!("make-dual-row:primary-pitch", primary-pin-pitch)
  ensure-positive!("make-dual-row:sec-pitch", secondary-pin-pitch)

  inside pcb-landpattern :
    val fillets = lead-fillets(lead-type, density-level)
    val ipc = ipc-formula(lead-span, lead-length,
                          lead-width, fillets)
    val pad-sz = pad-size(ipc)

    defn make-grid (n:Int, p:Double) :
      val sz = Dims(Gmin(ipc) + x(pad-sz), p)
      to-tuple $ grid-locs(n / 2, 2, x(sz), y(sz), false)

    val primary-locs   = make-grid(2 * primary-num-pins, primary-pin-pitch)[0 to primary-num-pins]
    val secondary-locs = make-grid(2 * secondary-num-pins, secondary-pin-pitch)[secondary-num-pins to false]
    val locs = to-tuple(cat-all([primary-locs, in-reverse(secondary-locs)]))

    for (i in 1 to false, l in locs) do :
      pad p[i] : smd-pad(Rectangle(pad-sz)) at l

    val [max-y, min-y] = fork-on-seq(seq(y{center(_)}, locs), maximum, minimum)
    val lp-sz = enlarge(Dims(Zmax(ipc), y(pad-sz) + max-y - min-y), 2.0 * clearance(SolderMaskRegistration))
    val part-sz = Dims(max-value(package-length), max-value(package-width))
    val cy-sz = enlarge(max(lp-sz, part-sz), 2.0 * courtyard-excess(fillets))
    layer(Courtyard(Top)) = Rectangle(cy-sz)

    if with-pol-marker? :
      draw-pol-marker(locs, part-sz, pad-sz)

    make-thermal-pad(thermal-pad?, length(locs))

    val text-y = 0.5 * (y(cy-sz) + clearance(MinSilkscreenTextHeight))
    ref-label(loc(0.0, text-y))

doc: \<DOC>
Simplified Generator for Dual-Row SMD landpatterns

This generator makes the following assumptions:

1.  The number of pins on the primary and secondary side are equal
2.  The pitch between pins is the same on boths sides of the component.
3.  All of the leads are the same size.

@param num-pins
@param pin-pitch
@param lead-length Length of the component lead. This length is in direction normal
  to the edge of the component.
@param lead-width Width of the component lead. This width is orthogonal to the
  `lead-length` and parallel to the edge of the component. This width must be
  less than the pitch of the pins.
@param lead-span The maximum edge-to-edge distance from pads on the primary side to
  pads on the secondary side.
@param lead-type Type of Land Protrusion that the component package is using.
@param package-length Length of the package (X direction)
@param package-width Width of the package (Y direction)
@param density-level
@param corner-pads?
@param thermal-pad?
<DOC>
public defn make-dual-row-smd-landpattern (
  num-pins:        Int,
  pitch:           Double,
  lead-length:     Toleranced,
  lead-width:      Toleranced,
  lead-span:       Toleranced,
  lead-type:       LandProtrusionType
  package-length:  Toleranced,
  package-width:   Toleranced,
  --
  density-level:   DensityLevel = DENSITY-LEVEL,
  with-pol-marker?: True|False = true,
  thermal-pad?:    False|Shape = false
  ) : ; optional thermal pad shape
  ensure-divisible!(num-pins, 2, "make-dual-row:num-pins")
  val pins-per-side = num-pins / 2
  make-dual-row-smd-landpattern(
    pins-per-side, pins-per-side,
    pitch, pitch,
    lead-length, lead-width,
    lead-span, lead-type,
    package-length, package-width,
    density-level = density-level,
    with-pol-marker? = with-pol-marker?
    thermal-pad? = thermal-pad?
  )