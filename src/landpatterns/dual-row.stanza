#use-added-syntax(jitx)
defpackage jsl/landpatterns/dual-row:
  import core
  import math
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/design/settings
  import jsl/geometry/LineRectangle
  import jsl/geometry/basics
  import jsl/geometry/box

  import jsl/landpatterns/silkscreen
  import jsl/landpatterns/courtyard
  import jsl/landpatterns/packages
  import jsl/landpatterns/numbering
  import jsl/landpatterns/pads
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/leads
  import jsl/landpatterns/IPC
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/grid-planner
  import jsl/landpatterns/pad-grid

public val DUAL-ROW-COLS = 2

doc: \<DOC>
Base Dual Row Package Definition

This is a base type that is intended to
help construct dual-row package ICs, such
as SOIC, SOP, SON, etc.

The user is expected to create a type that
derives from `Dual-Package` and then
provide the remaining methods to construct
the landpattern, like `build-silkscreen`.
<DOC>
public defstruct Dual-Package <: Package :
  num-leads:Int with:
    ensure => ensure-even-positive!
    as-method => true

  doc: \<DOC>
  Lead Profile Defines the Configuration of leads on each edge
  <DOC>
  lead-profile:Lead-Profile
  doc: \<DOC>
  Optional thermal lead for the package.
  <DOC>
  thermal-lead?:False|Shape

  doc: \<DOC>
  Package Body for the Quad-based Package.
  <DOC>
  package-body:PackageBody with:
    as-method => true

  doc: \<DOC>
  Pad Planner for the Quad package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with:
    as-method => true

  doc: \<DOC>
  Lead Numbering Scheme for the Quad Package

  This provides a numbering scheme for the leads of the Dual
  package. By default, it uses {@link Column-Major-Numbering}.
  <DOC>
  lead-numbering:Numbering with:
    as-method => true

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true

with:
  printer => true
  constructor => #Dual-Package

public defmethod build-pads (
  pkg:Dual-Package,
  vp:VirtualLP
  ) -> False :

  val profile = lead-profile(pkg)
  val rows = num-leads(pkg) / DUAL-ROW-COLS
  val params = compute-params(profile, density-level = density-level(pkg))

  val pad-seq = pad-grid-smt(
    pad-size = pad-size(params),
    planner = pad-planner(pkg),
    lead-grid = DualGridPlanner(
      lead-params = params
      rows = rows,
    ),
    num-scheme = lead-numbering(pkg) ;  num-scheme,
  )

  append-all(vp, pad-seq)

  match(thermal-lead?(pkg)):
    (lead-shape:Shape):
      val cls = ["pad", "thermal"]
      append(vp, VirtualPad(num-leads(pkg) + 1, smd-pad(lead-shape), loc(0.0, 0.0), class = cls))
    (x:False): false

doc: \<DOC>
Dual-Row Grid Planner

This grid planner supports Dual Row components like SOIC,
SON, SOT, etc.

The idea is that this constructs a 2-Column grid where:
1.  Column 0 is in `-X` half plane and orders ascending for +Y to -Y
2.  Column 1 is in the `+X` half-plane and is rotated 180 degrees such
that the locations are ordered ascending from -Y to +Y.

This creates the typical numbering scheme for ICs:

```
Left-Row    Col 0   Col 1   Right-Row
   0          1       8         3
   1          2       7         2
   2          3       6         1
   3          4       5         0

```

Notice that the row indices are flipped on the left and right side.
<DOC>
public defstruct DualGridPlanner <: GridPlanner :
  doc: \<DOC>
  Lead Profile Parameters
  This object defines aspects of the lead profile such
  as the row center-to-center span and the pitch between
  pads in a column.

  In this implementation, the pitch is assumed constant in
  both columns.
  <DOC>
  lead-params:Lead-Profile-Params

  doc: \<DOC>
  Number of Rows in each Column of the grid.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true
  doc: \<DOC>
  Number of Columns in the Grid
  By default the dual row is pegged to 2 columns.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
    default => DEF_DUAL_GRID_COLS

with:
  constructor => #DualGridPlanner
  printer => true

val DEF_DUAL_GRID_COLS = 2

doc: \<DOC>
Constructor for the DualGridPlanner

This grid planner has a fixed 2 column grid.

@param lead-params Sets the lead span information including pitch and
pad center to center distance
@param rows Number of rows in the grid.
<DOC>
public defn DualGridPlanner (
  --
  lead-params:Lead-Profile-Params
  rows:Int,
  ) -> DualGridPlanner :
  #DualGridPlanner(lead-params, rows, DEF_DUAL_GRID_COLS)

defmethod pitch (g:DualGridPlanner) -> Double|Dims :
  pitch $ lead-params(g)

defmethod grid (g:DualGridPlanner) -> Seq<GridPosition> :
  if columns(g) != DEF_DUAL_GRID_COLS:
    throw $ ValueError("Unexpected 'columns=%_' - Expected '%_'" % [columns(g), DEF_DUAL_GRID_COLS])

  val [_, row-C-to-C, row-pitch] = to-tuple $ lead-params(g)

  for c in 0 to columns(g) seq-cat:
    val rot = to-double(180 * c)
    val offset = loc(0.0, 0.0, rot) * loc((- row-C-to-C) / 2.0, 0.0)

    val row-set = grid-locs(rows(g), 1, 1.0, row-pitch)
    val raw-grid-locs = for row-loc in row-set seq:
      offset * row-loc

    for (raw-grid-loc in raw-grid-locs, r in 0 to false) seq:
      GridPosition(r, c, raw-grid-loc)
