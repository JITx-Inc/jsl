#use-added-syntax(jitx)
defpackage pcie-example:
  import core
  import jitx
  import jitx/commands

  import ocdb/utils/generic-components
  import ocdb/utils/box-symbol
  import ocdb/utils/landpatterns

  import jsl/si/helpers
  import jsl/pin-assignment
  import jsl/bundles
  import jsl/protocols/pcie

doc: \<DOC>
The pcb-differential-routing-structure template below is an example of a differential-routing-structure needed
by pcie. This pcb-differential-routing-structure will be applied to the differential traces 
in the PCIe bus by using the helper function `pcie-apply-routing-structure()`. 
It should also reference a single ended routing structure for the uncoupled region.
<DOC>
pcb-differential-routing-structure diff :
  name = "85/100 Ohm differential impedance - PCIe"
  val gen = PCIE-V4 ; for instance
  val lookup-trace-impedance = pcie-get-trace-impedance(gen)
  val tw = switch(typ(lookup-trace-impedance)) :
    85.0  : 0.1400
    100.0 : 0.1510
  ; whatever layers are to be used for routing the differential pairs (defined by the user)
  layer(LayerIndex(1, Top)) :
    trace-width  = tw       ; mm
    pair-spacing = 2.0 * tw ; mm
    clearance    = 0.300    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz 

  layer(LayerIndex(1, Bottom)) :
    trace-width  = tw       ; mm
    pair-spacing = 2.0 * tw ; mm
    clearance    = 0.300    ; mm
    velocity = 0.19e12      ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz

  uncoupled-region = se-50


doc: \<DOC>
The pcb-routing-structure(s) below are just examples of the routing structures that need to be maintained 
in the project code because they are dependant on the stack-up and other factors.
<DOC>
public pcb-routing-structure se-50 :
  name = "50 Ohm single-ended"
  layer(Top) :
    trace-width = 0.15    ; mm
    clearance = 0.15     ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz 
    neck-down = NeckDown(
      trace-width = 0.156 
      clearance = 0.1 
    )

  layer(Bottom) :
    trace-width = 0.15    ; mm
    clearance = 0.15         ; mm
    velocity = 0.19e12   ; mm/s
    insertion-loss = 0.008  ; db/mm @ 1GHz 
    neck-down = NeckDown(
      trace-width = 0.156 
      clearance = 0.1 
    )

public pcb-component pcie-src-component :
  reference-prefix = "U"
  mpn = "JITX001"
  description = "Dummy device with multiple PCIe supports"
  pin-properties :
    [pin:Ref    | pads:Ref ... | side:Dir | bank:Ref]
    [REFCLKN[0] | p[1]  | Left  | A]
    [REFCLKP[0] | p[2]  | Left  | A]
    [PRXN[1]    | p[3]  | Left  | A]
    [PRXP[1]    | p[4]  | Left  | A]
    [PRXN[0]    | p[5]  | Left  | A]
    [PRXP[0]    | p[6]  | Left  | A]
    [PTXN[1]    | p[7]  | Left  | A]
    [PTXP[1]    | p[8]  | Left  | A]
    [PTXN[0]    | p[9]  | Left  | A]
    [PTXP[0]    | p[10] | Left  | A]
    [PRXN[3]    | p[11] | Left  | A]
    [PRXP[3]    | p[12] | Left  | A]
    [PRXN[2]    | p[13] | Left  | A]
    [PRXP[2]    | p[14] | Left  | A]
    [PTXN[3]    | p[15] | Left  | A]
    [PTXP[3]    | p[16] | Left  | A]
    [PTXN[2]    | p[17] | Left  | A]
    [PTXP[2]    | p[18] | Left  | A]
    [PERST0#    | p[19] | Right | A]
    [REFCLKN[3] | p[20] | Left  | B]
    [REFCLKP[3] | p[21] | Left  | B]
    [REFCLKN[2] | p[22] | Left  | B]
    [REFCLKP[2] | p[23] | Left  | B]
    [REFCLKN[1] | p[24] | Left  | B]
    [REFCLKP[1] | p[25] | Left  | B]
    [PERST3#    | p[26] | Left  | B]
    [PERST2#    | p[27] | Left  | B]
    [PERST1#    | p[28] | Left  | B]
    [GPIO[1]    | p[29] | Left  | B]
    [GPIO[2]    | p[30] | Left  | B]
    [GPIO[3]    | p[31] | Left  | B]
    [GPIO[4]    | p[32] | Left  | B]
    [GPIO[5]    | p[33] | Left  | B]
    [GPIO[6]    | p[34] | Left  | B]
    [GPIO[7]    | p[35] | Left  | B]
    [GPIO[8]    | p[36] | Left  | B]
    [GPIO[9]    | p[37] | Left  | B]
    [GPIO[10]   | p[38] | Left  | B]
    [GPIO[11]   | p[39] | Left  | B]
    [GPIO[12]   | p[40] | Left  | B]
    [GPIO[13]   | p[41] | Left  | B]
    [GPIO[14]   | p[42] | Left  | B]
    [GPIO[15]   | p[43] | Left  | B]

  make-box-symbol()
  assign-landpattern(pin-header-pkg(49, 7, 0.25, 0.25))

  for i in 0 to 4 do :
    diff-pin-model(self.PRXP[i] self.PRXN[i]       delay = typ(10.0e-15) loss = typ(0.1))
    diff-pin-model(self.PTXP[i] self.PTXN[i]       delay = typ(10.0e-15) loss = typ(0.1))
    diff-pin-model(self.REFCLKP[i] self.REFCLKN[i] delay = typ(10.0e-15) loss = typ(0.1))


public pcb-module pcie-src-module :

  public inst sw : pcie-example/pcie-src-component

  supports pcie(lanes = 4) :
    for i in 0 to 4 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i]
    pcie(lanes = 4).data.refclk.P => sw.REFCLKP[0]
    pcie(lanes = 4).data.refclk.N => sw.REFCLKN[0]
 
    pcie(lanes = 4).control.PEWAKE# => sw.GPIO[5]
    pcie(lanes = 4).control.PRSNT#  => sw.GPIO[12]
    pcie(lanes = 4).control.PERST#  => sw.PERST0#
    pcie(lanes = 4).control.CLKREQ# => sw.GPIO[1]

  supports pcie(lanes = 2) :
    for i in 0 to 2 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i]
    pcie(lanes = 2).data.refclk.P => sw.REFCLKP[0]
    pcie(lanes = 2).data.refclk.N => sw.REFCLKN[0]
 
    pcie(lanes = 2).control.PEWAKE# => sw.GPIO[6]
    pcie(lanes = 2).control.PRSNT#  => sw.GPIO[12]
    pcie(lanes = 2).control.PERST#  => sw.PERST0#
    pcie(lanes = 2).control.CLKREQ# => sw.GPIO[1]

  supports pcie(lanes = 2) :
    for i in 0 to 2 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i + 2]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i + 2]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i + 2]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i + 2]
    pcie(lanes = 2).data.refclk.P => sw.REFCLKP[2]
    pcie(lanes = 2).data.refclk.N => sw.REFCLKN[2]
 
    pcie(lanes = 2).control.PEWAKE# => sw.GPIO[7]
    pcie(lanes = 2).control.PRSNT#  => sw.GPIO[13]
    pcie(lanes = 2).control.PERST#  => sw.PERST2#
    pcie(lanes = 2).control.CLKREQ# => sw.GPIO[2]

  supports pcie(lanes = 1) :
    for i in 0 to 1 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i]
    pcie(lanes = 1).data.refclk.P => sw.REFCLKP[0]
    pcie(lanes = 1).data.refclk.N => sw.REFCLKN[0]
 
    pcie(lanes = 4).control.PEWAKE# => sw.GPIO[8]
    pcie(lanes = 4).control.PRSNT#  => sw.GPIO[12]
    pcie(lanes = 4).control.PERST#  => sw.PERST0#
    pcie(lanes = 4).control.CLKREQ# => sw.GPIO[1]

  supports pcie(lanes = 1) :
    for i in 0 to 1 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i + 1]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i + 1]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i + 1]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i + 1]
    pcie(lanes = 1).data.refclk.P => sw.REFCLKP[1]
    pcie(lanes = 1).data.refclk.N => sw.REFCLKN[1]
 
    pcie(lanes = 1).control.PEWAKE# => sw.GPIO[9]
    pcie(lanes = 1).control.PRSNT#  => sw.GPIO[14]
    pcie(lanes = 1).control.PERST#  => sw.PERST1#
    pcie(lanes = 1).control.CLKREQ# => sw.GPIO[3]

  supports pcie(lanes = 1) :
    for i in 0 to 1 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i + 2]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i + 2]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i + 2]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i + 2]
    pcie(lanes = 1).data.refclk.P => sw.REFCLKP[2]
    pcie(lanes = 1).data.refclk.N => sw.REFCLKN[2]
 
    pcie(lanes = 1).control.PEWAKE# => sw.GPIO[10]
    pcie(lanes = 1).control.PRSNT#  => sw.GPIO[13]
    pcie(lanes = 1).control.PERST#  => sw.PERST2#
    pcie(lanes = 1).control.CLKREQ# => sw.GPIO[2]

  supports pcie(lanes = 1) :
    for i in 0 to 1 do :
      pcie(lanes = 4).data.rx[i].P => sw.PRXP[i + 3]
      pcie(lanes = 4).data.rx[i].N => sw.PRXN[i + 3]
      pcie(lanes = 4).data.tx[i].P => sw.PTXP[i + 3]
      pcie(lanes = 4).data.tx[i].N => sw.PTXN[i + 3]
    pcie(lanes = 1).data.refclk.P => sw.REFCLKP[3]
    pcie(lanes = 1).data.refclk.N => sw.REFCLKN[3]
 
    pcie(lanes = 1).control.PEWAKE# => sw.GPIO[11]
    pcie(lanes = 1).control.PRSNT#  => sw.GPIO[15]
    pcie(lanes = 1).control.PERST#  => sw.PERST3#
    pcie(lanes = 1).control.CLKREQ# => sw.GPIO[4]


