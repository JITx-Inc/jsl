#use-added-syntax(jitx)
defpackage jsl/landpatterns/headers:
  import core
  import jitx

  import jsl/design/settings
  import jsl/errors
  import jsl/ensure

  import jsl/geometry/box
  import jsl/geometry/LineRectangle

  import jsl/landpatterns/framework

doc: \<DOC>
Landpattern Generator for Headers

This is intended to be a generator for constructing
the land patterns for single-row and dual-row headers.

Current implementation works well for standard through-hole
headers, but likely needs refinement for SMT headers. Customized
planner and numbering objects would likely fill the gap.
<DOC>
public defstruct Header <: Package :

  num-leads:Int with:
    ensure => ensure-positive!,
    as-method => true

  doc: \<DOC>
  Lead Type indicates TH vs SMT leads and their parameters.
  <DOC>
  lead-type:Lead
  doc: \<DOC>
  Set the size of the pad diameter for through-hole and width for SMT.
  <DOC>
  pad-diam:Double with:
    ensure => ensure-positive!

  doc: \<DOC>
  Number of Rows of leads on this package
  <DOC>
  rows:Int with:
    ensure => ensure-positive!

  pitch:Double|Dims with:
    ensure => ensure-positive!

  doc: \<DOC>
  Package Body for the Header.
  <DOC>
  package-body:PackageBody with:
    as-method => true

  doc: \<DOC>
  Pad Planner for the Header
  The planner determines which pads will be created in the
  grid. See {@link PadPlanner} for more info.
  This planner will also determine whether through-hole or
  surface-mount pads are created for this land pattern.
  <DOC>
  pad-planner:PadPlanner with:
    as-method => true

  doc: \<DOC>
  Lead Numbering Scheme for the Header
  <DOC>
  lead-numbering:Numbering with:
    as-method => true

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true

with:
  hashable => true
  printer => true
  constructor => #Header

defn default-pad-planner (lead-type:Lead) -> PadPlanner :
  PthPadPlanner(capsule-shaper)

defn default-numbering (num-leads:Int, rows:Int) -> Numbering:
  ; This is a bit strange - but the typical numbering
  ;  for a dual-row header is usually column wise
  ;  not row wise.
  Column-Major-Numbering(num-leads, num-leads / rows)

public defn Header (
  --
  num-leads:Int,
  lead-type:Lead,
  pad-diam:Double,
  rows:Int,
  pitch:Double|Dims,
  package-body:PackageBody,
  pad-planner:PadPlanner = default-pad-planner(lead-type),
  lead-numbering:Numbering = default-numbering(num-leads, rows),
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> Header :
  if (num-leads % rows) != 0 :
    throw $ ValueError("Number of Leads is not easily divisible by 'rows': num-leads=%_ rows=%_"  % [num-leads, rows])
  #Header(num-leads, lead-type, pad-diam, rows, pitch, package-body, pad-planner, lead-numbering, density-level)

public defmethod name (pkg:Header) -> String:
  "Header"

public defmethod courtyard-excess (pkg:Header) -> Double :
  0.2

defn build-smt-pads (
  pkg:Header,
  lt:SMT-Lead,
  pgrid:GridPlanner,
  ) -> Seq<VirtualPad> :

  ; FIX ME - we should pull from the lead data.
  val pad-size = Dims(pad-diam(pkg), pad-diam(pkg))
  pad-grid-smt(
    pad-size = pad-size
    planner = pad-planner(pkg)
    lead-grid = pgrid
    num-scheme = lead-numbering(pkg),
  )

defn build-th-pads (
  pkg:Header,
  lt:TH-Lead,
  pgrid:GridPlanner,
  ) -> Seq<VirtualPad> :

  pad-grid-th(
    lead-type = lt
    planner = pad-planner(pkg),
    lead-grid = pgrid
    num-scheme = lead-numbering(pkg),
    density-level = density-level(pkg),
  )


public defn build-vpads (
  pkg:Header,
  vp:VirtualLP
  ):
  val lt = lead-type(pkg)

  val rows = rows(pkg)
  val cols = num-leads(pkg) / rows
  val pgrid = GridPlanner(
    pitch = pitch(pkg),
    rows = rows,
    columns = cols,
    ; The grid gets constructed horizontally because of the "row"
    ;  nomenclature but we want the resultant header to be shown vertically.
    ;  The FlipY puts the pad ordering in the right direction.
    pose = loc(0.0, 0.0, -90.0, FlipY)
    )

  val pad-set = match(lt):
    (smt:SMT-Lead):
      build-smt-pads(pkg, smt, pgrid)
    (th:TH-Lead):
      build-th-pads(pkg, th, pgrid)

  append-all(vp, pad-set)


public defmethod build-pads (
  pkg:Header,
  vp:VirtualLP,
  ) -> False :
  build-vpads(pkg, vp)


public defn compute-outline (
  vp:VirtualLP,
  density-level:DensityLevel
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  ) -> Shape:
  val lp-pads = get-pads(vp)
  val pad-outline = bounds(lp-pads, layer-spec = SolderMask(Top))
  val pad-outline* = fatten(mask-clearance + (line-width / 2.0), pad-outline)
  LineRectangle(pad-outline*, line-width = line-width)

public defmethod build-silkscreen (
  pkg:Header,
  vp:VirtualLP,
  ):
  val outline = compute-outline(vp, density-level(pkg))
  add-artwork(vp, Silkscreen("outline", Top), outline, class = "outline")
  add-reference-designator(vp)