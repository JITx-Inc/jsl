#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/numbering:
  import core
  import jitx

  import jsl/landpatterns/numbering
  import jsl/landpatterns/helpers
  import jsl/tests/utils

deftest(numbering) test-std-ic:

  val uut = Std-IC-Numbering(10)

  val obs = to-tuple $ for c in 0 to 2 seq-cat:
    for r in 0 to 5 seq:
      to-pad-id(uut, r, c)

  val exp = [1,2,3,4,5,10,9,8,7,6]

  #EXPECT(obs == exp)


  expect-throw({Std-IC-Numbering(0)})
  expect-throw({Std-IC-Numbering(-1)})
  expect-throw({Std-IC-Numbering(7)})

  expect-throw({to-pad-id(uut, -1, 0)})
  expect-throw({to-pad-id(uut, 0, -1)})
  expect-throw({to-pad-id(uut, -1, -1)})

  expect-throw({to-pad-id(uut, 0, 2)})
  expect-throw({to-pad-id(uut, 6, 0)})
  expect-throw({to-pad-id(uut, 6, 2)})
  expect-throw({to-pad-id(uut, 0, 10)})

deftest(numbering) test-row-major:
  val uut = Row-Major-Numbering(21, 3)

  val obs = to-tuple $ for c in 0 to 7 seq-cat:
    for r in 0 to 3 seq:
      to-pad-id(uut, r, c)

  val exp = [1, 8, 15, 2, 9, 16, 3, 10, 17, 4, 11, 18, 5, 12, 19, 6, 13, 20, 7, 14, 21]
  #EXPECT(obs == exp)

  expect-throw({Row-Major-Numbering(0, 1)})
  expect-throw({Row-Major-Numbering(1, 0)})
  expect-throw({Row-Major-Numbering(0, -1)})
  expect-throw({Row-Major-Numbering(-1, 0)})

  expect-throw({Row-Major-Numbering(2, 4)})
  expect-throw({Row-Major-Numbering(3, 4)})
  expect-throw({Row-Major-Numbering(6, 4)})
  expect-throw({Row-Major-Numbering(10, 4)})

  expect-throw({to-pad-id(uut, -1, 0)})
  expect-throw({to-pad-id(uut, 0, -1)})
  expect-throw({to-pad-id(uut, -1, -1)})

  expect-throw({to-pad-id(uut, 0, 8)})
  expect-throw({to-pad-id(uut, 6, 0)})
  expect-throw({to-pad-id(uut, 6, 8)})
  expect-throw({to-pad-id(uut, 0, 10)})

deftest(numbering) test-column-major:
  val uut = Column-Major-Numbering(18, 6)

  val obs = to-tuple $ for r in 0 to 3 seq-cat:
    for c in 0 to 6 seq:
      to-pad-id(uut, r, c)

  val exp = [1, 4, 7, 10, 13, 16, 2, 5, 8, 11, 14, 17, 3, 6, 9, 12, 15, 18]
  #EXPECT(obs == exp)

  expect-throw({Column-Major-Numbering(0, 1)})
  expect-throw({Column-Major-Numbering(1, 0)})
  expect-throw({Column-Major-Numbering(0, -1)})
  expect-throw({Column-Major-Numbering(-1, 0)})

  expect-throw({Column-Major-Numbering(3, 7)})
  expect-throw({Column-Major-Numbering(3, 2)})
  expect-throw({Column-Major-Numbering(6, 4)})

  expect-throw({to-pad-id(uut, -1, 0)})
  expect-throw({to-pad-id(uut, 0, -1)})
  expect-throw({to-pad-id(uut, -1, -1)})

  expect-throw({to-pad-id(uut, 0, 8)})
  expect-throw({to-pad-id(uut, 6, 0)})
  expect-throw({to-pad-id(uut, 6, 8)})
  expect-throw({to-pad-id(uut, 0, 10)})


deftest(numbering) test-grid-numbering:
  val rows = 3
  val columns = 3
  val uut = Grid-Numbering(rows, columns)

  val obs = to-tuple $ for r in 0 to rows seq-cat:
    for c in 0 to columns seq:
      to-pad-id(uut, r, c)

  val exp = [
    IndexRef(Ref("A"), 1),
    IndexRef(Ref("A"), 2),
    IndexRef(Ref("A"), 3),
    IndexRef(Ref("B"), 1),
    IndexRef(Ref("B"), 2),
    IndexRef(Ref("B"), 3),
    IndexRef(Ref("C"), 1),
    IndexRef(Ref("C"), 2),
    IndexRef(Ref("C"), 3),
  ]

  #EXPECT(obs == exp)

  #EXPECT(to-row-index(uut, Ref("A")) == 0)
  #EXPECT(to-row-index(uut, Ref("B")) == 1)
  #EXPECT(to-row-index(uut, Ref("C")) == 2)

  expect-throw({to-pad-id(uut, -1, 0)})
  expect-throw({to-pad-id(uut, 0, -1)})
  expect-throw({to-pad-id(uut, -1, -1)})

  expect-throw({to-pad-id(uut, 0, 8)})
  expect-throw({to-pad-id(uut, 3, 0)})
  expect-throw({to-pad-id(uut, 6, 3)})
  expect-throw({to-pad-id(uut, 0, 10)})

  expect-throw({Grid-Numbering(0, 1)})
  expect-throw({Grid-Numbering(1, 0)})
  expect-throw({Grid-Numbering(0, -1)})
  expect-throw({Grid-Numbering(-1, 0)})

  val r = to-row-range(uut, "A", "C")
  #EXPECT(r == 1 through 3)

  val r2 = to-row-range(uut, 'B', 'C')
  #EXPECT(r2 == 2 through 3)


deftest(numbering) test-offset-grid-numbering:
  val rows = 3
  val columns = 3
  val start-row = 2 ; C
  val start-col = 3 ; 4
  val uut = Grid-Numbering(rows, columns, start-row, start-col)

  val obs = to-tuple $ for r in 0 to rows seq-cat:
    for c in 0 to columns seq:
      to-pad-id(uut, r, c)

  val exp = [
    IndexRef(Ref("C"), 4),
    IndexRef(Ref("C"), 5),
    IndexRef(Ref("C"), 6),
    IndexRef(Ref("D"), 4),
    IndexRef(Ref("D"), 5),
    IndexRef(Ref("D"), 6),
    IndexRef(Ref("E"), 4),
    IndexRef(Ref("E"), 5),
    IndexRef(Ref("E"), 6),
  ]

  #EXPECT(obs == exp)

  #EXPECT(to-row-index(uut, Ref("C")) == 0)
  #EXPECT(to-row-index(uut, Ref("D")) == 1)
  #EXPECT(to-row-index(uut, Ref("E")) == 2)

  expect-throw({to-row-index(uut, Ref("A"))})

  val r = to-row-range(uut, "D", "E")
  #EXPECT(r == 2 through 3)


deftest(numbering) test-omits-grid-numbering:

  val rows = 3
  val columns = 3
  val uut = Grid-Numbering(rows, columns, 0, 0, "ABC")

  val obs = to-tuple $ for r in 0 to rows seq-cat:
    for c in 0 to columns seq:
      to-pad-id(uut, r, c)

  val exp = [
    IndexRef(Ref("D"), 1),
    IndexRef(Ref("D"), 2),
    IndexRef(Ref("D"), 3),
    IndexRef(Ref("E"), 1),
    IndexRef(Ref("E"), 2),
    IndexRef(Ref("E"), 3),
    IndexRef(Ref("F"), 1),
    IndexRef(Ref("F"), 2),
    IndexRef(Ref("F"), 3),
  ]

  #EXPECT(obs == exp)

  #EXPECT(to-row-index(uut, Ref("D")) == 0)
  #EXPECT(to-row-index(uut, Ref("E")) == 1)
  #EXPECT(to-row-index(uut, Ref("F")) == 2)

  expect-throw({to-row-index(uut, Ref("A"))})
  expect-throw({to-row-index(uut, Ref("C"))})
  expect-throw({to-row-index(uut, Ref("G"))})

  val r = to-row-range(uut, "D", "E")
  #EXPECT(r == 1 through 2)

deftest(numbering) test-omit-cols-grid-numbering :

  val rows = 3
  val columns = 3
  val uut = Grid-Numbering(rows, columns, 0, 0, DEF-ROW-OMITS, [2])

  val obs = to-tuple $ for r in 0 to rows seq-cat:
    for c in 0 to columns seq:
      to-pad-id(uut, r, c)

  val exp = [
    IndexRef(Ref("A"), 1),
    IndexRef(Ref("A"), 3),
    IndexRef(Ref("A"), 4),
    IndexRef(Ref("B"), 1),
    IndexRef(Ref("B"), 3),
    IndexRef(Ref("B"), 4),
    IndexRef(Ref("C"), 1),
    IndexRef(Ref("C"), 3),
    IndexRef(Ref("C"), 4),
  ]

  #EXPECT(obs == exp)

deftest(numbering) test-row-rollover-grid-numbering:

  val rows = 5
  val columns = 2
  val omits = make-letter-seq('D', 'Z')
  val uut = Grid-Numbering(rows, columns, 0, 0, omits)

  val obs = to-tuple $ for r in 0 to rows seq-cat:
    for c in 0 to columns seq:
      to-pad-id(uut, r, c)

  val exp = [
    IndexRef(Ref("A"), 1),
    IndexRef(Ref("A"), 2),
    IndexRef(Ref("B"), 1),
    IndexRef(Ref("B"), 2),
    IndexRef(Ref("C"), 1),
    IndexRef(Ref("C"), 2),
    IndexRef(Ref("AA"), 1),
    IndexRef(Ref("AA"), 2),
    IndexRef(Ref("AB"), 1),
    IndexRef(Ref("AB"), 2),
  ]

  #EXPECT(obs == exp)

  #EXPECT(to-row-index(uut, Ref("A")) == 0)
  #EXPECT(to-row-index(uut, Ref("B")) == 1)
  #EXPECT(to-row-index(uut, Ref("C")) == 2)
  #EXPECT(to-row-index(uut, Ref("AA")) == 3)
  #EXPECT(to-row-index(uut, Ref("AB")) == 4)

  expect-throw({to-row-index(uut, Ref("D"))})
  expect-throw({to-row-index(uut, Ref("AC"))})
  expect-throw({to-row-index(uut, Ref("Z"))})
  expect-throw({to-row-index(uut, Ref("A1"))})
  expect-throw({to-row-index(uut, Ref("A0"))})

  val r = to-row-range(uut, "C", "AB")
  #EXPECT(r == 3 through 5)

deftest(numbering) test-uneven-column-major-numbering:

  val rows = 4
  val columns = 5
  val uut = Uneven-Column-Major-Numbering(rows, columns)

  val testvecs = [
    [[0,0], 1],
    [[1,0], 2],
    [[2,0], 3],
    [[3,0], 4],
    [[0,1], 5],
    [[1,1], 6],
    [[2,1], 7],
    [[3,1], 8],
    [[4,1], 9],
    [[0,2], 10],
    [[1,2], 11],
    [[2,2], 12],
    [[3,2], 13],
    [[0,3], 14],
    [[1,3], 15],
    [[2,3], 16],
    [[3,3], 17],
    [[4,3], 18],
  ]
  for testvec in testvecs do:
    val [g-loc, pad-id] = testvec
    val [r,c] = g-loc

    #EXPECT(to-pad-id(uut, r, c) == pad-id)

  #EXPECT(get-total-pads(uut) == 18)

  expect-throw({to-pad-id(uut, -1, 0)})
  expect-throw({to-pad-id(uut, 0, -1)})
  expect-throw({to-pad-id(uut, -1, -1)})

  expect-throw({to-pad-id(uut, 0, 4)})
  expect-throw({to-pad-id(uut, 4, 0)})
  expect-throw({to-pad-id(uut, 5, 1)})
  expect-throw({to-pad-id(uut, 4, 2)})
  expect-throw({to-pad-id(uut, 5, 3)})
