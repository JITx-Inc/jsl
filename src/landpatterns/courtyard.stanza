#use-added-syntax(jitx)
defpackage jsl/landpatterns/courtyard:
  import core
  import jitx
  import jitx/commands
  import jsl/landpatterns/helpers
  import jsl/geometry/basics

  ; TODO - This ideally moves to jitx
  import jsl/geometry/LineRectangle

public val DEF_COURTYARD_WIDTH = 0.2

doc: \<DOC>
Generator for Courtyard Origin Marker

This function generates a `plus` sign marker
at the origin of a component landpattern.

@param pose Override the origin location by applying a
`pose`. This can both rotate and translate the marker position.
@param side Indicates which side to place the courtyard on. Default
per convention is the top.
<DOC>
public defn make-courtyard-origin (
  --
  pose:Pose = loc(0.0, 0.0)
  side:Side = Top
  ):
  inside pcb-landpattern:
    layer(Courtyard(side)) = PlusSymbol(line-width = DEF_COURTYARD_WIDTH, pose = pose)

doc: \<DOC>
Generate the Bounding Dims of a sequence of pads
@param lp-pads the pads that we want to create a bounding
rectangle of.
@param layer-spec Optional layer specifier that will compute
  the bounds based on the geometry in a particular layer.
  If this value is false - we compute the boundary based on the
  copper pad geometry only.
@param expand-by Amount to expand the created dimension by.
<DOC>
public defn bounds (
  lp-pads:Seqable<LandPatternPad>
  --
  layer-spec:LayerSpecifier|False = false
  expand-by:Double = 0.0
  ) -> Dims :
  val unionAll = Union $ for lp-pad in lp-pads seq:
    val pd = pad(lp-pad)
    val l = pose(lp-pad)
    match(layer-spec):
      (_:False):
        l * pad-shape(pd)
      (ls:LayerSpecifier):
        val shapes = layer(pd, ls)
        l * Union(shapes)

  ; NOTE - this is not positioned in any way - it is
  ;  just the dimensions.
  ;  Ie - it isn't a `Rectangle` with a pose.
  dims $ expand-union(unionAll, expand-by)

doc: \<DOC>
Generator for Courtyard Boundary

The courtyard boundary creates the typical minimum spacing
expected around a component. The idea is that for soldering/reflow
we need some space around a component to allow rework - otherwise
we could damage or de-solder components we don't intend to modify.

This function uses all of the copper pads to define the maximal extent
of the landpattern. This maximal extent is then padded with the `excess`
amount on all sides. We then compute the smallest rectangle that
encapsulates all of these expanded features. This rectangle forms
the courtyard boundary.

@param excess Additional space to pad the boundary of the
pads for this component when making the courtyard boundary.
The default value is 0.5mm
@param side Which side of the board to draw the courtyard on. By
default we use the `Top` side as per convention.
@param pose Pose offset for this group of features.
<DOC>
public defn make-courtyard-boundary (
  --
  excess:Double = 0.5
  side:Side = Top
  pose:Pose = loc(0.0, 0.0)
  ):
  inside pcb-landpattern:
    val outline = bounds(pads(self), expand-by = excess)
    layer(Courtyard(side)) = pose * LineRectangle(outline, line-width = DEF_COURTYARD_WIDTH)

