#use-added-syntax(jitx)
defpackage jsl/ensure:
  import core
  import jitx

  import jsl/errors

public defn ensure-positive! (
  field:String,
  value: Int|Long|Double|Float|Toleranced|Dims|Percentage
  ) :
  val fail = match(value):
    (x:Int): x <= 0
    (x:Long): x <= 0L
    (x:Double): x <= 0.0
    (x:Float): x <= 0.0F
    (t:Toleranced):
      min-value(t) <= 0.0
    (d:Dims):
      x(d) <= 0.0 or y(d) <= 0.0
    (p:Percentage):
      p <= (0 %)
  if fail:
    throw $ ValueError("%_: Expects Positive Number: %_" % [field, value])

public defn ensure-positive! (
  field:String,
  value?:Maybe<Int|Long|Double|Float|Toleranced|Dims|Percentage>
) :
  match(value?):
    (x:None): false
    (x:One<Int|Long|Double|Float|Toleranced|Dims|Percentage>): ensure-positive!(field, value(x))

doc: \<DOC>
Check if the passed value is both positive and even
@throws ValueError when the passed value is not even or positive
@param field Name of the package we are checking
@param value Number to check, typically the number of pins for a particular package.
<DOC>
public defn ensure-even-positive! (
  field:String, value:Int
  ) :
  if value < 2 or value % 2 > 0:
    throw $ ValueError("%_: only supports a positive even number of pins: %_" % [field, value])

doc: \<DOC>
Check for multi-sided components to ensure proper number of pins.
@throws ValueError when the passed value is not divible.
@param value Number to check, typically the number of pins for a particular package.
@param divisor Typically used for the number of sides of a package. Example: 4 for QFN.
@param name Name of the package we are checking
<DOC>
public defn ensure-divisible! (value:Int, divisor:Int, name: String) :
  if not (value > 0):
    throw $ ValueError("%_: Value must be positive: %_" % [name, value])
  if not (divisor > 0):
    throw $ ValueError("%_: Divisor must be positive: %_" % [name, divisor])
  if ((value % divisor) != 0) :
    throw $ ValueError("%_: %_ must be divisible by %_." % [name, value, divisor])

doc: \<DOC>
Check if the value is non-negative (ie, zero or greater)
<DOC>
public defn ensure-non-negative! (field:String, value:Int|Long|Double|Float|Toleranced|Dims|Percentage):
  val fail = match(value):
    (x:Int): x < 0
    (x:Long): x < 0L
    (x:Double): x < 0.0
    (x:Float): x < 0.0F
    (t:Toleranced):
      min-value(t) < 0.0
    (d:Dims):
      x(d) < 0.0 or y(d) < 0.0
    (p:Percentage):
      p < (0 %)
  if fail:
    throw $ ValueError("%_: Expects Non-Negative Number: %_" % [field, value])

public defn ensure-non-negative! (
  field:String,
  value?:Maybe<Int|Long|Double|Float|Toleranced|Dims|Percentage>
) :
  match(value?):
    (x:None): false
    (x:One<Int|Long|Double|Float|Toleranced|Dims|Percentage>): ensure-non-negative!(field, value(x))

#for (
  func-name in [ensure-greater!, ensure-greater-eq!, ensure-less!, ensure-less-eq!],
  op in [greater?, greater-eq?, less?, less-eq?]
  ):

  public defn func-name (
    min-v:Int|Long|Double|Float|Dims
    ):
    defn ensure-func (
      field:String,
      value: Int|Long|Double|Float|Dims,
      ) :
      val success = match(value, min-v):
        (x:Int, mv:Int): op(x, mv) ;  x <= mv
        (x:Long, mv:Long): op(x, mv) ;  x <= mv
        (x:Double, mv:Double): op(x, mv)
        (x:Float, mv:Float): op(x, mv)
        (d:Dims, mv:Double):
          op(x(d), mv) and op(y(d), mv)
      if not success:
        throw $ ValueError("%_: Expects Number %_ > %_ " % [field, min-v, value])
    ensure-func

#for (
  func-name in [ensure-maybe-greater!, ensure-maybe-greater-eq!, ensure-maybe-less!, ensure-maybe-less-eq!]
  helper-name in [ensure-greater!, ensure-greater-eq!, ensure-less!, ensure-less-eq!]
  op in [greater?, greater-eq?, less?, less-eq?]
):
  public defn func-name (
    min-value:Int|Long|Double|Float|Dims
    ):
    val helper = helper-name(min-value)
    defn ensure-func (
      field:String,
      value?:Maybe<Int|Long|Double|Float|Dims>
    ) :
      match(value?):
        (x:None): false
        (x:One<Int|Long|Double|Float|Dims>): helper(field, value(x))
    ensure-func

