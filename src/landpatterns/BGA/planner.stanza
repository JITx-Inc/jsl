#use-added-syntax(jitx)
defpackage jsl/landpatterns/BGA/planner:
  import core
  import jitx
  import jitx/commands

  import jsl/landpatterns/BGA/pads
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/pad-island
  import jsl/landpatterns/grid-planner
  import jsl/geometry/basics
  import jsl/ensure

val DEF-PAD-CONFIG = PadConfig-R()

doc: \<DOC>
Default BGA Pad Planner
This pad planner will create circular pads for each BGA
ball location. The user can use the `pad-config` to
modify the construction of each pad including the soldermask
and pastemask openings.

This type is derived from two parent implementations:
1.  {@link type:PadPlanner} which manages selection of which pads to populate
and how they should be constructed
2.  {@link type:GridPlanner} which manages the placement of the created pads
at particular grid locations.
<DOC>
public defstruct BGA-PadPlanner <: PadPlanner & GridPlanner:
  doc: \<DOC>
  Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, paste application, etc.
  <DOC>
  pad-config:PadConfig with:
    default => DEF-PAD-CONFIG

  ; GridPlanner Base
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)

doc: \<DOC>
Default Pad Shaper for BGA packages.
This accepts a `Dims` object and will convert
it to a `Circle` using the `x` dimension of the `Dims`.
<DOC>
public defn BGA-Pad-Shaper (s:Dims) -> Shape :
  Circle(to-radius $ x(s))

public defmethod shape-generator (bga:BGA-PadPlanner, row:Int, column:Int) -> (Dims -> Shape)|False :
  BGA-Pad-Shaper

public defmethod pad-generator (x:BGA-PadPlanner, row:Int, column:Int) -> (Dims -> Pad)|False :
  val func? = shape-generator(x, row, column)
  match(active?(x, row, column), func?):
    (active:False, x): false
    (active:True, f:(Dims -> Shape)):
      build-bga-pad{f(_0), pad-config(x)}
    (active:True, f:False):
      throw $ NoGeneratorForActivePadError(row, column, "shape-generator")


doc: \<DOC>
Full Matrix - All Pads in the grid are active
<DOC>
public defstruct Full-Matrix-Planner <: BGA-PadPlanner :
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  rows:Int with:
    ensure => ensure-positive!
    as-method => true
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

public defmethod active? (x:Full-Matrix-Planner, row:Int, column:Int) -> True|False:
  true

doc: \<DOC>
Staggered Matrix - Every other pad is in-active.

TODO - Diagram here

This pad planner assumes that the grid is structured
as

<DOC>
public defstruct Staggered-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  Phase indicates whether the first row pad 0 is empty or populated.
  By default this function uses `Even-Phase`
  <DOC>
  phase:StaggerPhase with:
    default => Even-Phase

  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  Columns in the Staggered Matrix Grid.
  Note that there are typically 2x as many columns in
  the grid as pads that will get populated.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)

with:
  keyword-constructor => true
  printer => true


public defmethod active? (x:Staggered-Matrix-Planner, row:Int, column:Int) -> True|False:
  stagger-pattern(phase(x), row, column)

doc: \<DOC>
Equilateral Triangle Matrix - Similar to Staggered but all pads are equidistant.

TODO - Diagram

<DOC>
public defstruct EquilateralTriangle-Matrix-Planner <: Staggered-Matrix-Planner :
  doc: \<DOC>
  See Staggered Matrix
  <DOC>
  phase:StaggerPhase with:
    as-method => true,
    default => Even-Phase

  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  ; Same as Stagger - must be 2x the number of pads
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)
  doc: \<DOC>
  Equilateral Distance between triangle points
  All pads in this planner are equidistant apart and
  this parameter sets that distance.
  <DOC>
  tri-pitch:Double with:
    ensure => ensure-positive!
with:
  keyword-constructor => true
  printer => true

defmethod pitch (g:EquilateralTriangle-Matrix-Planner) -> Double|Dims :
  val p = tri-pitch(g)
  equilateral-triangle-pitch(p)

doc: \<DOC>
Perimeter Matrix - Full matrix with an island of pads in-active.

TODO - Diagram
<DOC>
public defstruct Perimeter-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  Island of Pads that will be marked inactive.
  Typically, this will be an interior region near
  the center of the device.
  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the inactive region.
  <DOC>
  inactive:PadIsland|Tuple<PadIsland>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;

  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)

with:
  keyword-constructor => true
  printer => true

defn not-inactive? (inactive:PadIsland|Tuple<PadIsland>, row:Int, column:Int) -> True|False :
  match(inactive):
    (island:PadIsland):
      not in-range?(island, row, column)
    (islands:Tuple<PadIsland>):
      for island in islands all?:
        not in-range?(island, row, column)

public defmethod active? (p:Perimeter-Matrix-Planner, row:Int, column:Int) -> True|False :
  not-inactive?(inactive(p), row, column)

doc: \<DOC>
Thermally Enhanced Matrix

TODO - Diagram

<DOC>
public defstruct ThermallyEnhanced-Matrix-Planner <: Perimeter-Matrix-Planner :
  doc: \<DOC>
  Island of Pads that will be marked inactive.
  Typically, this will be an interior region near
  the center of the device.
  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the inactive region.
  <DOC>
  inactive:PadIsland|Tuple<PadIsland> with:
    as-method => true
  doc: \<DOC>
  Island of Pads that will be marked active.
  This island will override the `inactive` island.
  This region is typically an interior region near
  the center of the device and enclosed by the `inactive` island.

  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the active center region.
  <DOC>
  active:PadIsland|Tuple<PadIsland>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;

  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)

with:
  keyword-constructor => true
  printer => true


defn is-active? (active:PadIsland|Tuple<PadIsland>, row:Int, column:Int) -> True|False :
  match(active):
    (island:PadIsland):
      in-range?(island, row, column)
    (islands:Tuple<PadIsland>):
      for island in islands any?:
        in-range?(island, row, column)

public defmethod active? (p:ThermallyEnhanced-Matrix-Planner, row:Int, column:Int) -> True|False :
  is-active?(active(p), row, column) or
    not-inactive?(inactive(p), row, column)

doc: \<DOC>
Corner Cut Matrix - A triangle of pads in each corner are inactive

Example: corner-cut = 2
  ```
    X | X | O  ...  O | X | X
    X | O | O  ...  O | O | X
    O | O | O  ...  O | O | O
       ...     ...     ...
    O | O | O  ...  O | O | O
    X | O | O  ...  O | O | X
    X | X | O  ...  O | X | X
  ```
<DOC>
public defstruct Corner-Cut-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  Width of the triangular region in each corner that will be inactive
  <DOC>
  corner-cut:Int
  pad-config:PadConfig with: (
    as-method => true
    default => DEF-PAD-CONFIG
    )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;

  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0)

with:
  keyword-constructor => true
  printer => true

public defmethod active? (x:Corner-Cut-Matrix-Planner, row:Int, column:Int) -> True|False:
  val r-inv = rows(x) - row - 1
  val c-inv = columns(x) - column - 1
  min(row, r-inv) + min(column, c-inv) >= corner-cut(x)
