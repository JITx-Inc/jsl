doc: \<DOC>
@brief DisplayPort Protocol

DisplayPort is a serial protocol supporting high speed links for video+audio
@see https://en.wikipedia.org/wiki/DisplayPort

This functions and definitions in this file support defining DisplayPort
connections between sources and receivers on a printed circuit board.

## DisplayPort Blocking Capacitors

The DisplayPort specification calls for AC coupling for the data lanes. This is typically
achieved using a blocking capacitor. When connecting two active components, this typically
means blocking caps from `Tx -> Rx` on both sides of the link. When connecting an
active component to a passive component, this typically means adding the blocking caps only on
the `Tx -> Rx` side of the link.

The functions in this module allow you to pass a blocking capacitor as an `Instantiable`.
This component will get instantiated for each leg of the diff-pair. These functions handle
the topology configuration, but the user needs to set a `pin-model` statement on the capacitor component.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/protocols/displayport:
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/errors
  import jsl/si
  import jsl/pin-assignment


public val DISPLAYPORT_NUM_LANES = 4
public val DISPLAYPORT_NUM_CONFIGS = 2

doc: \<DOC>
@brief DisplayPort Generation enums
This is a fixed list of possible generation definitions for DisplayPort
<DOC>

public pcb-enum jsl/protocols/displayport/DPVersion:
  DP1p0  ; 10.80 Gbit/s / 4 lanes =>  2.7 Gbit/s / 10 UI =>  270 MHz clk
  DP1p1  ; 10.80 Gbit/s / 4 lanes =>  2.7 Gbit/s / 10 UI =>  270 MHz clk
  DP1p2  ; 21.60 Gbit/s / 4 lanes =>  5.4 Gbit/s / 10 UI =>  540 MHz clk
  DP1p2a ; 21.60 Gbit/s / 4 lanes =>  5.4 Gbit/s / 10 UI =>  540 MHz clk
  DP1p3  ; 32.40 Gbit/s / 4 lanes =>  8.1 Gbit/s / 10 UI =>  810 MHz clk
  DP1p4  ; 32.40 Gbit/s / 4 lanes =>  8.1 Gbit/s / 10 UI =>  810 MHz clk
  DP1p4a ; 32.40 Gbit/s / 4 lanes =>  8.1 Gbit/s / 10 UI =>  810 MHz clk
  DP2p0  ; 80.00 Gbit/s / 4 lanes => 20.0 Gbit/s / 10 UI => 2000 MHz clk
  DP2p1  ; 80.00 Gbit/s / 4 lanes => 20.0 Gbit/s / 10 UI => 2000 MHz clk
  DP2p1a ; 80.00 Gbit/s / 4 lanes => 20.0 Gbit/s / 10 UI => 2000 MHz clk

doc: \<DOC>
@brief DisplayPort Bundle
The Data Bundle consists of 4 lane pairs (1 RX or TX pair set = 1 lane)
The bundle also constrains an AUX channel (differential pair) and a HPD pin

@member aux Differential pair for the auxiliary channel
@member lane Four differential pairs for data transfer
@member hpd Hot plug detect
<DOC>

public pcb-bundle displayport :
  name = "DisplayPort"
  description = "DisplayPort Digital Display Interface"
  port aux  : diff-pair
  port lane : diff-pair[DISPLAYPORT_NUM_LANES]
  port hpd  : pin ; hot plug detect


doc: \<DOC>
Display Port Bundle for Connectors
This bundle is applicable for connector connections where more than the data lanes are needed.

@member dp DisplayPort bundle for data communication
@member gnd ground connection
@member dp_pwr power bundle for DisplayPort
@member config signals for configuration pins (DISPLAYPORT_NUM_CONFIGS)
<DOC>
public pcb-bundle displayport-connector :
  port dp : displayport
  ; In the connector, there are 5 ground signals but for
  ;  this bundle we only place 1 for simplicity. Once on the board,
  ;  the need for separate ground signals is unnecessary.
  port gnd
  port dp_pwr : power ; DP_PWR and RETURN
  port config : pin[DISPLAYPORT_NUM_CONFIGS]

doc: \<DOC>
@brief Construct a DisplayPort lane.

This function will construct the lane connections of a DisplayPort connection. The `src` and `dst`
arguments must both be of type `displayport`.

@param sw The intra-pair skew time difference for the differential signals being connected.
@param ml The maximum loss in dB for all differential signals being connected.
@param src This is assumed to be the "Tx" side of the link. This is expected to be a port of `Bundle` type `displayport`
@param sink This is assumed to be the "Rx" side of the link. This is expected to be a port of `Bundle` type `displayport`
@param cap Optional DC blocking capacitor to be inserted between the TX and RX pairs. Note that
there are 2 blocking caps inserted, one on each of the P,N signals of the pair.

<DOC>
public defn connect-displayport-lane (sw:Toleranced, ml:Double, src:JITXObject, sink:JITXObject, cap:Instantiable|False) :
  inside pcb-module:
    check-bundle(displayport, src, sink)
    for i in indices(src.lane) do :
      match(cap) :
        (c:Instantiable) :
          inst bl-cap : dp-coupler(c)
          require tx1 : dual-pair from bl-cap
          topo-net(src.lane[i], tx1.A)
          topo-net(tx1.B, sink.lane[i])
        (f:False) :
          topo-net(src.lane[i], sink.lane[i])
      constrain-ch(sw, ml, src.lane[i], sink.lane[i])

doc: \<DOC>
@brief Construct aux connection of a DisplayPort connection.

This function will construct the AUX channel of a DisplayPort connection with the
optional blocking cap and pull-up resistors.
The `src` and `dst` arguments must both be of type `displayport`.

@param sw The intra-pair skew time difference for the differential signals being connected.
@param ml The maximum loss in dB for all differential signals being connected.
@param src This is assumed to be the source side of the link. This is expected to be a port of `Bundle` type `displayport`
@param dst This is assumed to be the sink side of the link. This is expected to be a port of `Bundle` type `displayport`
@param cap Optional DC blocking capacitor to be inserted between the AUX pair. Note that
there are 2 blocking caps inserted, one on each of the P,N signals of the pair.
@param term Optional pull-up resistor and common net to be added to the AUX pair before the capacitor.
Note that there are 2 resistors added, one on each of the P,N signals of the pair. Power supply pin to be
used for the pull-up resistors. Must be valid if the resistors are used.

<DOC>
public defn connect-displayport-aux (sw:Toleranced, ml:Double, src:JITXObject, sink:JITXObject, cap:Instantiable|False, term:[Instantiable, JITXObject]|False) :
  inside pcb-module:
    match(term, cap) :
      (t:[Instantiable, JITXObject], c:Instantiable) :
        inst shunt-r : symmetric-shunt(t[0] as Instantiable)
        inst bl-cap : dp-coupler(c)
        require tx1 : dual-pair from bl-cap
        topo-net(src.aux, shunt-r.A)
        topo-net(shunt-r.B, tx1.A)
        topo-net(tx1.B, sink.aux)
        topo-net(shunt-r.COMMON, t[1] as JITXObject)
      (f:False, c:Instantiable|False) :
        connect-displayport-aux(sw, ml, src, sink, c)
    constrain-ch(sw, ml, src.aux, sink.aux)

public defn connect-displayport-aux (sw:Toleranced, ml:Double, src:JITXObject, sink:JITXObject, cap:Instantiable|False) :
  inside pcb-module:
    match(cap) :
      (c:Instantiable) :
        inst bl-cap : dp-coupler(c)
        require d-p : dual-pair from bl-cap
        topo-net(src.aux, d-p.A)
        topo-net(d-p.B, sink.aux)
      (f:False) :
        topo-net(src.aux, sink.aux)
    constrain-ch(sw, ml, src.aux, sink.aux)

doc: \<DOC>
@brief Construct the DisplayPort Topology and Constraints

This function constructs the DisplayPort topology and applies constraints
to the channel for intra-pair skew and channel loss.

@param sw The intra-pair skew value for the differential signals being connected.
@param ml The maximum loss for all differential signals being connected.
@param src This is expected to be a port of `Bundle` type `displayport`
@param sink This is expected to be a port of `Bundle` type `displayport`
@param cap Optional DC blocking capacitor to be inserted between the src.tx and sink.rx channel. Note that
there are 2 blocking caps inserted, one on each of the pair of P,N signals. The capacitor needs to have
pin models applied to its pins in order for the overall skew and loss values to be respected.

@param term Optional tuple of pull-up resistor and common net to be added to the AUX pair before the capacitor.
Note that there are 2 resistors added, one on each of the P,N signals of the pair. Common net is to be used
for the pull-up resistors and can be a power supply net.
<DOC>
public defn connect-displayport (sw:Toleranced, ml:Double, src:JITXObject, sink:JITXObject, cap:Instantiable|False, term:[Instantiable, JITXObject]|False) :
  inside pcb-module :
    connect-displayport-lane(sw, ml, src, sink, cap)
    connect-displayport-aux(sw, ml, src, sink, cap, term)
    ; no constraints applied to the hot plug detect
    net (src.hpd sink.hpd)


doc: \<DOC>
@brief Curated values for skew and loss of DisplayPort Channel
This is a helper function that returns the bounds on the intra-pair
skew timing and maximum loss as expected by the particular standard targeted by
the user.The values returned are a toleranced value with upper/lower limits for the
intra-pair skew and the maximum loss as a double representing dB.

Calculating the intra-pair skew distance to time correspondence depends on the material.
tpd 147 ps/in 170 ps/in -> 147 fs/mil to 170 fs/mil
@  5 mils spec'ed that is a intra-pair skew of 750 fs to 850 fs
@ 10 mils spec'ed that is a intra-pair skew of 1.50 ps to 1.70 ps
<DOC>

public defn displayport-get-skew-loss-vals (gen:jsl/protocols/displayport/DPVersion) -> [Toleranced, Double]:
  switch(gen) :
    DP1p0  : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p1  : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p2  : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p2a : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p3  : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p4  : [0.0 +/- 20.0e-12, 15.0] ;
    DP1p4a : [0.0 +/- 20.0e-12, 15.0] ;
    DP2p0  : [0.0 +/- 20.0e-12, 15.0] ;
    DP2p1  : [0.0 +/- 20.0e-12, 15.0] ;
    DP2p1a : [0.0 +/- 20.0e-12, 15.0] ;

doc: \<DOC>
@brief Differential impedance specified by the DisplayPort standard
This is a helper function that returns the expected differential
trace impedance for the specified generation of the DisplayPort standard.

@return Upper/lower limits for the impedance.
<DOC>

public defn displayport-get-trace-impedance () -> Toleranced :
  100.0 +/- (10 %)

doc: \<DOC>
@brief Apply the differential routing structure to a DisplayPort bundle.
The function applies the provided DifferentialRoutingStructure
to all of the differential pairs in the start and endpoints. Note that both start and end points
need to be connected to physical component pins either directly or via pin assignment.
@param rs This is the DifferentialRoutingStructure to be used to realize the differential signals.
@param x This is expected to be a port of `Bundle` type `displayport`
@param y This is expected to be a port of `Bundle` type `displayport`
<DOC>

public defn displayport-apply-routing-structure (rs:DifferentialRoutingStructure, x:JITXObject, y:JITXObject) :
  inside pcb-module :
    for i in indices(x.lane) do :
      diff-structure(rs, x.lane[i] => y.lane[i])
    diff-structure(rs, x.aux => y.aux)
