#use-added-syntax(jitx)
defpackage jsl/ensure:
  import core
  import jitx

  import jsl/errors

public defn ensure-positive! (
  field:String,
  value: Int|Long|Double|Float|Toleranced|Dims
  ) :
  val fail = match(value):
    (x:Int): x <= 0
    (x:Long): x <= 0L
    (x:Double): x <= 0.0
    (x:Float): x <= 0.0F
    (t:Toleranced):
      min-value(t) <= 0.0
    (d:Dims):
      x(d) <= 0.0 or y(d) <= 0.0
  if fail:
    throw $ ValueError("%_: Expects Positive Number: %_" % [field, value])

public defn ensure-positive! (
  field:String,
  value?:Maybe<Int|Long|Double|Float|Toleranced|Dims>
) :
  match(value?):
    (x:None): false
    (x:One<Int|Long|Double|Float|Toleranced|Dims>): ensure-positive!(field, value(x))

doc: \<DOC>
Check if the passed value is both positive and even
@throws ValueError when the passed value is not even or positive
@param field Name of the package we are checking
@param value Number to check, typically the number of pins for a particular package.
<DOC>
public defn ensure-even-positive! (
  field:String, value:Int
  ) :
  if value < 2 or value % 2 > 0:
    throw $ ValueError("%_: only supports a positive even number of pins: %_" % [field, value])

doc: \<DOC>
Check for multi-sided components to ensure proper number of pins.
@throws ValueError when the passed value is not divible.
@param value Number to check, typically the number of pins for a particular package.
@param divisor Typically used for the number of sides of a package. Example: 4 for QFN.
@param name Name of the package we are checking
<DOC>
public defn ensure-divisible! (value:Int, divisor:Int, name: String) :
  if not (value > 0):
    throw $ ValueError("%_: Value must be positive: %_" % [name, value])
  if not (divisor > 0):
    throw $ ValueError("%_: Divisor must be positive: %_" % [name, divisor])
  if ((value % divisor) != 0) :
    throw $ ValueError("%_: %_ must be divisible by %_." % [name, value, divisor])

doc: \<DOC>
Check if the value is non-negative (ie, zero or greater)
<DOC>
public defn ensure-non-negative! (field:String, value:Int|Long|Double|Float|Toleranced|Dims):
  val fail = match(value):
    (x:Int): x < 0
    (x:Long): x < 0L
    (x:Double): x < 0.0
    (x:Float): x < 0.0F
    (t:Toleranced):
      min-value(t) < 0.0
    (d:Dims):
      x(d) < 0.0 or y(d) < 0.0
  if fail:
    throw $ ValueError("%_: Expects Non-Negative Number: %_" % [field, value])

public defn ensure-non-negative! (
  field:String,
  value?:Maybe<Int|Long|Double|Float|Toleranced|Dims>
) :
  match(value?):
    (x:None): false
    (x:One<Int|Long|Double|Float|Toleranced|Dims>): ensure-non-negative!(field, value(x))

