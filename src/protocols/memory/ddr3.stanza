doc: \<DOC>
@brief Double Data Rate 3 Memory Standard (DDR3)

DDR3 is a high speed memory protocol
@see https://en.wikipedia.org/wiki/DDR3_SDRAM

The functions and definitions in this file support defining DDR3
connections between microprocessors and memories in a board design.

This file contains curated values for skew and loss of DDR3 channel
It specifies the bounds on the intra-pair
skew timing and maximum loss as expected by this particular standard. The values
returned are a toleranced value with upper/lower limits for the
intra-pair skew and the maximum loss as a double representing dB. Some defaults in the
table are derived from the references listed below.

1. Skew match between CMD/ADDR/CTRL and CK.P is 0.0 +/- 25e-12 (25 ps)
2. Skew match of CK is 0.0 +/- 1.0e-12 (1 ps)
3. Skew match of DQS is 0.0 +/- 1.0e-12 (1 ps)
4. Skew match between DQ and DQS.P within a byte lane is 0.0 +/- 3.5e-12 (3.5 ps)
5. Skew match between CK.P and DQS.P is -75 ps to 900 ps (example values, needs verification)

<DOC>

#use-added-syntax(jitx)
defpackage jsl/protocols/memory/ddr3:
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/errors
  import jsl/ensure
  import jsl/si
  import jsl/pin-assignment

doc: \<DOC>
@brief DDR3 width enums
This is a fixed list of possible lane widths for DDR3 memory channels
@member DDR3-x8   8 bit width
@member DDR3-x16 16 bit width
<DOC>
public pcb-enum jsl/protocols/memory/ddr3/DDR3-width:
  DDR3-x8
  DDR3-x16

doc: \<DOC>
@brief DDR3 Width enum conversion to integers
This converts possible lane widths for ddr3 memory channels into the corresponding integer
@param en DDR3-width enum
@return Integer value corresponding to the width
<DOC>
public defn width-to-int (en:DDR3-width) -> Int:
  switch(en) :
    DDR3-x8  :  8
    DDR3-x16 : 16

doc: \<DOC>
@brief DDR3 Width enum conversion to lane count
This converts possible lane widths for ddr3 memory channels
into the corresponding integer number of 8-bit lanes which
determines the number of DQS pairs required.
@param en DDR3-width enum
@return Integer value corresponding to the lane count
<DOC>
public defn width-to-lane (en:DDR3-width) -> Int:
  switch(en) :
    DDR3-x8  : 1
    DDR3-x16 : 2

doc: \<DOC>
@brief ddr3 topology
This is a fixed list of possible topologies for ddr3 memories
@member DDR3-FlyBy
<DOC>
public pcb-enum jsl/protocols/memory/ddr3/DDR3-topology:
  DDR3-FlyBy

doc: \<DOC>
@brief DDR3 rank Options
This is a fixed list of possible rank options for ddr3 implementations
@member DDR3-SingleRank
@member DDR3-DualRank
@member DDR3-QuadRank
<DOC>
public pcb-enum jsl/protocols/memory/ddr3/DDR3-rank:
  DDR3-SingleRank
  DDR3-DualRank
  DDR3-QuadRank

doc: \<DOC>
@brief DDR3 rank enum conversion to integers
This converts possible rank options for ddr3 memory channels into a corresponding integer
which determines the number of CS_n signals needed to control the memories
@param en DDR3-rank enum
@return Integer value corresponding to the rank
<DOC>
public defn rank-to-int (en:DDR3-rank) -> Int:
  switch(en) :
    DDR3-SingleRank : 1
    DDR3-DualRank   : 2
    DDR3-QuadRank   : 4

doc: \<DOC>
@brief ddr3 Bundle
One ddr3 bundle consists of the connections between an integrated memory controller and
one or more ddr3 memory chips/DIMMs.
@param data Data channel(s) for ddr3 depending on the width
@param acc ACC (address command control) channel for ddr3
@param rank Rank configuration of the DDR3 memory (DDR3-SingleRank, DDR3-DualRank, or DDR3-QuadRank)
@param topology Topology of the DDR3 connection (DDR3-FlyBy or DDR3-ClamShell)
@param BA-len Number of BA pins
<DOC>

public defn ddr3 (width:DDR3-width -- rank:DDR3-rank = DDR3-SingleRank, topology:DDR3-topology = DDR3-FlyBy, BA-len:Int = 3) :
  if width == DDR3-x16 and rank == DDR3-QuadRank:
    throw(ArgumentError("DDR3-x16 is not supported in DDR3-QuadRank configuration"))
  ddr3-b(width, rank, topology, BA-len)

public pcb-bundle ddr3-b (width:DDR3-width, rank:DDR3-rank, topology:DDR3-topology, BA-len:Int) :
  name = "DDR3"
  description = "DDR3 Dynamic Random-Access Memory protocol"
  port data    : ddr3-data-channel(width) ;
  port acc     : ddr3-acc-channel(rank, BA-len) ; covers all CMD/CTRL/ADDR

public pcb-bundle ddr3-data-channel (width:DDR3-width):
  port DQ    : pin[width-to-int(width)] ; will vary from 3:0 to 7:0 to 15:0 to 71:0 as appropriate
  port DQS   : diff-pair[width-to-lane(width)] ; will either be 0 or 1:0 to 8:0
  port DM    : pin[width-to-lane(width)] ; data mask per 8b lane (note: DDR3 uses DM, not DM_n)

public pcb-bundle ddr3-acc-channel (rank:DDR3-rank, BA-len:Int):
  port CK      : diff-pair
  port CKE     : pin
  port A       : pin[15]  ; DDR3 typically has 15 address lines compared to 17 in DDR4
  port RAS_n   : pin      ; DDR3 has separate RAS_n, CAS_n, WE_n unlike DDR4
  port CAS_n   : pin
  port WE_n    : pin
  port BA      : pin[BA-len]   ; DDR3 has 3 bank address lines (no BG)
  port CS_n    : pin[rank-to-int(rank)]
  port RESET_n : pin
  port ODT     : pin[rank-to-int(rank)]

doc: \<DOC>
@brief Differential impedance specified by the DDR3 standard
This is a helper defstruct that holds the expected differential
trace impedance for the standard.

@return Upper/lower limits for the impedance in a struct.
<DOC>
public defstruct DDR3-Impedances <: Equalable:
  ck-imped:Toleranced with:
     default => 90.0 +/- (5 %)
  dqs-imped:Toleranced with:
     default => 100.0 +/- (5 %)
  dq-imped:Toleranced with:
    default => 50.0 +/- (5 %)
  acc-imped:Toleranced with:
    default => 45.0 +/- (5 %)
with:
  printer => true
  keyword-constructor => true
  equalable => true

doc: \<DOC>
DDR3 SI Constraint Type

This derives from the whole data lane constraint as most of the dq signals
are single-ended but referenced to the dqs pairs. The remainder of the signals are
constrained to the CK pair. The constraints are:

    0.0 +/-    1.0e-12   ; Intra-pair skew match of CK is +/- 1 ps
    0.0 +/-    1.0e-12   ; Intra-pair skew match of DQS is +/- 1 ps
  -75.0e-12 +900.0e-12   ; Skew match between CK.P and DQS.P -75 ps to 900 ps (example values, needs verification)
    0.0 +/-    3.5e-12   ; Skew match between DQ and DQS.P within a byte lane is +/- 3.5 ps
    0.0 +/-   25.0e-12   ; Skew match between CMD/ADDR/CTRL and CK.P +/- 25 ps

<DOC>

doc: \<DOC>
Constructor for the DDR3 Data ACC Inter-signal timing skew constraint
<DOC>
public defstruct DDR3-Data-ACC-Constraint <: SI-Constraint :
  doc: \<DOC>
  CK.P to DQS.P Inter-signal Timing Skew Constraint in Seconds
  <DOC>
  skew-ck-dqs:Toleranced with :
    default => min-typ-max(-75.0e-12, 0.0, 900.0e-12)
with:
  keyword-constructor => true
  constructor => #DDR3-Data-ACC-Constraint

doc: \<DOC>
Constructor for the DDR3 Data Link Constraint
<DOC>
public defstruct DDR3-Data-Constraint <: SI-Constraint :
  doc: \<DOC>
  DQS Intra-pair Timing Skew Constraint in Seconds
  <DOC>
  skew-dqs:Toleranced with :
    default => 0.0 +/- 1.00e-12
  doc: \<DOC>
  DQ to DQS Inter-pair Timing Skew Constraint in Seconds
  <DOC>
  skew-dq-dqs:Toleranced with :
    default => 0.0 +/- 3.50e-12
  doc: \<DOC>
  DM_n to DQS.P Timing Skew Constraint in Seconds
  <DOC>
  skew-dm-dqs:Toleranced with:
    default => 0.0 +/- 3.50e-12 ; Same as DQ timing
  doc: \<DOC>
  Diff-Pair Max Loss Limit Constraint in dB
  <DOC>
  loss:Double with:
    ensure => ensure-positive!,
    default => 5.0
  doc: \<DOC>
  Differential Routing Structure for DQS [100.0 Ohms +/- (5 %)]
  <DOC>
  diff-dqs-rs:DifferentialRoutingStructure
  doc: \<DOC>
  Single-Ended Routing Structure for each DQ signal as well as the DM_n signal [50.0 Ohms +/- (5 %)]
  <DOC>
  se-dq-rs:RoutingStructure
with:
  keyword-constructor => true
  constructor => #DDR3-Data-Constraint

doc: \<DOC>
Constructor for the DDR3 ACC Link Constraint
<DOC>
public defstruct DDR3-ACC-Constraint <: SI-Constraint :
  doc: \<DOC>
  CK Intra-pair Timing Skew Constraint in Seconds
  <DOC>
  skew-ck:Toleranced with :
    default => 0.0 +/- 1.00e-12
  doc: \<DOC>
  CMD/ADDR/CTRL to CK Inter-pair Timing Skew Constraint in Seconds
  <DOC>
  skew-cmd-addr-ctrl-ck:Toleranced with :
    default => 0.0 +/- 25.0e-12
  doc: \<DOC>
  CMD, ADDR, CTRL (w/o CK) Intra-group Timing Skew Constraint in Seconds
  <DOC>
  skew-cmd-addr-ctrl:Toleranced  with:
    default =>  0.0 +/- 12.0e-12
  doc: \<DOC>
  Diff-Pair Max Loss Limit Constraint in dB
  <DOC>
  loss:Double with:
    ensure => ensure-positive!,
    default => 5.0
  doc: \<DOC>
  Differential Routing Structure for CK  [90.0 Ohms +/- (5 %)]
  <DOC>
  diff-ck-rs:DifferentialRoutingStructure
  doc: \<DOC>
  Single-Ended Routing Structure for all other SE signal [45.0 Ohms +/- (5 %)]
  <DOC>
  se-rs:RoutingStructure
with:
  keyword-constructor => true
  constructor => #DDR3-ACC-Constraint


public defstruct DDR3-Constraint <: SI-Constraint :
  doc: \<DOC>
  Channel Bit Width
  <DOC>
  width:DDR3-width
  doc: \<DOC>
  Topology of memory channel
  <DOC>
  topology:DDR3-topology
  doc: \<DOC>
  Channel Rank
  <DOC>
  rank:DDR3-rank
  doc: \<DOC>
  Differential Routing Structure for CK  [90.0 +/- (5 %)]
  <DOC>
  diff-ck-rs:DifferentialRoutingStructure
  doc: \<DOC>
  Differential Routing Structure for DQS [100.0 +/- (5 %)]
  <DOC>
  diff-dqs-rs:DifferentialRoutingStructure
  doc: \<DOC>
  Single-Ended Routing Structure for each DQ signal [50.0 +/- (5 %)]
  <DOC>
  se-dq-rs:RoutingStructure
  doc: \<DOC>
  Single-Ended Routing Structure for all other SE signal [45.0 +/- (5 %)]
  <DOC>
  se-rs:RoutingStructure

  doc: \<DOC>
  Data Link Constraint
  <DOC>
  data-cst:DDR3-Data-Constraint with:
    default => DDR3-Data-Constraint(diff-dqs-rs = diff-dqs-rs, se-dq-rs = se-dq-rs)
  doc: \<DOC>
  ACC Link Constraint
  <DOC>
  acc-cst:DDR3-ACC-Constraint with:
    default => DDR3-ACC-Constraint(diff-ck-rs = diff-ck-rs, se-rs = se-rs)
  doc: \<DOC>
  Data To ACC Constraint
  <DOC>
  data-acc-cst:DDR3-Data-ACC-Constraint with:
    default => DDR3-Data-ACC-Constraint()
with:
  keyword-constructor => true
  constructor => #DDR3-Constraint


doc: \<DOC>
Constructor for the DDR3 Link Constraint
@param ck-rs Differential Routing Structure constraints for CK signals
@param dqs-rs Differential Routing Structure constraints for DQS signals
@param dq-rs Routing Structure constraints for DQ signals
@param rs Routing Structure constraints for remaining signals (CMD/CTRL/ADDR)
@param data-cst Data Link sub-constraint
@param acc-cst ACC Link sub-constraint
@param data-acc-cst Data To ACC sub-constraint
<DOC>
public defn DDR3-Constraint (
    width:DDR3-width,
    topology:DDR3-topology,
    rank:DDR3-rank,
    diff-ck-rs:DifferentialRoutingStructure,
    diff-dqs-rs:DifferentialRoutingStructure,
    se-dq-rs:RoutingStructure,
    se-rs:RoutingStructure,
    data-cst:DDR3-Data-Constraint,
    acc-cst:DDR3-ACC-Constraint,
    data-acc-cst:DDR3-Data-ACC-Constraint ) -> DDR3-Constraint:
  DDR3-Constraint(
    width = width,
    topology = topology,
    rank = rank,
    diff-ck-rs = diff-ck-rs,
    diff-dqs-rs = diff-dqs-rs,
    se-dq-rs = se-dq-rs,
    se-rs = se-rs,
    data-cst = data-cst,
    acc-cst = acc-cst,
    data-acc-cst = data-acc-cst
  )


doc: \<DOC>
Constrain a DDR3 Link assuming that it is a discrete link (not DIMM)

@param cst Constraint Object
@param src Source End Point - must be of `ddr3-b` type
@param dst Destination End Point - must be of `ddr3-b` type and match
the parameterization of `src`, including width.
<DOC>
public defmethod constrain (cst:DDR3-Constraint, src:JITXObject, dst:JITXObject) -> False :
  inside pcb-module:
    constrain(data-cst(cst), src.data, dst.data)
    constrain(acc-cst(cst), src.acc, dst.acc)
    constrain(data-acc-cst(cst), src, dst)

doc: \<DOC>
Helper function to connect and constrain a DDR3 link assuming that it is a discrete point to point link (not FlyBy)
@param src Source End Point - must be of `ddr3-b` type
@param dst Destination End Point - must be of `ddr3-b` type and match
the parameterization of `src`, including width.
<DOC>


public defn connect-DDR3 (src:JITXObject, dst:JITXObject
                          -- width:DDR3-width = DDR3-x16,
                          topology:DDR3-topology = DDR3-FlyBy,
                          rank:DDR3-rank = DDR3-SingleRank,
                          diff-ck-rs:DifferentialRoutingStructure,
                          diff-dqs-rs:DifferentialRoutingStructure,
                          dq-rs:RoutingStructure,
                          rs:RoutingStructure) :
  inside pcb-module :
    val ddr3-cst = DDR3-Constraint(width = width,
                                   topology = topology,
                                   rank = rank,
                                   diff-ck-rs = diff-ck-rs,
                                   diff-dqs-rs = diff-dqs-rs,
                                   se-dq-rs = dq-rs,
                                   se-rs = rs)
    constrain-topology(src, dst, ddr3-cst)

doc: \<DOC>
Constrain a DDR3 Data to ACC Link assuming that it is a discrete link (not DIMM or combined data/control)

@param cst Data to ACC channel constraint object
@param src Source end point - must be of `ddr3-b` type
@param dst Destination end point - must be of `ddr3-b` type and match
the parameterization of `src`, including width.
<DOC>

public defmethod constrain (cst:DDR3-Data-ACC-Constraint, src:JITXObject, dst:JITXObject) -> False :
  inside pcb-module :
    val guide-ck  = src.acc.CK[0].P => dst.acc.CK[0].P

    for i in 0 to length(src.data.DQS) do :
      val guide-dqs = src.data.DQS[i].P => dst.data.DQS[i].P
      ; constrain DQS with respect to CK
      timing-window(skew-ck-dqs(cst), guide-ck, guide-dqs)

doc: \<DOC>
Constrain a DDR3 Data Link assuming that it is a discrete link (not DIMM or combined data/control)

@param cst Data channel constraint object
@param src Source end point - must be of `ddr3-data-channel` type
@param dst Destination end point - must be of `ddr3-data-channel` type and match
the parameterization of `src`, including width.
<DOC>
public defmethod constrain (cst:DDR3-Data-Constraint, src:JITXObject, dst:JITXObject) -> False :
  inside pcb-module:
    val cst-dqs = DiffPair-Constraint(skew = skew-dqs(cst), loss = loss(cst), route-struct = diff-dqs-rs(cst))
    ; ex. for x8,  i goes from 0 to 1, so all of the byte lanes are individually constrained
    ; ex. for x16, i goes from 0 to 2, so all of the byte lanes are individually constrained
    ; ex. for x72, i goes from 0 to 9, so all of the byte lanes are individually constrained
    for i in 0 to length(src.DQS) do :
      ; constrain DQS per byte lane
      val guide-dqs = src.DQS[i].P => dst.DQS[i].P
      constrain(cst-dqs, src.DQS[i], dst.DQS[i])
      ; constrain DQ with respect to DQS
      val bs = i * 8
      val be = bs + 8
      val target-dqm-bus = to-tuple $ cat{_, [src.DM_n[i] => dst.DM_n[i]]} $ for j in bs to be seq : src.DQ[j] => dst.DQ[j]
      timing-window(skew-dq-dqs(cst), guide-dqs, topos = target-dqm-bus)
      max-loss(loss(cst), ep-sets = target-dqm-bus)
    ; needs to be outside the loop as structure() can't handle a Tuple<KeyValue> argument
    ; this statement will handle the entire DQ bus
    structure(src.DQ, dst.DQ) = se-dq-rs(cst)
    ; this statement will handle the DM_n signal
    structure(src.DM_n, dst.DM_n) = se-dq-rs(cst)

doc: \<DOC>
Constrain a DDR3 ACC Link assuming that it is a discrete link (not DIMM or combined data/control)

@param cst ACC channel constraint object
@param src Source end point - must be of `ddr3-acc-channel` type
@param dst Destination end point - must be of `ddr3-acc-channel` type and match
the parameterization of `src`, including rank.
<DOC>
public defmethod constrain (cst:DDR3-ACC-Constraint, src:JITXObject, dst:JITXObject) -> False :
  inside pcb-module:

    val cst-ck  = DiffPair-Constraint(skew = skew-ck(cst), loss = loss(cst), route-struct = diff-ck-rs(cst))

    ; constrain first CK as root to others with the same tight constraint?
    val guide-cks = src.CK[0].P => dst.CK[0].P

    for i in 0 to length(src.CK) do :
      val guide-ck = src.CK[i].P => dst.CK[i].P
      constrain(cst-ck, src.CK[i], dst.CK[i])
      if i > 0 :
        timing-window(skew-ck(cst), guide-cks,  src.CK[i] => dst.CK[i])

    ; now constrain addr/cmd/ctrl signals (1x per bus)
    ; there are two constraints to be applied:
    ; First is versus CK and is +/- 20 ps
    ; Second is versus the other signals in the same group and is +/- 10 ps
    ; let's pick an arbitrary signal to serve as the guide for the overall ADDR/CMD/CTL group
    val guide-acc-group = src.CKE[0] => dst.CKE[0]
    ; now back to our regularly scheduled program
    for j in 0 to length(src.CKE) do :
      val target-cke = src.CKE[j] => dst.CKE[j]
      timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-cke)
      ; no need for timing-window for the CKE signal versus guide-acc-group as it's defining the group timing constraint
      structure(target-cke) = se-rs(cst)
      max-loss(loss(cst), target-cke)
    for j in 0 to length(src.A) do :
      val target-addr = src.A[j] => dst.A[j]
      timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-addr)
      timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-addr)
      structure(target-addr) = se-rs(cst)
      max-loss(loss(cst), target-addr)
    for j in 0 to length(src.BA) do :
      val target-ba = src.BA[j] => dst.BA[j]
      timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-ba)
      timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-ba)
      structure(target-ba) = se-rs(cst)
      max-loss(loss(cst), target-ba)
    for j in 0 to length(src.CS_n) do:
      val target-cs = src.CS_n[j] => dst.CS_n[j]
      timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-cs)
      timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-cs)
      structure(target-cs) = se-rs(cst)
      max-loss(loss(cst), target-cs)
    val target-reset = src.RESET_n => dst.RESET_n
    timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-reset)
    timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-reset)
    structure(target-reset) = se-rs(cst)
    max-loss(loss(cst), target-reset)
    for j in 0 to length(src.ODT) do :
      val target-odt = src.ODT[j] => dst.ODT[j]
      timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-odt)
      timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-odt)
      structure(target-odt) = se-rs(cst)
      max-loss(loss(cst), target-odt)
    val target-ras = src.RAS_n => dst.RAS_n
    timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-ras)
    timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-ras)
    structure(target-ras) = se-rs(cst)
    max-loss(loss(cst), target-ras)
    val target-cas = src.CAS_n => dst.CAS_n
    timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-cas)
    timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-cas)
    structure(target-cas) = se-rs(cst)
    max-loss(loss(cst), target-cas)
    val target-we = src.WE_n => dst.WE_n
    timing-window(skew-cmd-addr-ctrl-ck(cst), guide-cks, target-we)
    timing-window(skew-cmd-addr-ctrl(cst), guide-acc-group, target-we)
    structure(target-we) = se-rs(cst)
    max-loss(loss(cst), target-we)

