#use-added-syntax(jitx)
defpackage jsl/examples/components/QuadAND:
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/design/settings
  import jsl/symbols
  import jsl/landpatterns

  import jsl/examples/landpatterns/board

pcb-component QuadAND:
  manufacturer = "onsemi"
  mpn = "MC74HC08ADR2G"
  datasheet = "https://www.onsemi.com/pdf/datasheet/mc74hc08a-d.pdf"

  val num-circuits = 4
  ;  These are explicit Gate Ports for the AND
  ;  gates. You would use these ports when
  ;  you explicitly want to use a particular channel of the
  ;  device.
  ;
  ;  Otherwise - see below for the pin assignment supports statements.
  port AND : gate(2)[num-circuits]
  port rail : power

  pin-properties:
    [pin:Ref | pads:Int ... | side:Dir | bank:Int]
    [AND[0].in[1] | 1       | Left        | 0  ]
    [AND[0].in[2] | 2       | Left        | 0  ]
    [AND[0].out   | 3       | Right       | 0  ]

    [AND[1].in[1] | 4       | Left        | 1  ]
    [AND[1].in[2] | 5       | Left        | 1  ]
    [AND[1].out   | 6       | Right       | 1  ]

    [AND[2].in[1] | 9       | Left        | 2  ]
    [AND[2].in[2] | 10      | Left        | 2  ]
    [AND[2].out   | 8       | Right       | 2  ]

    [AND[3].in[1] | 12      | Left        | 3  ]
    [AND[3].in[2] | 13      | Left        | 3  ]
    [AND[3].out   | 11      | Right       | 3  ]

    [rail.V-      | 7       | Left        | 4  ]
    [rail.V+      | 14      | Right       | 4  ]

  val gate-symbs = for i in 0 to num-circuits seq:
    i => create-symbol $ ANDGateSymbol(
      in-ref = #R(AND[i].in)
      out-ref = #R(AND[i].out)
    )
  val symbs = to-tuple $ cat(gate-symbs, [4 => BoxSymbol(self)])
  assign-symbols(symbs)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = min-max(8.55, 8.75)
    density-level = DensityLevelB
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

  ; Setup the Gate Supports statements.
  ;  These allow the gates to be used in the
  ;  pin assignment solution and not explicitly
  ;  allocated.
  for i in 0 to num-circuits do:
    make-gate-supports(
      self.AND[i].out,
      self.AND[i].in[1],
      self.AND[i].in[2]
      )


pcb-module test-design:
  inst U1 : QuadAND
  place(U1) at loc(0.0, 0.0) on Top

  require G1:gate(2) from U1
  require G2:gate(2) from U1
  require G3:gate(2) from U1
  require G4:gate(2) from U1

  net (G1.out, G2.in[1])
  net (G3.out, G2.in[2])
  net (G4.out, G3.in[1], G1.in[2])

val board-shape = RoundedRectangle(50.0, 50.0, 0.25)

; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("Quad-AND-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(test-design)

; Use any helper function from helpers.stanza here. For example:
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()