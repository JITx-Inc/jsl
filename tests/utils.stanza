#use-added-syntax(jitx, tests)
defpackage jsl/tests/utils:
  import core
  import collections
  import jitx
  import jitx/commands

#if-defined(TESTING) :
  public defn expect-throw (f) -> Maybe<String>:
    val res = try :
      val unexpected = f()
      None()
    catch (e:Exception) :
      val msg = to-string("%~" % [e])
      One(msg)
    #EXPECT(res is-not None)
    res

  ; Setup default rules for the unit tests
  ;  When attempting to extract the ESIR for a definition
  ;  this needs to be set.
  public pcb-rules default-rules :
    min-copper-width = 0.13 ; 5mil
    min-copper-copper-space = 0.2 ;
    min-copper-hole-space = 0.2032 ; 8mil
    min-copper-edge-space = 0.381 ; 10mil outer, but 15mil inner
    min-annular-ring = 0.1524 ; 6mil
    min-drill-diameter = 0.254 ; 10mil
    min-silkscreen-width = 0.0762 ; 3mil
    min-pitch-leaded = 0.35 ; guess
    min-pitch-bga = 0.35 ; guess
    max-board-width = 457.2 ; 18in
    max-board-height = 609.6 ; 24in
    solder-mask-registration = 0.15
    min-silk-solder-mask-space = 0.15
    min-silkscreen-text-height = 0.762
    min-th-pad-expand-outer = 0.15
    min-soldermask-opening = 0.152
    min-soldermask-bridge = 0.102
    min-hole-to-hole = 0.254
    min-pth-pin-solder-clearance = 3.0
  set-rules(default-rules)

  val DEF-EPS = 1.0e-6

  public defn almost-equal? (a:Double, b:Double, eps = DEF-EPS) -> True|False :
    abs(a - b) < eps

  public defn almost-equal? (A:Seqable<Double>, B:Seqable<Double>, eps = DEF-EPS) -> True|False :
    label<True|False> return:
      val A* = to-tuple(A)
      val B* = to-tuple(B)
      if length(A*) != length(A*):
        return(false)
      return $ for (a in A*, b in B*) all? :
        almost-equal?(a, b, eps)

  public defn almost-equal? (a:Point|Dims, b:Point|Dims, eps = DEF-EPS) -> True|False :
    val checks = [
      almost-equal?(x(a), x(b), eps),
      almost-equal?(y(a), y(b), eps)
    ]
    all?({_}, checks)

  public defn almost-equal? (a:Pose, b:Pose, eps = DEF-EPS) -> True|False :
    val checks = [
      almost-equal?(center(a), center(b), eps),
      almost-equal?(angle(a), angle(b), eps),
      flip-x?(a) == flip-x?(b)
    ]
    all?({_}, checks)

  public defn almost-equal? (a:Rectangle, b:Rectangle) -> True|False :
    val checks = [
      almost-equal?(pose(a), pose(b)),
      almost-equal?(width(a), width(b)),
      almost-equal?(height(a), height(b)),
    ]
    all?({_}, checks)

  public defn almost-equal? (a:Circle, b:Circle) -> True|False :
    val checks = [
      almost-equal?(center(a), center(b)),
      almost-equal?(radius(a), radius(b)),
    ]
    all?({_}, checks)

  public defn almost-equal? (a:Line, b:Line) -> True|False :
    label<True|False> return:
      if length(points(a)) != length(points(b)) :
        return(false)

      val checks = to-vector<True|False> $ for (pt-a in points(a), pt-b in points(b)) seq:
        almost-equal?(pt-a, pt-b)
      add(checks, width(a) == width(b))

      return $ all?({_}, checks)

  public defn almost-equal? (a:Text, b:Text) -> True|False :
    val checks = [
      string(a) == string(b),
      almost-equal?(size(a), size(b)),
      almost-equal?(pose(a), pose(b)),
      anchor(a) == anchor(b)
    ]
    all?({_}, checks)

  public defn almost-equal? (a:Polygon, b:Polygon) -> True|False :
    label<True|False> return:
      if length(points(a)) != length(points(b)) :
        return(false)

      val checks = to-vector<True|False> $ for (pt-a in points(a), pt-b in points(b)) seq:
        almost-equal?(pt-a, pt-b)

      return $ all?({_}, checks)

