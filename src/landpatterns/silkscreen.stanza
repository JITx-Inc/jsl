#use-added-syntax(jitx)
defpackage jsl/landpatterns/silkscreen:
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/ensure
  import jsl/errors
  import jsl/geometry/box
  import jsl/geometry/LineRectangle
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/helpers
  import jsl/landpatterns/leads
  import jsl/landpatterns/package-body

public defn default-silk-width () -> Double :
  clearance(current-rules(), MinSilkscreenWidth)

public defn default-mask-clearance () -> Double :
  clearance(current-rules(), MinSilkSolderMaskSpace)

doc: \<DOC>
Base Type for Silkscreen Outline Generators

The user should derive from this type and implement
its interface to construct the silkscreen outline
for a component.
<DOC>
public deftype SilkscreenOutline

public defmulti build-shape (s:SilkscreenOutline, vp:VirtualLP -- side:Side = Top) -> Shape

doc: \<DOC>
Build Component Outline Silkscreen Content in VirtualLP

This is the interface for the silkscreen outline generator
function that will construct the silkscreen geometry in
the `VirtualLP` scene graph.

@param s Silkscreen Outline Object
@param vp Virtual LandPattern Scene Graph. User can introspect
the scene graph through this object then construct the
appropriate new geometry.

<DOC>
public defmulti build-outline (s:SilkscreenOutline, vp:VirtualLP -- side:Side = Top)

doc: \<DOC>
Default Implementation for Build Component Outline

This method uses the `build-shape` method to contruct the
silkscreen content and then applies it to the VirtaulLP scene graph.
<DOC>
public defmethod build-outline (s:SilkscreenOutline, vp:VirtualLP -- side:Side = Top) :
  val sh = build-shape(s, vp, side = side)
  add-silkscreen-outline(vp, sh, side = side)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Package Body Outline
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

doc: \<DOC>
Silkscreen Outline Generator that follows the Package Body
<DOC>
public defstruct PackageOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()
  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true

public defmethod build-shape (s:PackageOutline, vp:VirtualLP -- side:Side = Top) -> Shape :
  val pkg-outline = bounds $ envelope(pkg-body(s), density-level = density-level(s))
  val lw = line-width(s)
  val pkg-outline* = fatten(lw / 2.0, pkg-outline)

  ; TODO - I want to use `Difference` here will all of the soldermask openings
  ;  defined by the pads.

  LineRectangle(pkg-outline*, line-width = lw)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Overall Outline

public defstruct OverallOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()
  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true

public defmethod build-shape (s:OverallOutline, vp:VirtualLP -- side:Side = Top ) -> Shape :
  val pkg-outline = bounds $ envelope(pkg-body(s), density-level = density-level(s))
  val pad-outline* = bounds(get-pads(vp), layer-spec = SolderMask(side))
  val pad-outline = fatten(mask-clearance(s), pad-outline*)
  val overall = union(pkg-outline, pad-outline)
  val lw = line-width(s)
  val overall* = fatten(lw / 2.0, overall)
  LineRectangle(overall*, line-width = lw)


doc: \<DOC>
Create an interstitial silkscreen outline.

The interstitial outline is formed between the
pads, typically underneath the component package body.
It may or may not be seen after the component has been
installed.

This is most useful for packages like QFP, SOIC, SSOP,
and similar packages. It also works for 2-pin SMT
and through-hole components.
<DOC>
public defstruct InterstitialOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()

  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true


public defmethod build-shape (s:InterstitialOutline, vp:VirtualLP -- side:Side = Top) -> Shape :
  ; Package bounding box
  val pkg-outline = bounds $ envelope(pkg-body(s), density-level = density-level(s))
  ; Interior outline of pads; shrunk by soldermask-clearance
  val lw = line-width(s)
  val pad-interior = pad-interior-bounds(vp, side)
  val pad-interior* = shrink(mask-clearance(s) + lw / 2.0, pad-interior)
  ; Select smaller box
  val pkg-outline* =
    if area(pkg-outline) < area(pad-interior) : pkg-outline
    else : pad-interior*
  LineRectangle(pkg-outline*, line-width = lw)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Extrema Outlines
;

doc: \<DOC>
Selector for whether the edge lines are
drawn on the Top / Bottom sides (N/S) or the Left/Right sides (E/W)
@member NS-Edge
@member EW-Edge
<DOC>
public defenum SilkscreenEdge :
  NS-Edge
  EW-Edge

public defstruct EdgesOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  edge:SilkscreenEdge with:
    default => NS-Edge
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()
  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true

public defmethod build-shape (s:EdgesOutline, vp:VirtualLP -- side:Side = Top) -> Shape :

  val outline = get-extended-pkg-outline(
    vp,
    pkg-body(s)
    density-level(s)
    line-width(s)
    mask-clearance(s)
    side
    edge(s)
  )

  construct-pkg-extrema-lines(
    vp, pkg-body(s),
    density-level = density-level(s)
    line-width = line-width(s)
    mask-clearance = mask-clearance(s)
    side = side
    edge = edge(s)
  )


public defstruct InteriorEdgesOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  edge:SilkscreenEdge with:
    default => NS-Edge
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()
  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true


public defmethod build-shape (s:InteriorEdgesOutline, vp:VirtualLP -- side:Side = Top) -> Shape :
  ; Package bounding box
  val pkg-outline = bounds $ envelope(pkg-body(s), density-level = density-level(s))
  ; Interior outline of pads; shrunk by soldermask-clearance
  val lw = line-width(s)
  val pad-interior = try:
    compute-interior-pad-space(s, vp, side = side)
  catch (e:ValueError):
    println("Not enough interior space for Edge Outline - Try SingleLineOutline")
    throw(e)

  ; Select smaller box
  val pkg-outline* =
    if area(pkg-outline) < area(pad-interior) : pkg-outline
    else : pad-interior

  val [sw, se, ne, nw] = corners(pkg-outline*)

  val line-eps = switch(edge(s)):
    NS-Edge:
      [[nw, ne], [sw, se]]
    EW-Edge:
      [[nw, sw], [ne, se]]

  ; Want to difference with the soldermask openings

  Union $ to-tuple $ for line-ep in line-eps seq:
    Line(lw, line-ep)

defn compute-interior-pad-space (s:InteriorEdgesOutline, vp:VirtualLP -- side:Side = Top) -> Box :
  val lw = line-width(s)
  val pad-interior = pad-interior-bounds(vp, side)
  shrink(mask-clearance(s) + lw / 2.0, pad-interior)

public defn has-enough-interior-space? (s:InteriorEdgesOutline, vp:VirtualLP -- side:Side = Top) -> True|False:
  try:
    compute-interior-pad-space(s, vp, side = side)
    true
  catch (e:NegativeBoxError):
    false

public defstruct SingleLineOutline <: SilkscreenOutline :
  doc: \<DOC>
  Package Body Dimensions
  These dimensions will be projected on to the board
  to construct the outline.
  <DOC>
  pkg-body:PackageBody
  edge:SilkscreenEdge with:
    default => EW-Edge
  doc: \<DOC>
  Line Width for the constructed silkscreen outline
  By default we use the `MinSilkscreenWidth` from the design rules.
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    default => default-silk-width()
  doc: \<DOC>
  Clearance from silkscreen to the soldermask
  By default we use the `MinSilkSolderMaskSpace` from the
  design rules.
  <DOC>
  mask-clearance:Double with:
    ensure => ensure-non-negative!
    default => default-mask-clearance()
  doc: \<DOC>
  Density Level Specification
  This determines whether we use:
  *  Maximum Material Condition
  *  Nominal Material Condition
  *  Least Material Condition

  of the package body to construct the outline.
  <DOC>
  density-level:DensityLevel with:
    default => DENSITY-LEVEL
with:
  printer => true
  keyword-constructor => true


public defmethod build-shape (s:SingleLineOutline, vp:VirtualLP -- side:Side = Top) -> Shape :
  val pkg-outline = bounds $ envelope(pkg-body(s), density-level = density-level(s))

  switch(edge(s)):
    NS-Edge:
      Line(line-width(s), [Point(0.0, up(pkg-outline)), Point(0.0, down(pkg-outline))])
    EW-Edge:
      Line(line-width(s), [Point(left(pkg-outline), 0.0), Point(right(pkg-outline), 0.0)])

doc: \<DOC>
Compute the closest corner of the passed Box to the Pin1 position.

This tool is used to determine what to place pin 1
markers in a component's silkscreen.

@param pin-1-pos Position of the Pin 1 pad.
@param outline-box Box that represents the silkscreen
outline of the component.
<DOC>
public defn compute-closest-corner (
  pin-1-pos:Point,
  outline-box:Box
  ):
  val corners = corners(outline-box)

  defn compute-dist (x:Point) -> Double:
    l2-norm(x - pin-1-pos)

  minimum(compute-dist, corners)

doc: \<DOC>
Compute the Corner Anchor Position.

Given a point on the outline box that is closest
to pin 1 - compute the anchor position. For example,
if pin 1 is in the top left and the closest corner is
in the top-left, this would be the `NW` anchor position.
@param closest Closest point on the outline
<DOC>
public defn compute-corner (closest:Point) -> Anchor :
  val angle = atan2(y(closest), x(closest))
  if angle > (PI / 2.0): NW
  else if angle < (- PI / 2.0): SW
  else if angle < 0.0: SE
  else: NE

doc: \<DOC>
Compute the rotation of the shape pattern for a particular anchor

We typically position the triangle marker or pin 1 dot
marker by transforming its base configuration. This means
translating and rotating it to fit in one of the outline
corners.

This method takes the corner anchor position and converts
it to rotation angle for a shape pattern.
<DOC>
public defn corner-to-rotation (corner:Anchor) -> Double :
  switch(corner):
    NW: 0.0
    SW: 90.0
    SE: 180.0
    NE: -90.0

doc: \<DOC>
Create a shape for the triangle corner marker

This is often used in a rectangular outlines for marking the
the pin-1 indication in one of the corners of the outline.

This function creates a shape that is a solid, isosceles right triangle (polygon)
in the lower right quadrant of the XY plane. It is then offset
from the X and Y axis (toward the lower right quandrant) by
half the line-width
<DOC>
public defn create-corner-marker-shape (line-width:Double, marker-height:Double) -> Shape :
  val st-offset = line-width / 2.0
  loc(st-offset, (- st-offset)) * Polygon([
    Point(0.0, 0.0),
    Point(marker-height, 0.0),
    Point(0.0, (- marker-height))
    ])


doc: \<DOC>
Compute the Triangle Marker Shape for Pin-1 outline

@param pin-1-pos Position of the pin 1 pad
@param outline-box Silkscreen outline as a 2D box.
@param line-width Silkscreen line width - primarily
used for positioning and not for drawing lines.
@param max-height Max triangle marker height. This
function attempts to compute a reasonable marker size
based on the component's scale. This is a limiter to
prevent unnecessarily large triangle marker features.
<DOC>
public defn compute-triangle-marker (
  pin-1-pos:Point,
  outline-box:Box,
  line-width:Double,
  max-height:Double = 1.25
  ) -> Shape:

  val closest = compute-closest-corner(pin-1-pos, outline-box)

  ; Compute the Marker Shape & Size
  val marker-size = if contains?(outline-box, pin-1-pos):
    ; Pad is inside the outline - so we need to
    ;  take care that the triangle marker doesn't
    ;  overlap the internal pad
    val diff = closest - pin-1-pos
    abs $ y(diff)
  else:
    val marker-ratio = (15 %)
    val opt1 = y(dims(outline-box)) * marker-ratio
    min(opt1, x(dims(outline-box)))
  val marker-height = min(marker-size, max-height)

  val marker-shape = create-corner-marker-shape(line-width, marker-height)

  ; Compute the angle of the marker depending on
  ;  what corner of the outline the marker is in.
  val corner = compute-corner(closest)
  val rot = corner-to-rotation(corner)

  ; Place the marker in the closest corner.
  val marker-pose = loc(closest, rot)
  marker-pose * marker-shape

doc: \<DOC>
Create a triangle shaped marker in the outline on the silkscreen

This function looks for the outline shape in the virtual artwork
of this VirtualLP node and then attempts to find the corner
of that outline closest to the `pin-1-id` pad of the land pattern.

It then construct a triangle shaped marker and places it in that
corner for a heavy indication of the pin 1 location. This corner
marker will be placed in the silkscreen layer on the same side
of the board as the outline is found.

@param vp Land Pattern scene graph node we will search for the outline
@param pin-1-id This argument accepts either an `Int` or a `Ref` for
identifying the "Pin 1" of the component. If this is an `Int` it will
map to the conventional `p[N]` ref syntax used for land patterns. The
default value is `1`.
@throws ValueError If we find more than one `outline` in the silkscreen,
or if we fail to find the `pin-1-id` pad.

<DOC>
public defn build-outline-pin-1-triangle (
  vp:VirtualLP
  --
  pin-1-id:Int|Ref = 1
  ):

  val outline = get-silkscreen-outline!(vp)
  val o-side = side $ (layer-spec(outline) as Silkscreen)
  val o-sh = shape(outline)

  val pin-1-pad = get-pad-by-ref!(vp, pin-1-id)
  ; Find the corner of the outline nearest to pad 1

  ; The Outline is typically a line rectangle which creates a
  ;  single line. We use this to determine the line width
  ;  so that we can place the marker in the mid-line
  val line-width = match(o-sh):
    (x:Line): width(x)
    (_): default-silk-width()

  val o-box = bounds $ o-sh

  val pin-1-pos = center $ pose(pin-1-pad)

  val marker = compute-triangle-marker(pin-1-pos, o-box, line-width)

  add-artwork(
    vp, Silkscreen("pin-1-marker", o-side),
    marker,
    name = "pin-1-triangle",
    class = "pin-1-marker"
    )


doc: \<DOC>
Create a Pin 1 indicator as a round dot next to the pad

By default This creates a small circle in the silkscreen directly
above (+Y) the "pin 1" pad of a land pattern. You can use the
`dir` option to place the marker in a different cardinal
direction.

This function assumes that the space directly above the
pin 1 pad is available to place this circle.
@param vp Virtual Landpattern that will store artwork and
be inspected for pads that match `pin-1-id`. Note that the
pads must already have been added to the land pattern for
this function to work.
@param pin-1-id Indicates which pad by Int or Ref will be
used as the "Pin 1" of the land pattern.
@param dir Direction where to place the dot with respect
to the pin 1 pad. Default value is `Up` (+Y)
@param line-width Used for the radius of the created Circle. By
default this is the minimum silk width from the design rules.
@param mask-clearance Mask clearance rule used to place
the dot sufficiently far away the Pin 1 Pad. Default is
the minimum silk to soldermask clearance pulled from the design rules.
@param side Indicates whether the marker will be drawn on the top
or bottom side of the board. Default is `Top`.
<DOC>
public defn build-smd-pin-1-dot (
  vp:VirtualLP,
  --
  pin-1-id:Int|Ref = 1,
  dir:Dir = Up,
  margin:Double = 0.0,
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):
  ; Draw a circle dot inside the rectangle above pin 1
  val pin-1-pad = get-pad-by-ref!(vp, pin-1-id)

  val pad-loc = pose(pin-1-pad)
  val pad-center = center(pad-loc)

  val smasks = get-layer(pin-1-pad, SolderMask(side))
  if length(smasks) == 0:
    ; This is a very strange error - it means
    ;  that pad 1 of this component doesn't have a soldermask
    ;  opening.
    ; This could happen if the user passed an erroneous `side` argument
    throw $ ValueError("Pin-1 - No Soldermask Opening for Pad on Side: %_" % [side])
  val smask = smasks[0]

  ; Apply the transform so that I can get the
  ;   true "height" of the pad regardless of rotation.
  val smask* = pad-loc * smask
  val height = y $ dims(smask*)
  val y-pos = (height / 2.0) + mask-clearance + line-width + margin
  val width = x $ dims(smask*)
  val x-pos = (width / 2.0) + mask-clearance + line-width + margin

  val offset = switch(dir):
    Up: Point(0.0, y-pos)
    Down: Point(0.0, (- y-pos))
    Right: Point(x-pos, 0.0)
    Left: Point((- x-pos), 0.0)

  val marker-pos = pad-center + offset

  ; TODO - Check that the marker will be visible and not blocked by the package
  ;   body.
  ;
  ; TODO - Check that the marker will not overlap with any existing silkscreen
  ;   that will prevent it from being easily visible.

  add-pin-1-dot(vp, marker-pos, line-width = line-width, side = side)


doc: \<DOC>
Construct the Pin-1 Dot Marker at a particular location.

This function draws a `Circle` shaped dot at the provided
location. This function is used to provide a visual pin 1
indicator in the silkscreen.

@param vp Virtual Landpattern scene graph node.
@param pos Location in the current scene graph node where this dot will be drawn.

@param line-width silkscreen line width defines the radius of the circle.
@param side Top or Bottom side silkscreen.
<DOC>
public defn add-pin-1-dot (
  vp:VirtualLP,
  pos:Point,
  --
  line-width:Double = default-silk-width(),
  side:Side = Top
  ):
  add-artwork(vp, Silkscreen("pin-1-marker", side), Circle(pos, line-width), name = "pin-1-dot", class = "pin-1-marker")


doc: \<DOC>
Construct the projected shape of the package body on the board.

Legacy - Use {@link type:PackageOutline}

@param vp Virtual LP scene graph node - outline will be created here.
@param pkg-body 3D body model for the component
@param density-level Indicates whether we will use MMC, NMC, or LMC
@param line-width width of the line to draw.
@param mask-clearance clearance between soldermask openings and the outline.
<DOC>
public defn construct-pkg-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  ) -> Shape:
  val po = PackageOutline(
    pkg-body = pkg-body,
    line-width = line-width,
    mask-clearance = mask-clearance
    density-level = density-level
  )
  build-shape(po, vp)

doc: \<DOC>
Construct a silkscreen outline of a component based on the Package Body

To be replaced by the {@link type:PackageOutline} type

@param vp Virtual LP scene graph node - outline will be created here.
@param pkg-body 3D body model for the component
@param density-level Indicates whether we will use MMC, NMC, or LMC
@param line-width width of the line to draw.
@param mask-clearance clearance between soldermask openings and the outline.
@param side Side of the board. Default is `Top`.
<DOC>
public defn create-silkscreen-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  side:Side = Top
  ) -> False :

  val po = PackageOutline(
    pkg-body = pkg-body,
    line-width = line-width,
    mask-clearance = mask-clearance
    density-level = density-level
  )
  build-outline(po, vp, side = side)

doc: \<DOC>
Construct the projected shape of the Package Body and Soldermask Pad Openings

Legacy - Use {@link type:OverallOutline}

The user must create all of the pads associated with this landpattern before
invoking this function.

This function takes the union of the pads and the package body outline
and constructs and overall outline encompassing this shape.

@param vp Virtual LP scene graph node - outline will be created here.
@param pkg-body 3D body model for the component
@param density-level Indicates whether we will use MMC, NMC, or LMC
@param line-width width of the line to draw.
@param mask-clearance clearance between soldermask openings and the outline.
@return `LineRectangle` Shape for the union of the package body and the
pad openings.
<DOC>

public defn construct-overall-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  side:Side = Top
  ) -> Shape:

  val oo = OverallOutline(
    pkg-body = pkg-body,
    line-width = line-width,
    mask-clearance = mask-clearance
    density-level = density-level
  )
  build-shape(oo, vp, side = side)

doc: \<DOC>
Construct a silkscreen outline based on the Package Body and Soldermask Pad Openings

Legacy - To be replaced with {@link type:OverallOutline}

The user must create all of the pads associated with this landpattern before
invoking this function.

@param vp Virtual LP scene graph node - outline will be created here.
@param pkg-body 3D body model for the component
@param density-level Indicates whether we will use MMC, NMC, or LMC
@param line-width width of the line to draw.
@param mask-clearance clearance between soldermask openings and the outline.
<DOC>
public defn create-silkscreen-overall-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  side:Side = Top
  ) -> False :

  val oo = OverallOutline(
    pkg-body = pkg-body,
    line-width = line-width,
    mask-clearance = mask-clearance
    density-level = density-level
  )
  build-outline(oo, vp, side = side)

doc: \<DOC>
Determine the dimensions of the package body with Y extension

This function is used to create the minimal package body
outline that we will use to create the horizontal lines
at the extremes on the package body.

This function attempts to make a conservative size box
by accounting for both the package body length and the
location of the soldermask opening of the pads.

This function is typically only useful for dual-row
packages like SOP, SON, SOT, etc.

@param vp Virtual Land Pattern Scene Graph
@param pkg-body Package Body for the IC
@param density-level Density Level for the Package
@param line-width Silkscreen min line width as defined by pcb-rules.
@param mask-clearance Minimum soldermask clearance to silkscreen as defined
by the pcb-rules.
@param side Which side of the board this outline will be created on. It
filters for which pads of the landpattern to inspect.
<DOC>
public defn get-extended-pkg-outline (
  vp:VirtualLP
  pkg-body:PackageBody
  density-level:DensityLevel
  line-width:Double
  mask-clearance:Double
  side:Side,
  edge:SilkscreenEdge = NS-Edge
  ) -> Box :
  val pkg-outline = bounds $ envelope(pkg-body, density-level = density-level)
  val pkg-outline* = fatten(line-width / 2.0, pkg-outline)

  ; Check to make sure that the pads aren't going to be
  ;  too close to the outline. If so - we adjust them out a
  ;  bit so that we don't violate the minimum clearance rules.
  val pad-outline = bounds(get-pads(vp), layer-spec = SolderMask(side))
  val pad-outline* = fatten(mask-clearance + (line-width / 2.0), pad-outline)

  val diff = dims(pad-outline*) - dims(pkg-outline*)

  ; If we find that the pad outline is larger in Y
  ;   then we expand the box, but only on the dimension
  ;   so that the line is still only the width of the body.
  if edge == NS-Edge and y(diff) > 0.0:
    fatten(Point(0.0, y(diff) / 2.0), pkg-outline*)
  else if edge == EW-Edge and x(diff) > 0.0:
    fatten(Point(x(diff) / 2.0, 0.0), pkg-outline*)
  else:
    pkg-outline*


doc: \<DOC>
Construct the shapes for the package extrema lines

@param vp Virtual Land Pattern Scene Graph node
@param pkg-body Package dimensional body for sizing the lines.
@param density-level Package density level. Default is `DENSITY-LEVEL`
from design settings.
@param line-width Line width in mm. Default is silkscreen width from
the design's `pcb-rules`.
@param mask-clearance Clearance distance between soldermask and silkscreen
Default is the clearance rule from the design's `pcb-rules`.
@param side Top or Bottom side of the board where silkscreen will be drawn.
We use this to determine which pads to include in the outline calculation.
@param edge N/S or E/W side of the component to creates lines for.

<DOC>
public defn construct-pkg-extrema-lines (
  vp:VirtualLP, pkg-body:PackageBody
  --
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  side:Side = Top
  edge:SilkscreenEdge = NS-Edge
  ) -> Shape:
  val pkg-outline = get-extended-pkg-outline(vp, pkg-body, density-level, line-width, mask-clearance, side, edge)
  ; Just take the top and bottom lines - not the sides
  val [sw, se, ne, nw] = corners(pkg-outline)

  val line-eps = switch(edge):
    NS-Edge:
      [[nw, ne], [sw, se]]
    EW-Edge:
      [[nw, sw], [ne, se]]

  Union $ to-tuple $ for line-ep in line-eps seq:
    Line(line-width, line-ep)

doc: \<DOC>
Construct and instantiate the package extrema lines in the scene graph

Legacy - To be replaced by {@link type:EdgesOutline}

@param vp Virtual Land Pattern Scene Graph node
@param pkg-body Package dimensional body for sizing the lines.
@param density-level Package density level. Default is `DENSITY-LEVEL`
from design settings.
@param line-width Line width in mm. Default is silkscreen width from
the design's `pcb-rules`.
@param mask-clearance Clearance distance between soldermask and silkscreen
Default is the clearance rule from the design's `pcb-rules`.
@param side Top or Bottom side of the board where silkscreen will be drawn.
We use this to determine which pads to include in the outline calculation.
@param edge N/S or E/W side of the component to creates lines for.

<DOC>
public defn create-silkscreen-pkg-extrema-outline (
  vp:VirtualLP, pkg-body:PackageBody
  --
  edge:SilkscreenEdge = NS-Edge
  density-level:DensityLevel = DENSITY-LEVEL
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance()
  side:Side = Top
  ) -> Shape :

  val eo = EdgesOutline(
    pkg-body = pkg-body,
    edge = edge
    line-width = line-width,
    mask-clearance = mask-clearance
    density-level = density-level
  )
  build-shape(eo, vp, side = side)
