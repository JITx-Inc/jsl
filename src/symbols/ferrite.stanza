doc: \<DOC>
@title Ferrite Symbol
@desc The Ferrite symbol defines a schematic symbol as a tilted rectangle.

@snippet  Create the default symbol:
```stanza
create-symbol(FerriteSymbol())
```
@snip-note 1 `create-symbol` does a good thing.

@snippet  Create a symbol with a 20 degree tilt::
```stanza
create-symbol(FerriteSymbol(body-angle = 20.0)) ; or however this works.
```
@snip-note 1 `create-symbol` does a good thing.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/symbols/ferrite:
  import core
  import jitx

  import jsl/ensure
  import jsl/symbols/framework
  import jsl/geometry/box

val DEF_LINE_WIDTH = 0.05
val DEF_SYMB_BODY = Dims(0.9, 0.4)
val DEF_BODY_ANGLE = -30.0

doc: \<DOC>
@desc Parameters for customizing the FerriteSymbol

@snippet  Create a parameters struct to change the line width to 30mm.
```stanza
val params = FerriteSymbolParams(line-width = 30.0)
```
<DOC>
public defstruct FerriteSymbolParams <: SymbolParams:
  doc: \<DOC>
  Line width for the shapes drawn.
  Default value is 0.05 in symbol grid units.
  <DOC>
  line-width:Double with:
    default => DEF_LINE_WIDTH
    ensure => ensure-positive!
    updater => sub-line-width

  doc: \<DOC>
  Set the dimensions for the ferrite body.
  Default value is Dims(0.9, 0.4) in symbol grid units
  <DOC>
  symb-body:Dims with:
    default => DEF_SYMB_BODY
    ensure => ensure-positive!
    updater => sub-symb-body

  doc: \<DOC>
  Set the rotation angle for the ferrite body in degrees.
  Default value is -30.0 degrees.
  <DOC>
  body-angle:Double with:
    default => DEF_BODY_ANGLE
    updater => sub-body-angle

  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  printer => true
  equalable => true


var DEF_FERRITE_PARAMS = FerriteSymbolParams()
defn get-default-ferrite-symbol-params () -> FerriteSymbolParams :
  DEF_FERRITE_PARAMS

defn set-default-ferrite-symbol-params (v:FerriteSymbolParams) -> False :
  DEF_FERRITE_PARAMS = v

doc: \<DOC>
Build the Ferrite's glyphs in a SymbolNode
<DOC>
defn build-ferrite-glyphs (
  node:SymbolNode,
  pitch:Double
  params:FerriteSymbolParams
  ):
  val p2 = pitch / 2.0
  line(node, [Point(0.0, p2), Point(0.0, (- p2))], width = line-width(params), name = "porch")

  val b = symb-body(params)
  rectangle(node, x(b), y(b), pose = loc(0.0, 0.0, body-angle(params)), name = "body")


doc: \<DOC>
@desc The Ferrite symbol defines a schematic symbol as a
tilted rectangle.
- `pitch:Double` Set the pitch of the symbol
- ... 

@snippet  Create the default symbol:
```stanza
val f = FerriteSymbol()
```
@snip-note 1 `create-symbol` does a good thing.


<DOC>
public defstruct FerriteSymbol <: TwoPinSymbol :
  doc: \<DOC>
  Pitch between the Pins of a Ferrite Symbol
  This value is in symbol grid units (not mm)
  <DOC>
  pitch:Double with:
    ensure => ensure-positive!
    default => TWO_PIN_DEF_PITCH
    as-method => true
  polarized?:True|False with: 
    as-method => true
    default => false
  params:Maybe<FerriteSymbolParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  printer => true

public defmethod name (x:FerriteSymbol) -> String :
  "Ferrite"

defmethod get-params (x:FerriteSymbol) -> FerriteSymbolParams :
  match(params(x)):
    (_:None): get-default-ferrite-symbol-params()
    (v:One<FerriteSymbolParams>): value(v)

public defmethod build-artwork (
  x:FerriteSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as FerriteSymbolParams
  build-ferrite-glyphs(sn, pitch(x), p)

public defmethod build-orientation (x:FerriteSymbol, sn:SymbolNode):
  set-preferred-orientation(sn, PreferRotation([1]))

public defmethod build-params (x:FerriteSymbol, sn:SymbolNode) :
  val overall = glyph-bounds(sn)
  val p = get-params(x) as FerriteSymbolParams

  val offset = Point(left(overall), 0.0)

  val r-P = loc(offset, 90.0)

  val lp = get-label-params(p)
  val r-H = ref-label-size(lp)
  val v-P = loc(offset + Point((- r-H), 0.0), 90.0)

  build-labels(
    get-label-params(p),
    sn,
    LabelPosition(r-P, SE)
    LabelPosition(v-P, SE)
    )

