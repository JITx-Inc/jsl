#use-added-syntax(jitx)
defpackage jsl/landpatterns/helpers:
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import jsl/errors

public defn ensure-positive! (
  field:String,
  value: Int|Long|Double|Float|Toleranced
  ) :
  val fail = match(value):
    (x:Int): x <= 0
    (x:Long): x <= 0L
    (x:Double): x <= 0.0
    (x:Float): x <= 0.0F
    (t:Toleranced):
      min-value(t) <= 0.0
  if fail:
    throw $ ValueError("%_: Expects Positive Number: %_" % [field, value])

doc: \<DOC>
Check if the passed value is both positive and even
@throws ValueError when the passed value is not even or positive
@param field Name of the package we are checking
@param value Number to check, typically the number of pins for a particular package.
<DOC>
public defn ensure-even-positive! (
  field:String, value:Int
  ) :
  if value < 2 or value % 2 > 0:
    throw $ ValueError("%_: only supports a positive even number of pins: %_" % [field, value])

doc: \<DOC>
Check for multi-sided components to ensure proper number of pins.
@throws ValueError when the passed value is not divible.
@param value Number to check, typically the number of pins for a particular package.
@param divisor Typically used for the number of sides of a package. Example: 4 for QFN.
@param name Name of the package we are checking
<DOC>
public defn ensure-divisible! (value:Int, divisor:Int, name: String) :
  if not (value > 0):
    throw $ ValueError("%_: Value must be positive: %_" % [name, value])
  if not (divisor > 0):
    throw $ ValueError("%_: Divisor must be positive: %_" % [name, divisor])
  if ((value % divisor) != 0) :
    throw $ ValueError("%_: %_ must be divisible by %_." % [name, value, divisor])

doc: \<DOC>
Check if the value is non-negative (ie, zero or greater)
<DOC>
public defn ensure-non-negative! (field:String, value:Int|Long|Double|Float|Toleranced):
  val fail = match(value):
    (x:Int): x < 0
    (x:Long): x < 0L
    (x:Double): x < 0.0
    (x:Float): x < 0.0F
    (t:Toleranced):
      min-value(t) < 0.0
  if fail:
    throw $ ValueError("%_: Expects Non-Negative Number: %_" % [field, value])

doc: \<DOC>
Create a letter sequence from `start` to `end`
@param start Starting character in the sequence
@param end Inclusive ending character in the sequence.

@snippet Example

```stanza
val result = make-letter-seq('B', 'G')
println(result)
; Generates:
; "BCDEFG"
```
<DOC>
public defn make-letter-seq (start:Char, end:Char) -> String :
  val sb = to-int(start)
  val eb = to-int(end)
  if not (eb > sb):
    throw $ ValueError("Invalid Start/End Letters: '%_' [%_] < '%_' [%_]" % [start, sb, end, eb])

  string-join $ for i in sb through eb seq:
    to-char(i)


doc: \<DOC>
Reference Label Generator
This tool inserts a reference label into the current landpattern context.
@param pose Pose in the current landpattern frame of reference. By default,
  the reference label is placed at the origin.
@param anchor alignment of the text with respect to the pose. By default,
  the reference label is Center {@link C} aligned.
<DOC>
public defn ref-label (pose:Pose = loc(0.0, 0.0) -- anchor:Anchor = C) :
  inside pcb-landpattern:
    val min-silkscreen-text-height = clearance(current-rules(), MinSilkscreenTextHeight)
    layer(Silkscreen("values", Top)) = Text(">REF", min-silkscreen-text-height, anchor, pose)

doc: \<DOC>
Create a plus symbol shape
@param center Center coordinate for the plus symbol
@param l Length of the horizontal or vertical segments
  Default is 1.0mm
<DOC>
public defn PlusSymbol (center:Point, l:Double = 1.0) -> Shape:
  val min-width = clearance(current-rules(), MinSilkscreenWidth)
  loc(center) *
    Union([Line(min-width, [Point(-0.5 * l, 0.0), Point(0.5 * l, 0.0)])
           Line(min-width, [Point(0.0, -0.5 * l), Point(0.0, 0.5 * l)])])

doc: \<DOC>
Create a plus symbol shape
@param xc X center coordinate for the plus symbol
@param yc Y center coordinate for the plus symbol
@param l Length of the horizontal or vertical segments
  Default is 1.0mm
<DOC>
public defn PlusSymbol (xc:Double, yc:Double, l:Double = 1.0) -> Shape:
  PlusSymbol(Point(xc, yc))

public defn l2-norm (p:Point) -> Double:
    sqrt((x(p) * x(p)) + (y(p) * y(p)))

public defn max-distance (p1:Point, p2:Point) -> Point:
  if l2-norm(p1) > l2-norm(p2) :
    p1
  else:
    p2
