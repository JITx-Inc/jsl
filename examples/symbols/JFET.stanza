#use-added-syntax(jitx)
defpackage jsl/examples/symbols/JFET:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/symbols/SymbolDefn
  import jsl/symbols/arrows
  import jsl/symbols/transistors/JFET
  import jsl/symbols/transistors/FET

  import jsl/design/settings
  import jsl/landpatterns/packages
  import jsl/landpatterns/SOIC
  import jsl/examples/landpatterns/board

val old-params = get-default-jfet-symbol-params()
val old-arrow = arrow-params(old-params)
val new-arrow = sub-style(old-arrow, ClosedArrow)
val new-params = sub-arrow-params(old-params, new-arrow)
val new-params* = sub-outline(new-params, true)
set-default-jfet-symbol-params(new-params*)

val symb-defn = JFETSymbol(junction-type = N-Channel)
val symb = create-symbol(symb-defn)

; view(symb)

val board-shape = RoundedRectangle(50.0, 50.0, 0.25)

pcb-component test-JFET:
  manufacturer = "Onsemi"
  mpn = "3905"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ G | p[1] ]
    [ D | p[2] ]
    [ S | p[3] ]

  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-module test-design:
  inst c : test-JFET
  place(c) at loc(0.0, 0.0) on Top

; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("JFET-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(test-design)

; View the results
view-schematic()