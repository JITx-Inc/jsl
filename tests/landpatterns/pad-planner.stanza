#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/pad-planner:
  import core
  import jitx

  import jsl/landpatterns/pad-planner

deftest(pad-planner) test-basic:

  ; Rectangle Planner is very simple - all pads are
  ;  active and it returns rectangles for all pads.
  val o = RectanglePadPlanner

  for r in 0 to 5 do:
    for c in 0 to 10 do:
      #EXPECT( active?(o, r, c) )

  val func? = shape-generator(o, 0, 0)

  match(func?):
    (func:(Dims -> Shape)):
      val sh = func(Dims(10.0, 5.0))
      match(sh):
        (rect:Rectangle):
          #EXPECT(width(rect) == 10.0)
          #EXPECT(height(rect) == 5.0)
          val p = pose(rect)
          #EXPECT(center(p) == Point(0.0, 0.0))
          #EXPECT(angle(p) == 0.0)
        (y): #EXPECT(y == "Invalid Shape Type Returned")

    (x:False): #EXPECT(x == "Invalid Function Type Returned")

deftest(pad-planner) test-rounded:

  val o = RoundedRectanglePadPlanner(0.1)

  for r in 0 to 3 do:
    for c in 0 to 60 do:
      #EXPECT( active?(o, r, c) )

  val func? = shape-generator(o, 4, 3)

  match(func?):
    (func:(Dims -> Shape)):
      val sh = func(Dims(11.0, 4.0))
      match(sh):
        (rect:RoundedRectangle):
          #EXPECT(width(rect) == 11.0)
          #EXPECT(height(rect) == 4.0)
          #EXPECT(radius(rect) == 0.1)
          val p = pose(rect)
          #EXPECT(center(p) == Point(0.0, 0.0))
          #EXPECT(angle(p) == 0.0)
        (y): #EXPECT(y == "Invalid Shape Type Returned")

    (x:False): #EXPECT(x == "Invalid Function Type Returned")

deftest(pad-planner) test-pin1-planner :

  val o = Pin1-PadPlanner(rect-shaper, round-rect-shaper(0.2))

  for r in 0 to 4 do:
    for c in 0 to 20 do:
      #EXPECT( active?(o, r, c) )

  ; First Pin is a Rectangle
  val func? = shape-generator(o, 0, 0)

  match(func?):
    (func:(Dims -> Shape)):
      val sh = func(Dims(4.0, 2.0))
      match(sh):
        (rect:Rectangle):
          #EXPECT(width(rect) == 4.0)
          #EXPECT(height(rect) == 2.0)
          val p = pose(rect)
          #EXPECT(center(p) == Point(0.0, 0.0))
          #EXPECT(angle(p) == 0.0)
        (y): #EXPECT(y == "Invalid Shape Type Returned")

    (x:False): #EXPECT(x == "Invalid Function Type Returned")

  ; Rest of the pins are rounded

  defn check-non-rect (func?) :
    match(func?):
      (func:(Dims -> Shape)):
        val sh = func(Dims(11.0, 4.0))
        match(sh):
          (rect:RoundedRectangle):
            #EXPECT(width(rect) == 11.0)
            #EXPECT(height(rect) == 4.0)
            #EXPECT(radius(rect) == 0.2)
            val p = pose(rect)
            #EXPECT(center(p) == Point(0.0, 0.0))
            #EXPECT(angle(p) == 0.0)
          (y): #EXPECT(y == "Invalid Shape Type Returned")

      (x:False): #EXPECT(x == "Invalid Function Type Returned")


  val f01 = shape-generator(o, 0, 1)
  check-non-rect(f01)

  val f10 = shape-generator(o, 1, 0)
  check-non-rect(f10)

#if-defined(TESTING):
  public defstruct FunkyQuadPadPlanner <: Pin1-PadPlanner :
    pin1-shaper:(Dims -> Shape) with: (as-method => true)
    shaper:(Dims -> Shape) with: (as-method => true)

  public defmethod active? (x:FunkyQuadPadPlanner, row:Int, column:Int) -> True|False:
    if row == 1 or row == 3:
      (column % 2) == 0
    else: true

deftest(pad-planner) test-funky-planner :
  ; This test is going to assume that we have a oddly constructed
  ;   quad style package that we want to build. I'm labeling
  ;   the sides of the QFN pack as:
  ;
  ;  Side  |  Row Index
  ;  West  |  0
  ;  South |  1
  ;  East  |  2
  ;  North |  3
  ;
  ;  For this package the North and South edges have every
  ;  other pin non-stuffed. Ie, in this example, the N/S edges
  ;  have half as many pins as E/W
  ;
  ; We're also going to combine this with `Pin1-PadPlanner` to demonstrate
  ;  the composability of this structure.


  val o = FunkyQuadPadPlanner(rect-shaper, round-rect-shaper(0.2))

  for c in 0 to 20 do:
    #EXPECT( active?(o, 0, c) )

  for c in 0 to 20 do:
    val a = if (c % 2 == 0): active?(o, 1, c)
    else: not active?(o, 1, c)
    #EXPECT( a )

    ; First Pin is a Rectangle
  val func? = shape-generator(o, 0, 0)

  match(func?):
    (func:(Dims -> Shape)):
      val sh = func(Dims(4.0, 2.0))
      match(sh):
        (rect:Rectangle):
          #EXPECT(width(rect) == 4.0)
          #EXPECT(height(rect) == 2.0)
          val p = pose(rect)
          #EXPECT(center(p) == Point(0.0, 0.0))
          #EXPECT(angle(p) == 0.0)
        (y): #EXPECT(y == "Invalid Shape Type Returned")

    (x:False): #EXPECT(x == "Invalid Function Type Returned")

  ; Rest of the pins are rounded

  defn check-non-rect (func?) :
    match(func?):
      (func:(Dims -> Shape)):
        val sh = func(Dims(11.0, 4.0))
        match(sh):
          (rect:RoundedRectangle):
            #EXPECT(width(rect) == 11.0)
            #EXPECT(height(rect) == 4.0)
            #EXPECT(radius(rect) == 0.2)
            val p = pose(rect)
            #EXPECT(center(p) == Point(0.0, 0.0))
            #EXPECT(angle(p) == 0.0)
          (y): #EXPECT(y == "Invalid Shape Type Returned")

      (x:False): #EXPECT(x == "Invalid Function Type Returned")


  val f01 = shape-generator(o, 0, 1)
  check-non-rect(f01)

  val f10 = shape-generator(o, 1, 0)
  check-non-rect(f10)

  val f11 = shape-generator(o, 1, 1)
  #EXPECT(f11 is False)

deftest(pad-planner) test-pth-planner :

  val o = PthPadPlanner()

  for r in 0 to 4 do:
    for c in 0 to 5 do:
      #EXPECT( active?(o, r, c) )

  val func? = shape-generator(o, 4, 3)

  match(func?):
    (func:(Dims -> Shape)):
      val sh = func(Dims(11.0, 4.0))
      match(sh):
        (c:Capsule):
          #EXPECT(width(c) == 11.0)
          #EXPECT(height(c) == 4.0)
          val p = pose(c)
          #EXPECT(center(p) == Point(0.0, 0.0))
          #EXPECT(angle(p) == 0.0)
        (y): #EXPECT(y == "Invalid Shape Type Returned")

    (x:False): #EXPECT(x == "Invalid Function Type Returned")

  val hole-func? = hole-generator(o, 2, 1)
  match(hole-func?):
    (hole-func:(Dims -> Shape)):
      val hole-shape = hole-func(Dims(1.0, 1.0))
      match(hole-shape):
        (c:Circle):
          #EXPECT(radius(c) == 0.5)
        (y): #EXPECT(y == "Invalid Shape Type Returned")
    (x:False): #EXPECT(x == "Invalid Function Type Returned")