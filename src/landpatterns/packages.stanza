doc: \<DOC>
@title Packages & Landpatterns
@brief Interface definitions for Landpatterns
@desc

This package contains the definition of some abstract types for
defining the landpatterns of various components.

The goal of these definitions is to provide a consistent interface
across all landpattern definitions. This promotes re-use and
correctness.

All of the entities in this package use millimeters as their standard unit.

TODO - Diagram here discussing the concept for landpatterns & component packages.
  We should include examples of various packages and use the right nomenclature
  to describe things.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/packages:
  import core
  import jitx
  import jitx/commands

  import jsl/landpatterns/helpers
  import jsl/design/settings
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/numbering
  import jsl/landpatterns/courtyard

doc: \<DOC>
Physical body of the Component (also called the Lead Carrier or just Carrier)

For Through-hole resistors - this is the ceramic cylinder, not the leads
For SMT resistors, the body is basically the whole chip resistor.

For QFNs, the body is the entire package
For QFPs, the body is the ceramic or plastic but not the leads.

TODO - Figure here
<DOC>
public defstruct PackageBody <: Hashable & Equalable :
  doc: \<DOC>
  Measure of the package body in the X dimension.

  Examples:
  - Typically for SOP/SOIC/DFN/SON, this dimension is in the same direction as the lead-span
  - For non-square QFN/QFP/BGA packages, this is typically the shorter of the two
  dimensions.
  - For axial through-hole components, the width is typically the diameter of
  the device cylinder and orthogonal to the axial leads.
  - For radial through-hole components:
    -  For cylindrical components, the width is equal to the length
    -  For non-cylindrical components, the width is typically the shorter of the two dimensions and approximately orthogonal to the plane of the leads.
  <DOC>
  width:Toleranced with: (ensure => ensure-positive!)
  doc: \<DOC>
  Measure of the package body in the Y dimension.

  Examples:
  - Typically for SOP/SOIC/DFN/SON, this dimension is orthogonal to the lead-span.
  - For non-square QFN/QFP/BGA packages, this is typically the longer of the two
  dimensions.
  - For axial through-hole components, the length is typically parallel to the
  axial leads of the device.
  - For radial through-hole components:
    -  For cylindrical components, the length is equal to the width.
    -  For non-cylindrical components, the length is typically the longer dimension and parallel to the leads of the device.
  <DOC>
  length:Toleranced with: (ensure => ensure-positive!)
  doc: \<DOC>
  Measure of the package body in the Z dimension

  This dimension of the package body is the nominal distance that
  the component will stand off the surface of the PCB. This
  dimension will typically not effect the layout and routing of the
  PCB from an electrical perspective but will likely effect the
  mechanical integration of the component.
  <DOC>
  height:Toleranced with: (ensure => ensure-positive!)

  doc: \<DOC>
  Origin Position of the Package Body
  <DOC>
  anchor:Anchor with: (
    default => C
  )
with:
  equalable => true
  hashable => true
  printer => true
  constructor => #PackageBody

doc: \<DOC>
Create a Package Body as a rectangular cuboid.
<DOC>
public defn PackageBody (
  --
  width:Toleranced,
  length:Toleranced,
  height:Toleranced,
  anchor:Anchor = C
  ):
  #PackageBody(width, length, height, anchor)

doc: \<DOC>
Physical Envelope of the package body.
<DOC>
public defmulti envelope (x:PackageBody) -> Dims

public defmethod envelope (x:PackageBody) -> Dims :
  Dims(max-value(width(x)), max-value(length(x)))


doc: \<DOC>
Every component has a representation for a
package
<DOC>
public deftype Package <: Hashable

doc: \<DOC>
IPC7351 compliant name for the package generated
by this instance.
<DOC>
public defmulti name (x:Package) -> String

doc: \<DOC>
Number of Total Lead Mounts on this Package

This number should include all possible standard lead
locations on this package.

1.  The user should not substract the pins that are marked absent.
2.  The user should not include the thermal lead if any.
<DOC>
public defmulti num-leads (x:Package) -> Int

doc: \<DOC>
Package Body provides the physical envelope for
the package's body.
<DOC>
public defmulti package-body (x:Package) -> PackageBody

doc: \<DOC>
Pad Planner for this Package
<DOC>
public defmulti pad-planner (x:Package) -> PadPlanner

doc: \<DOC>
Lead Numbering Scheme for this Package
<DOC>
public defmulti lead-numbering (x:Package) -> Numbering

doc: \<DOC>
Default Landpattern Generator Pose
This value should be the default value used for the
`pose` argument in all `make-landpattern` invokations.
<DOC>
public val DEF_LP_POSE = loc(0.0, 0.0)

doc: \<DOC>
Generator for creating the copper pad landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the necessary pads and copper geometry associated
with that component's landpattern.

@param pkg IC Package for which we are creating a landpattern
@param pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-landpattern (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Generator for creating the silkscreen of a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the silkscreen outline, pin-1 indicator, or
any other silkscreen artwork.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-silkscreen (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Default Silkscreen Implementation - No Silkscreen Artwork Created
<DOC>
public defmethod make-silkscreen (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  false

doc: \<DOC>
Generator for creating courtyard for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the courtyard outline for this component.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-courtyard (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

public defmethod make-courtyard (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE,
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  make-courtyard-origin(pose = pose)
  ; @TODO - I need some way to extract the courtyard excess specifications
  ;  from the component
  make-courtyard-boundary()

doc: \<DOC>
Generator for creating keep-out constraints for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the keep-out regions for this component.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-keep-out (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Default `make-keep-out` - No Keep-out Regions Applied.
<DOC>
public defmethod make-keep-out (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  false

doc: \<DOC>
Generator for creating conformal coat masks for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the conformal coat mask regions. This is
typically useful for connectors or thermal interfaces.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-conformal-mask (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Default Conformal Coat Generator - No Mask Regions
<DOC>
public defmethod make-conformal-mask (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE,
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  false

doc: \<DOC>
Generator for creating adhesive application regions for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the adhesive application regions. This is
typically useful for complex mechanical parts where we want to add
additional stability. It can also be useful when creating flat-flex
design components.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-adhesive (
  pkg:Package
  --
  pose:Pose = ?,
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Default `make-adhesive` - No Adhesive Regions
<DOC>
public defmethod make-adhesive (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE,
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  false



doc: \<DOC>
Generator for applying all `Package` generators

This function applies all of the `make-*` generators
associated with the `Package` type. Generators are applied
in the following order:

1.  {@link make-landpattern}
1.  {@link make-silkscreen}
1.  {@link make-courtyard}
1.  {@link make-keep-out}
1.  {@link make-conformal-mask}
1.  {@link make-adhesive}

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.

<DOC>
public defmulti make-all (
  pkg:Package
  --
  pose:Pose = ?
  density-level:DensityLevel = ?
  )

doc: \<DOC>
Default `make-all` generator implementation

This function applies all of the `make-*` generators
associated with the `Package` type. Generators are applied
in the following order:

1.  {@link make-landpattern}
1.  {@link make-silkscreen}
1.  {@link make-courtyard}
1.  {@link make-keep-out}
1.  {@link make-conformal-mask}
1.  {@link make-adhesive}

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.

<DOC>
public defmethod make-all (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  inside pcb-landpattern:
    make-landpattern(
      pkg,
      pose = pose,
      density-level = density-level
      )
    make-silkscreen(
      pkg,
      pose = pose,
      density-level = density-level
      )
    make-courtyard(
      pkg,
      pose = pose,
      density-level = density-level
      )
    make-keep-out(
      pkg,
      pose = pose,
      density-level = density-level
      )
    make-conformal-mask(
      pkg,
      pose = pose,
      density-level = density-level
      )
    make-adhesive(
      pkg,
      pose = pose,
      density-level = density-level
      )


doc: \<DOC>
Create a `LandPattern` definition

This function is used to create a complete landpattern definition
for this `Package`. Typically this function would use the `make-*`
generators for this type to construct a `pcb-landpattern` definition
and return it.

@param pkg Package to create a landpattern for.
@param pose Geometry gets created with an offset from the origin
by `pose`.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.

Example:
```
  val lp = create-landpattern(pkg)

  ; Is equivalent to:

  pcb-landpattern lp:
    name = "lp"
    description = ""
    make-landpattern(pkg)
```
<DOC>
public defmulti create-landpattern (
  pkg:Package
  --
  pose:Pose = ?,
  description:String = ?,
  density-level:DensityLevel = ?
  ) -> LandPattern

doc: \<DOC>
Default Implementation of `create-landpattern`

The default landpattern creator combines all of the
defined generators for a `Package` (ie, `make-*` functions)
to generate the complete landpattern for a package.

In more complex packages, you may need to define your own
`pcb-landpattern` definition with multiple packages

@param pkg Package to create a landpattern for.
@param pose Offset of the geometry in the landpattern. Default
is no offset, ie `loc(0.0, 0.0)`
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmethod create-landpattern (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE,
  description:String = "",
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> LandPattern :
  pcb-landpattern lp:
    name = name(pkg)
    make-all(pkg, pose = pose, density-level = density-level)
  lp




