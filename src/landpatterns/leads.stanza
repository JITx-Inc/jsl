#use-added-syntax(jitx)
defpackage jsl/landpatterns/leads:
  import core
  import jitx
  import jitx/commands

  import jsl/geometry/box
  import jsl/landpatterns/VirtualLP

  forward jsl/landpatterns/leads/protrusions
  forward jsl/landpatterns/leads/lead-types
  forward jsl/landpatterns/leads/lead-profile
  forward jsl/landpatterns/leads/through-hole


doc: \<DOC>
Generate the Bounding Dims of a sequence of pads
@param lp-pads the pads that we want to create a bounding
rectangle of. These pads should be in the same component for
this function to make sense.
@param layer-spec Optional layer specifier that will compute
  the bounds based on the geometry in a particular layer.
  If this value is false - we compute the boundary based on the
  copper pad geometry only.
@param expand-by Amount to expand the created dimension by.
@return Axis aligned box that contains the selected objects. Note
that this box is in the frame of reference of the associated component.
<DOC>
public defn bounds (
  lp-pads:Seqable<LandPatternPad|VirtualPad>
  --
  layer-spec:LayerSpecifier|False = false
  expand-by:Double = 0.0
  ) -> Box :

  val unionBox = reduce{union, _} $ for lp-pad in lp-pads seq:
    val pd = pad-def(lp-pad)
    val l = pose(lp-pad)
    match(layer-spec):
      (_:False):
        bounds(l * pad-shape(pd))
      (ls:LayerSpecifier):
        val shapes = layer(pd, ls)
        bounds(l * Union(shapes))

  fatten(expand-by, unionBox)
