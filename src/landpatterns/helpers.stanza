#use-added-syntax(jitx)
defpackage jsl/landpatterns/helpers:
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import jsl/errors

  import jsl/landpatterns/silkscreen

doc: \<DOC>
Create a letter sequence from `start` to `end`
@param start Starting character in the sequence
@param end Inclusive ending character in the sequence.

@snippet Example

```stanza
val result = make-letter-seq('B', 'G')
println(result)
; Generates:
; "BCDEFG"
```
<DOC>
public defn make-letter-seq (start:Char, end:Char) -> String :
  val sb = to-int(start)
  val eb = to-int(end)
  if not (eb > sb):
    throw $ ValueError("Invalid Start/End Letters: '%_' [%_] < '%_' [%_]" % [start, sb, end, eb])

  string-join $ for i in sb through eb seq:
    to-char(i)


doc: \<DOC>
Reference Label Generator
This tool inserts a reference label into the current landpattern context.
@param pose Pose in the current landpattern frame of reference. By default,
  the reference label is placed at the origin.
@param anchor alignment of the text with respect to the pose. By default,
  the reference label is Center {@link type:C} aligned.
<DOC>
public defn ref-label (pose:Pose = loc(0.0, 0.0) -- anchor:Anchor = C) :
  inside pcb-landpattern:
    val min-silkscreen-text-height = clearance(current-rules(), MinSilkscreenTextHeight)
    layer(Silkscreen("values", Top)) = Text(">REF", min-silkscreen-text-height, anchor, pose)

doc: \<DOC>
Create a plus symbol shape
@param line-length Length of the horizontal or vertical segments
@param line-width
@param pose Pose for the plus symbol
  Default is 1.0mm
<DOC>
public defn PlusSymbol (
  --
  line-length:Double = 1.0,
  line-width:Double = default-silk-width(),
  pose:Pose = loc(0.0, 0.0)
  ) -> Shape:
  val arm = 0.5 * line-length
  pose *
    Union([Line(line-width, [Point((- arm), 0.0),     Point(arm, 0.0)])
           Line(line-width, [Point(0.0,     (- arm)), Point(0.0, arm)])])

doc: \<DOC>
Create a plus symbol shape
@param xc X center coordinate for the plus symbol
@param yc Y center coordinate for the plus symbol
@param l Length of the horizontal or vertical segments
  Default is 1.0mm
<DOC>
public defn PlusSymbol (xc:Double, yc:Double, l:Double = 1.0) -> Shape:
  PlusSymbol(line-length = l, pose = loc(xc, yc))

public defn l2-norm (p:Point) -> Double:
    sqrt((x(p) * x(p)) + (y(p) * y(p)))

public defn max-distance (p1:Point, p2:Point) -> Point:
  if l2-norm(p1) > l2-norm(p2) :
    p1
  else:
    p2

doc: \<DOC>
Helper Struct for Constructing `LandpatternPad` definitions
<DOC>
public defstruct PadInfo :
  pad-id:Int|Ref
  pad-def:Pad
  loc:Pose

doc: \<DOC>
Instantiate a Sequence of Pads

This is a helper function for converting the generated pad
sequence into a set of `LandpatternPad` definitions inside
a `pcb-landpattern` definition.

@param pad-set Sequence of Pads to Generate
<DOC>
public defn instantiate-pads (pad-set:Seqable<PadInfo>, offset:Pose) :
  inside pcb-landpattern:
    for p in pad-set do:
      val r = match(pad-id(p)):
        (i:Int): IndexRef(Ref("p"), i)
        (x:Ref): x

      pad (r) : pad-def(p) at offset * loc(p)
