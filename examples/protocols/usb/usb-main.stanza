#use-added-syntax(jitx)
defpackage jsl/examples/usb/usb-main:
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/protocols/usb
  import jsl/si/constraints
  import jsl/si/pairs
  import jsl/si/helpers
  import jsl/si/couplers
  import jsl/symbols
  import jsl/landpatterns

  import jsl/examples/protocols/common/example-board
  import jsl/examples/protocols/common/example-components


pcb-component usb-src :

  port D1 : diff-pair
  port D2 : diff-pair

  port SSTX : diff-pair
  port SSRX : diff-pair

  pin-properties:
    [pin:Ref | pads:Int ... ]
    [D1.P | 1]
    [D1.N | 2]

    [D2.P | 29]
    [D2.N | 28]

    [SSTX.P | 12]
    [SSTX.N | 13]
    [SSRX.P | 16]
    [SSRX.N | 15]

  val box = BoxSymbol(self)
  assign-symbol $ create-symbol(box)

  val QFN-pkg = QFN(
    num-leads = 32,
    lead-profile = Quad-Lead-Profile(
      span = min-max(4.4, 4.6),
      pitch = 0.5,
      lead = QFN-Lead(
        length = min-max(0.25, 0.35),
        width = min-max(0.15, 0.25)
      )
    ),
    thermal-lead? = Rectangle(3.2, 3.2),
    package-body = PackageBody(
      width = min-max(4.4, 4.6),
      length = min-max(4.4, 4.6),
      height = min-max(0.5, 0.8)
    ),
    pad-planner = Corner-PadPlanner(
      chamfered-corner-shaper(0.1),
      rect-shaper,
      8
    )
  )

  assign-landpattern $ create-landpattern(QFN-pkg)

  val b = usb-superspeed()
  supports b:
    b.data.P => self.D1.P
    b.data.N => self.D1.N
    b.lane[0].TX.P => self.SSTX.P
    b.lane[0].TX.N => self.SSTX.N
    b.lane[0].RX.P => self.SSRX.P
    b.lane[0].RX.N => self.SSRX.N

  supports b:
    b.data.P => self.D2.P
    b.data.N => self.D2.N
    b.lane[0].TX.P => self.SSTX.P
    b.lane[0].TX.N => self.SSTX.N
    b.lane[0].RX.P => self.SSRX.P
    b.lane[0].RX.N => self.SSRX.N


pcb-module usb-uut:

  inst U1 : usb-src
  inst U2 : usb-src

  require ep1 : usb-superspeed() from U1
  require ep2 : usb-superspeed() from U2

  val ti-2 = usb-get-trace-impedance(USB2)
  val usb2-constraints = USB-Constraint(proto = USB2, route-struct = diff(ti-2))
  constrain-topology(ep1.data => ep2.data, usb2-constraints)

  val b-cap = block-cap(100.0e-9)

  val ti-3 = usb-get-trace-impedance(USB3)
  val usb3-constraints = USB-Constraint(proto = USB3, route-struct = diff(ti-3))
  val lane-constraint = LaneConstraint(usb3-constraints)
  ; Notice the `reverse-lane` usage here. I'm assuming that these are two
  ;   active components and hence we need to make `TX => RX` and `RX => TX`
  ;   The `reverse-lane` makes this flip happen.
  ; If we were connecting an active component (MCU) to a passive component (connector)
  ;   then we would not use the `reverse-lane`
  within [src, dst] = constrain-topology(ep1.lane[0] => reverse-lane(ep2.lane[0]), lane-constraint):
    ; Here we construct the differential pair topology for the lane.
    ; The Lane consists of two diff-pairs - TX and RX
    topo-net(src.RX => dst.RX)

    ; The TX channel needs a blocking capacitor which we add with
    ;  the help of the `topo-pair` utility. This is like `topo-net`
    ;  but handles extracting the `dual-pair` require from the
    ;  `tx-bcap` for us.
    inst tx-bcap : dp-coupler(b-cap)
    topo-pair(src.TX => tx-bcap => dst.TX)


set-current-design("usb-example")
setup-board()
; Set the schematic sheet size
set-paper(ANSI-A)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(usb-uut)

; View the results
view-board()
; view-schematic()
view-design-explorer()
; view-bom(BOM-STD)