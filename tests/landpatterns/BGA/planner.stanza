#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/BGA/planner:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/landpatterns/framework
  import jsl/landpatterns/BGA
  import jsl/tests/utils

#if-defined(TESTING):
  defn build-locs (x:BGA-PadPlanner) -> Tuple<GridPosition>:
    to-tuple $ for pos in grid(x) seq?:
      val [r, c] = [row(pos), column(pos)]
      if active?(x, r, c): One(pos)
      else: None()

  defn compare-grid-pos (obs:Tuple<GridPosition>, exps:Tuple<GridPosition>):
    #EXPECT(length(obs) == length(exps))

    val obs-v = to-vector<GridPosition>(obs)
    for exp in exps do :
      val [r,c] = [row(exp), column(exp)]
      val found = for (ob in obs-v, i in 0 to false) first:
        if row(ob) == r and column(ob) == c:
          One([ob, i])
        else:
          None()

      match(found):
        (_:None):
          val msg = to-string("Failed to Match Grid Position: r=%_ c=%_" % [r, c])
          #EXPECT(msg == "")
        (given:One<[GridPosition, Int]>):
          val [pos, i] = value(given)
          remove(obs-v, i)

          #EXPECT(almost-equal?(pose(pos), pose(exp)))

    if length(obs-v) > 0 :
      val msg = to-string("Obs Contained Excess Positions: %," % [obs-v])
      #EXPECT( msg == "")


deftest(BGA) test-full-matrix:
  val uut = Full-Matrix-Planner(
    rows = 3,
    columns = 3,
    pitch = 1.0
    )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 0, loc(-1.0, 1.0)),
    GridPosition(0, 1, loc(0.0, 1.0)),
    GridPosition(0, 2, loc(1.0, 1.0)),
    GridPosition(1, 0, loc(-1.0, 0.0)),
    GridPosition(1, 1, loc(0.0, 0.0)),
    GridPosition(1, 2, loc(1.0, 0.0)),
    GridPosition(2, 0, loc(-1.0, -1.0)),
    GridPosition(2, 1, loc(0.0, -1.0)),
    GridPosition(2, 2, loc(1.0, -1.0)),
  ]

  compare-grid-pos(obs, exp)

deftest(BGA) test-stagger-even-matrix:
  val uut = Staggered-Matrix-Planner(rows = 5, columns = 5, pitch = 1.0)

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 1, loc(-1.0, 2.0)),
    GridPosition(0, 3, loc(1.0, 2.0)),
    GridPosition(1, 0, loc(-2.0, 1.0)),
    GridPosition(1, 2, loc(0.0, 1.0)),
    GridPosition(1, 4, loc(2.0, 1.0)),
    GridPosition(2, 1, loc(-1.0, 0.0)),
    GridPosition(2, 3, loc(1.0, 0.0)),
    GridPosition(3, 0, loc(-2.0, -1.0)),
    GridPosition(3, 2, loc(0.0, -1.0)),
    GridPosition(3, 4, loc(2.0, -1.0)),
    GridPosition(4, 1, loc(-1.0, -2.0)),
    GridPosition(4, 3, loc(1.0, -2.0)),
  ]

  compare-grid-pos(obs, exp)


deftest(BGA) test-stagger-odd-matrix:
  val uut = Staggered-Matrix-Planner(
    phase = Odd-Phase,
    rows = 5,
    columns = 5,
    pitch = 1.0
  )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 0, loc(-2.0, 2.0)),
    GridPosition(0, 2, loc(0.0, 2.0)),
    GridPosition(0, 4, loc(2.0, 2.0)),
    GridPosition(1, 1,loc(-1.0, 1.0)),
    GridPosition(1, 3,loc(1.0, 1.0)),
    GridPosition(2, 0,loc(-2.0, 0.0)),
    GridPosition(2, 2,loc(0.0, 0.0)),
    GridPosition(2, 4,loc(2.0, 0.0)),
    GridPosition(3, 1,loc(-1.0, -1.0)),
    GridPosition(3, 3,loc(1.0, -1.0)),
    GridPosition(4, 0,loc(-2.0, -2.0)),
    GridPosition(4, 2,loc(0.0, -2.0)),
    GridPosition(4, 4,loc(2.0, -2.0)),
  ]

  compare-grid-pos(obs, exp)

deftest(BGA) test-equilat-tri-even-matrix:

  val uut = EquilateralTriangle-Matrix-Planner(
    rows = 5,
    columns = 5,
    tri-pitch = 1.0
  )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 1, loc(-0.5, 1.7320508)),
    GridPosition(0, 3, loc(0.5, 1.7320508)),
    GridPosition(1, 0, loc(-1.0, 0.8660254))
    GridPosition(1, 2, loc(0.0, 0.8660254))
    GridPosition(1, 4, loc(1.0, 0.8660254))
    GridPosition(2, 1, loc(-0.5, 0.0)),
    GridPosition(2, 3, loc(0.5, 0.0)),
    GridPosition(3, 0, loc(-1.0, -0.8660254))
    GridPosition(3, 2, loc(0.0, -0.8660254))
    GridPosition(3, 4, loc(1.0, -0.8660254))
    GridPosition(4, 1, loc(-0.5, -1.7320508)),
    GridPosition(4, 3, loc(0.5, -1.7320508)),
  ]

  compare-grid-pos(obs, exp)

deftest(BGA) test-equilat-tri-odd-matrix:

  val uut = EquilateralTriangle-Matrix-Planner(
    phase = Odd-Phase
    rows = 5,
    columns = 5,
    tri-pitch = 1.0
  )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 0, loc(-1.0, 1.7320508))
    GridPosition(0, 2, loc(0.0, 1.7320508))
    GridPosition(0, 4, loc(1.0, 1.7320508))
    GridPosition(1, 1, loc(-0.5, 0.8660254)),
    GridPosition(1, 3, loc(0.5, 0.8660254)),
    GridPosition(2, 0, loc(-1.0, 0.0))
    GridPosition(2, 2, loc(0.0, 0.0))
    GridPosition(2, 4, loc(1.0, 0.0))
    GridPosition(3, 1, loc(-0.5, -0.8660254)),
    GridPosition(3, 3, loc(0.5, -0.8660254)),
    GridPosition(4, 0, loc(-1.0, -1.7320508))
    GridPosition(4, 2, loc(0.0, -1.7320508))
    GridPosition(4, 4, loc(1.0, -1.7320508))
  ]

  compare-grid-pos(obs, exp)


deftest(BGA) test-perim-matrix :
  val uut = Perimeter-Matrix-Planner(
    inactive = PadIsland(
      2 through 4,
      3 through 3,
    )
    rows = 5,
    columns = 5,
    pitch = 1.0
  )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 0, loc(-2.0, 2.0)),
    GridPosition(0, 1, loc(-1.0, 2.0)),
    GridPosition(0, 2, loc(0.0, 2.0)),
    GridPosition(0, 3, loc(1.0, 2.0)),
    GridPosition(0, 4, loc(2.0, 2.0)),

    GridPosition(1, 0, loc(-2.0, 1.0)),
    GridPosition(1, 1, loc(-1.0, 1.0)),
    GridPosition(1, 3, loc(1.0, 1.0)),
    GridPosition(1, 4, loc(2.0, 1.0)),

    GridPosition(2, 0, loc(-2.0, 0.0)),
    GridPosition(2, 1, loc(-1.0, 0.0)),
    GridPosition(2, 3, loc(1.0, 0.0)),
    GridPosition(2, 4, loc(2.0, 0.0)),

    GridPosition(3, 0, loc(-2.0, -1.0)),
    GridPosition(3, 1, loc(-1.0, -1.0)),
    GridPosition(3, 3, loc(1.0, -1.0)),
    GridPosition(3, 4, loc(2.0, -1.0)),

    GridPosition(4, 0, loc(-2.0, -2.0)),
    GridPosition(4, 1, loc(-1.0, -2.0)),
    GridPosition(4, 2, loc(0.0, -2.0)),
    GridPosition(4, 3, loc(1.0, -2.0)),
    GridPosition(4, 4, loc(2.0, -2.0)),
  ]

  compare-grid-pos(obs, exp)

deftest(BGA) test-therm-enh-matrix :
  val uut = ThermallyEnhanced-Matrix-Planner(
    inactive = PadIsland(
      2 through 4,
      2 through 4,
    ),
    active = PadIsland(
      3 through 3,
      3 through 3,
    ),
    rows = 5,
    columns = 5,
    pitch = 1.0
  )

  val obs = build-locs(uut)

  val exp = [
    GridPosition(0, 0, loc(-2.0, 2.0)),
    GridPosition(0, 1, loc(-1.0, 2.0)),
    GridPosition(0, 2, loc(0.0, 2.0)),
    GridPosition(0, 3, loc(1.0, 2.0)),
    GridPosition(0, 4, loc(2.0, 2.0)),

    GridPosition(1, 0, loc(-2.0, 1.0)),
    GridPosition(1, 4, loc(2.0, 1.0)),

    GridPosition(2, 0, loc(-2.0, 0.0)),
    GridPosition(2, 2, loc(0.0, 0.0)),
    GridPosition(2, 4, loc(2.0, 0.0)),

    GridPosition(3, 0, loc(-2.0, -1.0)),
    GridPosition(3, 4, loc(2.0, -1.0)),

    GridPosition(4, 0, loc(-2.0, -2.0)),
    GridPosition(4, 1, loc(-1.0, -2.0)),
    GridPosition(4, 2, loc(0.0, -2.0)),
    GridPosition(4, 3, loc(1.0, -2.0)),
    GridPosition(4, 4, loc(2.0, -2.0)),
  ]

  compare-grid-pos(obs, exp)
