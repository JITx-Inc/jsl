doc: \<DOC>
@title Quad Package Generator
@brief Generate landpatterns for packages with pins on 4-sides

@desc
This package contains a general purpose generator for creating
square/rectangular packages that have pins along the 4 external
edges of the package shape.

The generators defined here are parameterized to support multiple
different types of packages.

TODO - add diagram here of the package
 - Explain west, south, east, north with respect to the diagram.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/quad:
  import core
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/design/settings
  import jsl/landpatterns/IPC
  import jsl/landpatterns/packages
  import jsl/landpatterns/leads
  import jsl/landpatterns/pads
  import jsl/landpatterns/helpers
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/numbering
  import jsl/landpatterns/pad-planner

public val QUAD-NUM-COLUMNS = 4

doc: \<DOC>
Quad Package Lead Span Definition

This is a tool for defining the `Lead-Profile` for the
leads on the E/W (X) Edges and the N/S (Y) Edges of the
quad package component.

TODO - Do we expand this to have different lead-spans
  on North, South Y edges for example?

This type allows the user to optionally select the
number of pins on either the X edges, the Y edges,
or on both. These numbers must still be consistent
with the `num-leads` parameter of the package.

<DOC>
public defstruct Quad-Lead-Profile <: Equalable & Hashable:
  x-leads : Lead-Profile
  x-count : Maybe<Int> with: (ensure => ensure-positive!)
  y-leads : Lead-Profile
  y-count : Maybe<Int> with: (ensure => ensure-positive!)
with:
  equalable => true
  printer => true
  hashable => true
  constructor => #Quad-Lead-Profile

public defn Quad-Lead-Profile (
  --
  x-span : Toleranced,
  x-pitch : Double,
  x-lead : SMT-Lead,
  y-span : Toleranced,
  y-pitch : Double,
  y-lead : SMT-Lead,
  x-count : Int = ?
  y-count : Int = ?
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(
    Lead-Profile( span = x-span, pitch = x-pitch, lead = x-lead),
    x-count,
    Lead-Profile( span = y-span, pitch = y-pitch, lead = y-lead),
    y-count
  )

public defn Quad-Lead-Profile (
  --
  span : Toleranced,
  pitch : Double,
  lead : SMT-Lead
  ) -> Quad-Lead-Profile:
  val profile = Lead-Profile( span = span, pitch = pitch, lead = lead)
  Quad-Lead-Profile(profile = profile)

public defn Quad-Lead-Profile (
  --
  x-leads:Lead-Profile,
  y-leads:Lead-Profile,
  x-count:Int = ?
  y-count:Int = ?
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(x-leads, x-count, y-leads, y-count)

public defn Quad-Lead-Profile (
  --
  profile:Lead-Profile,
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(profile, None(), profile, None())


doc: \<DOC>
Select Numbering Scheme for QFN lead configuration

For standard square QFN packages, the {@link Column-Major-Numbering}
is sufficient to enumerate the pad ids for a QFN.

For non-standard QFNs that have uneven numbers of leads of
each side we must use a different numbering scheme. This function
will use the configuration in the {@link Quad-Lead-Profile} to
generate an appropriate {@link Uneven-Column-Major-Numbering} for
the asymmetric pin edges of a non-standard QFN.

@throws ValueError If the lead configurations are invalid - such as one side having
less than or equal to 0 leads.
<DOC>
public defn select-quad-numbering (num-leads:Int, pf:Quad-Lead-Profile) -> Numbering :
  match(x-count(pf), y-count(pf)):
    (x:One<Int>, y:One<Int>):
      val ret = Uneven-Column-Major-Numbering(value(x), value(y))
      val obs-total = get-total-pads(ret)
      if obs-total != num-leads:
        throw $ ValueError("Quad: Lead Configurations Don't Match: total = %_ num-leads = %_" % [obs-total, num-leads])
      ret
    (x:One<Int>, y:None    ):
      val x-side = value(x)
      val y-side = (num-leads - (2 * x-side)) / 2
      if y-side <= 0:
        throw $ ValueError("Quad: Invalid N/S side lead configuration: y-side = %_" % [y-side])
      Uneven-Column-Major-Numbering(x-side, y-side)
    (x:None,     y:One<Int>):
      val y-side = value(y)
      val x-side = (num-leads - (2 * y-side)) / 2
      if x-side <= 0:
        throw $ ValueError("Quad: Invalid E/W side lead configuration: x-side = %_" % [x-side])
      Uneven-Column-Major-Numbering(x-side, y-side)
    (x:None,     y:None    ):
      Column-Major-Numbering(num-leads, QUAD-NUM-COLUMNS)

doc: \<DOC>
Base Quad Package Definition

The user is expected to inherit from this base implementation to
create various quad packages like QFN, QFP, etc.
<DOC>
public defstruct Quad-Package <: Package :
  doc: \<DOC>
  Number of leads ignoring any depopulated leads and thermal leads
  <DOC>
  num-leads:Int with: (ensure => ensure-even-positive!, as-method => true)

  doc: \<DOC>
  Lead Profiles for All Edges of the Quad Package
  <DOC>
  lead-profile:Quad-Lead-Profile
  doc: \<DOC>
  Optional thermal lead for the package.
  <DOC>
  thermal-lead?:False|Shape

  doc: \<DOC>
  Package Body for the Quad-based Package.
  <DOC>
  package-body:PackageBody with: (as-method => true)

  doc: \<DOC>
  Pad Planner for the Quad package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with: (as-method => true)

  doc: \<DOC>
  Lead Numbering Scheme for the Quad Package

  This provides a numbering scheme for the leads of the Quad
  package. By default, it uses {@link Column-Major-Numbering}.
  <DOC>
  lead-numbering:Numbering with: (as-method => true)

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with: (as-method => true)

with:
  printer => true
  constructor => #Quad-Package

public defn Quad-Package (
  --
  num-leads:Int,
  lead-profile:Quad-Lead-Profile,
  thermal-lead?:False|Shape,
  package-body:PackageBody,
  pad-planner:PadPlanner = RectanglePadPlanner,
  lead-numbering:Numbering = select-quad-numbering(num-leads, lead-profile),
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  #Quad-Package(
    num-leads, lead-profile, thermal-lead?,
    package-body, pad-planner, lead-numbering,
    density-level
  )

public defmethod build-pads (
  pkg:Quad-Package
  vp:VirtualLP
  ) -> False :

  val profile = lead-profile(pkg)
  val num-scheme = lead-numbering(pkg)
  val pad-planner = pad-planner(pkg)

  ; The Quad is structured as a grid of 4 columns x [M1, M2, M3, M4] rows
  ; For a standard Quad - M1-M4 are all equal.
  ; For a non-standard (rectangular) quad, M1 == M3, M2 == M4 but M1 != M2
  val row-sets = match(num-scheme):
    (ns:Column-Major-Numbering):
      val r = num-leads(pkg) / QUAD-NUM-COLUMNS
      to-tuple $ repeat(r, QUAD-NUM-COLUMNS)
    (ns:Uneven-Column-Major-Numbering):
      columns(ns)

  ; There are 2 X grids and 2 Y grids.
  ; The X grids straddle the Y axis.
  ; The Y grids straddle the X axis.
  ; The X & Y grids map to the following columns:
  ;   X-grid - 0 (West) & 2 (East)
  ;   Y-grid - 1 (South) & 3 (North)

  val x-params = compute-params(x-leads(profile))
  val y-params = compute-params(y-leads(profile))

  defn gen-pad-info () -> Seq<VirtualPad> :
    for c in 0 to QUAD-NUM-COLUMNS seq-cat :
      ; Get the number of rows in this column
      val rows = row-sets[c]
      ; Each column of the grid is structured as a sequence of
      ;  N or M pads. We then translate and then rotate that grid
      ;  to place it in the 4 edge locations.
      val params = x-params when c % 2 == 0 else y-params
      val [pad-size, delta, pitch] = to-tuple(params)
      val rot = to-double(90 * c)
      val offset = loc(0.0, 0.0, rot) * loc((- delta) / 2.0, 0.0)
      val grid = grid-locs(rows, 1, 1.0, pitch)
      for (r in 0 to rows, pos in grid) seq? :
        val pad-id = to-pad-id(num-scheme, r, c)
        val pad-gen? = pad-generator(pad-planner, r, c)
        match(pad-gen?):
          (_:False): None()
          (pad-gen):
            val cls = [
              "pad",
              to-string("col-%_" % [c]),
              to-string("row-%_" % [r])
            ]
            One $ VirtualPad(pad-id, pad-gen(pad-size), offset * pos, class = cls)

  append-all(vp, gen-pad-info())

  match(thermal-lead?(pkg)):
    (lead-shape:Shape):
      val cls = ["pad", "thermal"]
      append(vp, VirtualPad(num-leads(pkg) + 1, smd-pad(lead-shape), loc(0.0, 0.0), class = cls))
    (x:False): false


