#use-added-syntax(jitx)
defpackage jsl/symbols/op-amps:
  import core
  import jitx

  import jsl/ensure
  import jsl/design/Classable
  import jsl/symbols/framework

val DEF_TRI_HEIGHT = 4.0
val DEF_TRI_WIDTH = 4.0
val DEF_LINE_WIDTH = 0.05

val DEF_PIN_LENGTH = 2.5
val DEF_PAD_REF_SIZE = 0.75

doc: \<DOC>
Op-Amp Triangle Symbol Parameterization
<DOC>
public defstruct OpAmpSymbolParams <: SymbolParams :
  tri-height:Double with:
    ensure => ensure-positive!,
    updater => sub-tri-height
    default => DEF_TRI_HEIGHT
  tri-width:Double with:
    ensure => ensure-positive!,
    updater => sub-tri-width
    default => DEF_TRI_WIDTH
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    default => DEF_LINE_WIDTH
  pin-length:Double with:
    ensure => ensure-positive!
    updater => sub-pin-length
    default => DEF_PIN_LENGTH
  pad-ref-size:Double with:
    ensure => ensure-positive!
    updater => sub-pad-ref-size
    default => DEF_PAD_REF_SIZE
  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  equalable => true
  printer => true

public defn to-tuple (p:OpAmpSymbolParams) -> [Double, Double, Double, Double, Double] :
  [tri-height(p), tri-width(p), line-width(p), pin-length(p), pad-ref-size(p)]

var DEF_OPAMP_PARAMS = OpAmpSymbolParams()
public defn get-default-opamp-symbol-params () -> OpAmpSymbolParams :
  DEF_OPAMP_PARAMS

public defn set-default-opamp-symbol-params (v:OpAmpSymbolParams) -> False :
  DEF_OPAMP_PARAMS = v

public defn build-opamp-glyphs (
  node:SymbolNode,
  pitch:Double,
  params:OpAmpSymbolParams
  ):
  val [tri-height, tri-width, line-width, pin-length, pad-ref-size] = to-tuple(params)

  val body-pts = [
    Point(tri-height / 2.0, 0.0),
    Point(tri-height / -2.0, tri-width / 2.0),
    Point(tri-height / -2.0, tri-width / -2.0),
    Point(tri-height / 2.0, 0.0)
  ]
  line(node, body-pts, width = line-width, name = "body")

  ; Input pins will be on the left side and spaced
  ;   `pitch` distance a part.
  val plus-len = tri-height * (10 %)
  val arm = plus-len / 2.0

  val x-pos = (tri-height / 2.0) - arm - (5.0 * line-width)
  val y-pos = (pitch / 2.0)
  val plus-pose = loc((- x-pos), y-pos)
  val plus = plus-pose * Union([Line(line-width, [Point((- arm), 0.0),     Point(arm, 0.0)])
         Line(line-width, [Point(0.0,     (- arm)), Point(0.0, arm)])])
  add-glyph(node, plus, name? = One("plus"))

  val minus-pose = loc((- x-pos), (- y-pos))
  val minus = minus-pose * Line(line-width, [Point((- arm), 0.0),     Point(arm, 0.0)])
  add-glyph(node, minus, name? = One("minus"))


doc: \<DOC>
Best for this value to be divisible by 2. This will
make the output pin resolve on the same grid in the Y
axis.
<DOC>
public val DEF_OPAMP_PITCH = 2.0


public val OPAMP_IN_BASE_REF = Ref("in")
public val OPAMP_OUT_REF = Ref("out")

public defstruct OpAmpSymbol <: SymbolDefn :
  pitch:Double with:
    ensure => ensure-positive!
    default => DEF_OPAMP_PITCH

  doc: \<DOC>
  Input Base Reference or Explicit Input References.
  The symbol needs individual refs for each of the positive and negative input pins.
  To construct these the user has two options:
  1.  Pass a base reference from which to construct the positive and negative inputs
      1.  With this option, the passed reference will be used to construct individual
          `Ref` values from this base `Ref` for the positive and negative inputs to
          the opamp.
      2.  By default, the base Ref `in` will be used, resulting in input pins `in+` and `in-`.
  2.  Pass two explicit Refs, one for each of the positive and negative inputs.
      1.  In this case, the user passes an ordered Tuple of `[PosRef, NegRef]` where
          `PosRef` is the reference for the positive input and `NegReg` is the
          reference for the negative input.
  <DOC>
  in-ref:Ref|[Ref, Ref] with:
    default => OPAMP_IN_BASE_REF

  doc: \<DOC>
  Output Reference
  User can override the default for supporting multi-channel
  chips. The default expected output pin ref is `out`
  <DOC>
  out-ref:Ref with:
    default => OPAMP_OUT_REF

  params:Maybe<OpAmpSymbolParams> with:
    default => None()

with:
  keyword-constructor => true
  printer => true


public defmethod name (x:OpAmpSymbol) -> String :
  "OpAmp"

defmethod get-params (x:OpAmpSymbol) -> OpAmpSymbolParams :
  match(params(x)):
    (_:None): get-default-opamp-symbol-params()
    (given:One<OpAmpSymbolParams>): value(given)

public defn get-input-refs (x:OpAmpSymbol) -> [Ref, Ref]:
  val in-ref-arg = in-ref(x)
  match(in-ref-arg):
    (base:Ref): get-signed-refs(base)
    (exp:[Ref, Ref]):
      exp

public defn add-opamp-pins (x:OpAmpSymbol, node:SymbolNode) :

  val w = pitch(x) / 2.0
  val p = get-params(x) as OpAmpSymbolParams
  val h2 = tri-height(p) / 2.0

  val input-params = VirtualPinParams(
    direction = Left,
    pin-length = pin-length(p),
    pad-ref-size = pad-ref-size(p)
  )

  val [pos-ref, neg-ref] = get-input-refs(x)

  add-pin(node, pos-ref, [(- h2), w], params = input-params, name = "pin-in+")
  add-pin(node, neg-ref, [(- h2), (- w)], params = input-params, name = "pin-in-")

  val output-params = VirtualPinParams(
    direction = Right,
    pin-length = pin-length(p),
    pad-ref-size = pad-ref-size(p)
  )
  add-pin(node, out-ref(x), [h2, 0.0], params = output-params, name = "pin-out")

public defmethod build-pins (x:OpAmpSymbol, node:SymbolNode) :
  add-opamp-pins(x, node)

public defmethod build-artwork (x:OpAmpSymbol, node:SymbolNode) :
  val p = get-params(x) as OpAmpSymbolParams
  build-opamp-glyphs(node, pitch(x), p)

public defmethod build-params (x:OpAmpSymbol, sn:SymbolNode) :
  val p = get-params(x) as OpAmpSymbolParams
  val lp = get-label-params(p)
  val w = tri-width(p)

  ; If you compute the geometry, the
  ;   y intercept of the triangle edge at x = 0.0
  ;   is (w / 4)
  ; We then pad on this a bit for the ref point.
  val y = 0.25 * w

  build-labels(
    lp,
    sn,
    LabelPosition([0.5, y + 1.5], W)
    LabelPosition([0.5, y + 0.5], W)
  )

