#use-added-syntax(jitx, tests)
defpackage jsl/tests/landpatterns/two-pin/SMT:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns/packages
  import jsl/landpatterns/two-pin/SMT

  import jsl/tests/utils
  import jsl/tests/landpatterns/defchecks


deftest(two-pin) test-basic:

  val SMT-0603 = SMT-Chip(
    SMT-Chip-Def(
      "0603", [],
      1.55 +/- 0.15,
      0.8 +/- 0.15,
      0.3 +/- 0.2,
      0.8 +/- 0.15
    ),
    height = 0.45 +/- 0.15,
  )

  val lp-A = create-landpattern(SMT-0603, density-level = DensityLevelA)

  val exp-Pitch-A = 1.65 +/- 0.1

  var grid = PadGrid(lp-A)

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch-A))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      ; X Direction
      #EXPECT(almost-equal?(width(shape), 1.05))
      ; Y Direction
      #EXPECT(almost-equal?(height(shape), 0.65))

  val lp-B = create-landpattern(SMT-0603, density-level = DensityLevelB)

  val exp-Pitch-B = 1.55 +/- 0.1

  grid = PadGrid(lp-B)

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch-B))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      ; X Direction
      #EXPECT(almost-equal?(width(shape), 0.95))
      ; Y Direction
      #EXPECT(almost-equal?(height(shape), 0.55))

  val lp-C = create-landpattern(SMT-0603, density-level = DensityLevelC)

  val exp-Pitch-C = 1.45 +/- 0.1

  grid = PadGrid(lp-C)

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch-C))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      ; X Direction
      #EXPECT(almost-equal?(width(shape), 0.85))
      ; Y Direction
      #EXPECT(almost-equal?(height(shape), 0.45))


deftest(two-pin) test-chip-table :

  val SMT-0805 = get-chip-pkg("0805")
  val SMT-2012m = get-chip-pkg("2012m")

  #EXPECT(num-leads(SMT-0805) == 2)
  #EXPECT(num-leads(SMT-2012m) == 2)

  val exp-Pitch = 1.7 +/- 0.1
  val exp-W = 1.2
  val exp-L = 0.710555
  var lp = create-landpattern(SMT-0805, density-level = DensityLevelC)
  var grid = PadGrid(lp)

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      #EXPECT(almost-equal?(width(shape), exp-W))
      #EXPECT(almost-equal?(height(shape), exp-L))

  ; Check the metric version
  lp = create-landpattern(SMT-2012m, density-level = DensityLevelC)
  grid = PadGrid(lp)

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      #EXPECT(almost-equal?(width(shape), exp-W))
      #EXPECT(almost-equal?(height(shape), exp-L))


deftest(two-pin) test-resistor-smt :

  val pkg = get-resistor-pkg("0402")

  val lp = create-landpattern(pkg, density-level = DensityLevelC)
  val grid = PadGrid(lp)

  val exp-Pitch = 0.84 +/- 0.1

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      #EXPECT(almost-equal?(width(shape), 0.5))
      #EXPECT(almost-equal?(height(shape), 0.380278))

deftest(two-pin) test-capacitor-smt :

  val pkg = get-capacitor-pkg("1206")

  val lp = create-landpattern(pkg, density-level = DensityLevelB)
  val grid = PadGrid(lp)

  val exp-Pitch = 3.2 +/- 0.1

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch))

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      #EXPECT(almost-equal?(width(shape), 1.88))
      #EXPECT(almost-equal?(height(shape), 0.920156))

deftest(two-pin) test-capacitor-smt-with-pose:

  val pkg = get-capacitor-pkg("1206")

  val lp = create-landpattern(pkg, pose = loc(-0.5, 0.0), density-level = DensityLevelB)
  val grid = PadGrid(lp)

  val exp-Pitch = 3.2 +/- 0.1

  #EXPECT(length(rows(grid)) == 2)
  #EXPECT(length(columns(grid)) == 1)
  #EXPECT(check-row-pitch(grid, exp-Pitch))

  val Ys = row-Ys(grid)
  #EXPECT(almost-equal?(Ys, [-1.589921, 1.589921]))

  val Xs = column-Xs(grid)
  #EXPECT(almost-equal?(Xs, [-0.5]))

  val padcols = to-tuple $ values(columns(grid))
  for col in padcols do:
    for (lp-pad in col, i in 1 to false) do:

      val r = ref(lp-pad)
      val expRef = IndexRef(Ref("p"), i)
      #EXPECT(r == expRef)

  for row in values(rows(grid)) do:
    #EXPECT(length(row) == 1)
    for lp-pad in row do:
      val pd = pad(lp-pad)
      val shape = pad-shape(pd) as Rectangle
      #EXPECT(almost-equal?(width(shape), 1.88))
      #EXPECT(almost-equal?(height(shape), 0.920156))
