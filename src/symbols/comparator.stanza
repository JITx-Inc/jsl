#use-added-syntax(jitx)
defpackage jsl/symbols/comparator:
  import core
  import jitx

  import jsl/ensure
  import jsl/symbols/framework
  import jsl/symbols/op-amps


var DEF_COMP_PARAMS = OpAmpSymbolParams()
public defn get-default-comparator-symbol-params () -> OpAmpSymbolParams :
  DEF_COMP_PARAMS

public defn set-default-comparator-symbol-params (v:OpAmpSymbolParams) -> False :
  DEF_COMP_PARAMS = v


public defstruct ComparatorSymbol <: OpAmpSymbol :
  doc: \<DOC>
  Pos/Neg Terminal Pitch
  <DOC>
  pitch:Double with:
    ensure => ensure-positive!
    default => DEF_OPAMP_PITCH
    as-method => true

  doc: \<DOC>
  Input Base Reference or Explicit Input Refs.
  @see OpAmpSymbol for more Information.
  <DOC>
  in-ref:Ref|[Ref, Ref] with:
    default => OPAMP_IN_BASE_REF,
    as-method => true
  doc: \<DOC>
  Output Reference
  User can override the default for supporting multi-channel
  chips. The default expected output pin ref is `out`
  <DOC>
  out-ref:Ref with:
    default => OPAMP_OUT_REF,
    as-method => true

  params:Maybe<OpAmpSymbolParams> with:
    default => None()
    as-method => true
with:
  printer => true
  keyword-constructor => true


public defmethod name (x:ComparatorSymbol) -> String :
  "Comparator"

defmethod get-params (x:ComparatorSymbol) -> OpAmpSymbolParams :
  match(params(x)):
    (_:None): get-default-comparator-symbol-params()
    (given:One<OpAmpSymbolParams>): value(given)

public defmethod build-artwork (x:ComparatorSymbol, node:SymbolNode) :
  val p = get-params(x) as OpAmpSymbolParams
  val child = create-child(node, name = "amp")
  build-opamp-glyphs(child, pitch(x), p)

  val hyst-params = HysteresisParams()
  val hyst-g = HysteresisGlyph(params = hyst-params)
  append(node, hyst-g)
