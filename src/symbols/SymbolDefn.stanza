#use-added-syntax(jitx)
defpackage jsl/symbols/SymbolDefn:
  import core
  import jitx

  import maybe-utils

  import jsl/ensure
  import jsl/symbols/SymbolNode


public val DEF_SYMB_REF_SIZE = 0.5
public val DEF_SYMB_LABEL_SIZE = 0.5

public defstruct SymbolLabelParams <: Equalable :
  doc: \<DOC>
  Dimension of the Reference Designator label
  This value is in schematic symbol grid units.
  <DOC>
  ref-label-size:Double with:
    ensure => ensure-positive!
    updater => sub-ref-label-size
    default => DEF_SYMB_REF_SIZE

  doc: \<DOC>
  Dimension of the Value Label
  This value is in schematic symbol grid units
  If `None()` - then no value label is created.
  <DOC>
  value-label-size:Maybe<Double> with:
    ensure => ensure-positive!
    updater => sub-value-label-size
    default => One $ DEF_SYMB_LABEL_SIZE

with:
  keyword-constructor => true
  printer => true
  equalable => true

doc: \<DOC>
Utility Class for Specifying the label position
<DOC>
public defstruct LabelPosition:
  doc: \<DOC>
  Position of the label
  If `Point` or `[Double, Double]` - then no rotation
    is applied.
  <DOC>
  pos:Pose|Point|[Double, Double]
  doc: \<DOC>
  Anchor Position for the Label
  This places the start or end of the text
  depending on where the anchor is set.
  <DOC>
  anchor:Anchor
with:
  printer => true
  keyword-constructor => true

public defn build-labels (p:SymbolLabelParams, sn:SymbolNode, ref-lab:LabelPosition, val-lab:LabelPosition):
  text(sn, pos(ref-lab), ">REF", anchor = anchor(ref-lab), unit-size = ref-label-size(p))
  match(value-label-size(p)):
    (_:None): false
    (given:One<Double>):
      text(sn, pos(val-lab), ">VALUE", anchor = anchor(val-lab), unit-size = value(given))




var DEF_SYMBOL_LABEL_PARAMS = SymbolLabelParams()
public defn get-default-symbol-label-params () -> SymbolLabelParams:
  DEF_SYMBOL_LABEL_PARAMS

public defn set-default-symbol-label-params (v:SymbolLabelParams) -> False :
  DEF_SYMBOL_LABEL_PARAMS = v


doc: \<DOC>
Base type for Symbol Parameterizations

Each symbol can create a derived type that defines
the unique parameters for that symbol. This type
defines the base parameterizatiosn that all symbols
must have.
<DOC>
public defstruct SymbolParams <: Equalable:
  label-params?:Maybe<SymbolLabelParams> with:
    default => None()
with:
  keyword-constructor => true
  printer => true
  equalable => true

public defmulti get-label-params (x:SymbolParams) -> SymbolLabelParams
public defmethod get-label-params (x:SymbolParams) -> SymbolLabelParams:
  value-or-else(label-params?(x), get-default-symbol-label-params)


doc: \<DOC>
Base Symbol Definition Type
<DOC>
public deftype SymbolDefn

public defmulti name (x:SymbolDefn) -> String

doc: \<DOC>
Retrieve the Symbol Parameter for this symbol Instance
<DOC>
public defmulti get-params (x:SymbolDefn) -> SymbolParams

doc: \<DOC>
Construct the Pin definitions for the symbol

This function will create the pin definitions
in the SymbolNode tree.
<DOC>
public defmulti build-pins (x:SymbolDefn, sn:SymbolNode)
doc: \<DOC>
Construct the artwork for the symbol

This function will construct the glyphs necessary
for the symbol and insert them into the SymbolNode tree.
<DOC>
public defmulti build-artwork (x:SymbolDefn, sn:SymbolNode)

doc: \<DOC>
Construct any parameter text for the symbol

This function constructs text for things like the
resistance/capacitance/inductance value, voltage rating,
designators, and any other parameters that we want to show next to
the symbol in the schematic.
<DOC>
public defmulti build-params (x:SymbolDefn, sn:SymbolNode)

doc: \<DOC>
Consstruct the preferred orientation statement for the symbol

This function implements the `preferred-orientation` statement
which controls at what orientation the symbol will be placed
on the schematic sheet.
<DOC>
public defmulti build-orientation (x:SymbolDefn, sn:SymbolNode)

doc: \<DOC>
Default Implementation for Build Orientation

By default - the function does nothing. It is up to the individual
symbol implementations to provide this functionality as necessary.
<DOC>
public defmethod build-orientation (x:SymbolDefn, sn:SymbolNode) :
  false

doc: \<DOC>
Construct the symbol definition

This method will construct symbol definition by
calling the `build-*` functions in the passed
SymbolNode tree.
<DOC>
public defmulti build-all (x:SymbolDefn, sn:SymbolNode)

doc: \<DOC>
Default `build-all` implementation

The default implementation for build-all
calls the `build-*` methods in the following
order:

1.  build-pins
2.  build-artwork
3.  build-designator
4.  build-params
<DOC>
public defmethod build-all (x:SymbolDefn, sn:SymbolNode) :
  build-pins(x, sn)
  build-artwork(x, sn)
  build-params(x, sn)
  build-orientation(x, sn)

val DEF_SYM_POSE = loc(0.0, 0.0)
doc: \<DOC>
Generator for constructing symbol pins/glyphs

<DOC>
public defmulti make-all (
  x:SymbolDefn
  --
  pose:Pose = ?
  scale:Double = ?
  )

public defmethod make-all (
  x:SymbolDefn
  --
  pose:Pose = DEF_SYM_POSE,
  scale:Double = UNIT-TO-MM
  ) :
  inside pcb-symbol:
    val root = SymbolNode(scale = scale)
    build-all(x, root)
    make-symbol(root, pose)

public defmulti create-symbol (
  x:SymbolDefn,
  --
  pose:Pose = ?,
  scale:Double = ?
  description:String = ?
) -> SchematicSymbol

public defmethod create-symbol (
  x:SymbolDefn,
  --
  pose:Pose = DEF_SYM_POSE,
  scale:Double = UNIT-TO-MM
  description:String = ""
) -> SchematicSymbol :
  pcb-symbol sym:
    name = name(x)
    description = description
    make-all(x, pose = pose, scale = scale)
  sym