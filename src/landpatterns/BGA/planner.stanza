#use-added-syntax(jitx)
defpackage jsl/landpatterns/BGA/planner:
  import core
  import jitx
  import jitx/commands

  import jsl/landpatterns/BGA/pads
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/pad-island
  import jsl/landpatterns/grid-planner
  import jsl/geometry/basics
  import jsl/ensure

val DEF-PAD-CONFIG = PadConfig-R() ; default pad config using radius

doc: \<DOC>
@brief Default BGA-PadPlanner
@desc This pad planner will create circular pads for each BGA
ball location. The user can use the `pad-config` to
modify the construction of each pad including the soldermask
and pastemask openings.

This type is derived from two parent implementations:
1.  {@link type:PadPlanner} which manages selection of which pads to populate
and how they should be constructed
2.  {@link type:GridPlanner} which manages the placement of the created pads
at particular grid locations.
<DOC>
public defstruct BGA-PadPlanner <: PadPlanner & GridPlanner:
  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    default => DEF-PAD-CONFIG

  ; GridPlanner Base
  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)

doc: \<DOC>
@desc Default pad shaper for BGA pads.
This accepts a `Dims` object and will generate a `Circle` object
using only the `x` dimension of the `Dims`.
<DOC>
public defn BGA-Pad-Shaper (s:Dims) -> Shape :
  Circle(to-radius $ x(s))

doc: \<DOC>
@desc Shape generator for BGA pads.
<DOC>
public defmethod shape-generator (bga:BGA-PadPlanner, row:Int, column:Int) -> (Dims -> Shape)|False :
  BGA-Pad-Shaper

doc: \<DOC>
@desc Default pad generator for BGA packages.
This accepts a `BGA-PadPlanner` and will generate a `Pad`
using the `shape-generator` and `build-bga-pad` functions.
<DOC>
public defmethod pad-generator (x:BGA-PadPlanner, row:Int, column:Int) -> (Dims -> Pad)|False :
  val func? = shape-generator(x, row, column)
  match(active?(x, row, column), func?):
    (active:False, x): false
    (active:True, f:(Dims -> Shape)):
      build-bga-pad{f(_0), pad-config(x)}
    (active:True, f:False):
      throw $ NoGeneratorForActivePadError(row, column, "shape-generator")

doc: \<DOC>
@desc Full matrix pad planner - all pads in the grid are active.

@snippet Example of a Full Matrix BGA pad planner
```stanza
  ; NSMD
  val rows = 3
  val cols = 3
  val grid = Grid-Numbering(rows, cols)
  val pitch = 0.5

  val planner = Full-Matrix-Planner(
    rows = rows
    columns = cols
    pitch = pitch
  )
```
<DOC>
public defstruct Full-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Center-to-center spacing between pads in millimeters (mm). Must be positive.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

doc: \<DOC>
@desc Query if a pad is active.
<DOC>
public defmethod active? (x:Full-Matrix-Planner, row:Int, column:Int) -> True|False:
  true

doc: \<DOC>
@desc Staggered Matrix - Every other pad is inactive.

TODO - Diagram here

This pad planner assumes that the grid is structured
in a staggered pitch pattern.
<DOC>
public defstruct Staggered-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  @desc Phase indicates whether the first row pad 0 is empty or populated.
  Default is `Even-Phase`.
  <DOC>
  phase:StaggerPhase with:
    default => Even-Phase

  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  Note that there are typically 2x as many columns in the grid as 
  pads that will get populated.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Center-to-center spacing between pads in millimeters (mm). Must be positive.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

doc: \<DOC>
@desc Query if a particular pad is active in a Staggered-Matrix-Planner.
<DOC>
public defmethod active? (x:Staggered-Matrix-Planner, row:Int, column:Int) -> True|False:
  stagger-pattern(phase(x), row, column)

doc: \<DOC>
@desc Equilateral Triangle Matrix - Similar to Staggered but all pads are equidistant.

TODO - Diagram
<DOC>
public defstruct EquilateralTriangle-Matrix-Planner <: Staggered-Matrix-Planner :
  doc: \<DOC>
  @desc Phase indicates whether the first row pad 0 is empty or populated.
  Default is `Even-Phase`.
  <DOC>
  phase:StaggerPhase with:
    as-method => true
    default => Even-Phase

  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  Note that there are typically 2x as many columns in the grid as 
  pads that will get populated.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Equilateral distance between triangle points in millimeters (mm) or `Dims` object. Must be positive.
  All pads in this planner are equidistant apart and this parameter sets that distance.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

doc: \<DOC>
@desc Query if a pad is active in an EquilateralTriangle-Matrix-Planner.
<DOC>
public defmethod active? (x:EquilateralTriangle-Matrix-Planner, row:Int, column:Int) -> True|False:
  stagger-pattern(phase(x), row, column)

doc: \<DOC>
@desc Perimeter Matrix - All pads in the grid are active except for a specified region.

TODO - Diagram
<DOC>
public defstruct Perimeter-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  @desc Island of pads that will be marked inactive.
  Typically, this will be an interior region near
  the center of the device.
  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the inactive region.
  <DOC>
  inactive:PadIsland|Tuple<PadIsland>

  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Center-to-center spacing between pads in millimeters (mm). Must be positive.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

defn not-inactive? (inactive:PadIsland|Tuple<PadIsland>, row:Int, column:Int) -> True|False :
  match(inactive):
    (island:PadIsland):
      not in-range?(island, row, column)
    (islands:Tuple<PadIsland>):
      for island in islands all?:
        not in-range?(island, row, column)

doc: \<DOC>
@desc Query if a pad is active in a Perimeter-Matrix-Planner setup.
<DOC>
public defmethod active? (p:Perimeter-Matrix-Planner, row:Int, column:Int) -> True|False :
  not-inactive?(inactive(p), row, column)

doc: \<DOC>
@desc Thermally Enhanced Matrix - Matrix with pad(s) set for thermal features.

TODO - Diagram
<DOC>
public defstruct ThermallyEnhanced-Matrix-Planner <: Perimeter-Matrix-Planner :
  doc: \<DOC>
  @desc Island of pads that will be marked inactive.
  Typically, this will be an interior region near
  the center of the device.
  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the inactive region.
  <DOC>
  inactive:PadIsland|Tuple<PadIsland> with:
    as-method => true

  doc: \<DOC>
  @desc Island of pads that will be marked active.
  This island will override the `inactive` island.
  This region is typically an interior region near
  the center of the device and enclosed by the `inactive` island.

  This argument can be either a single `PadIsland` or a
  `Tuple<PadIsland>`. In the `Tuple` case, the union of
  all `PadIsland`s in the tuple forms the active center region.
  <DOC>
  active:PadIsland|Tuple<PadIsland>

  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Center-to-center spacing between pads in millimeters (mm). Must be positive.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

defn is-active? (active:PadIsland|Tuple<PadIsland>, row:Int, column:Int) -> True|False :
  match(active):
    (island:PadIsland):
      in-range?(island, row, column)
    (islands:Tuple<PadIsland>):
      for island in islands any?:
        in-range?(island, row, column)

doc: \<DOC>
@desc Query if a pad is active in a ThermallyEnhanced-Matrix-Planner setup.
<DOC>
public defmethod active? (p:ThermallyEnhanced-Matrix-Planner, row:Int, column:Int) -> True|False :
  is-active?(active(p), row, column) or
    not-inactive?(inactive(p), row, column)

doc: \<DOC>
@desc Corner Cut Matrix - A triangle of pads in each corner are inactive.

Example: corner-cut = 2
  ```
    X | X | O  ...  O | X | X
    X | O | O  ...  O | O | X
    O | O | O  ...  O | O | O
       ...     ...     ...
    O | O | O  ...  O | O | O
    X | O | O  ...  O | O | X
    X | X | O  ...  O | X | X
  ```
<DOC>
public defstruct Corner-Cut-Matrix-Planner <: BGA-PadPlanner :
  doc: \<DOC>
  @desc Size of the triangular inactive region in each corner. Must be positive.
  <DOC>
  corner-cut:Int

  doc: \<DOC>
  @desc Defines the features of each individual BGA pad.
  This defines the shape and parameters for the copper,
  soldermask opening, and paste application. Default is `PadConfig-R()`.
  <DOC>
  pad-config:PadConfig with:
    as-method => true
    default => DEF-PAD-CONFIG

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; GridPlanner
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  doc: \<DOC>
  @desc Number of rows in the landpattern. Must be positive.
  <DOC>
  rows:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Number of columns in the landpattern. Must be positive.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Center-to-center spacing between pads in millimeters (mm). Must be positive.
  <DOC>
  pitch:Double|Dims with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  @desc Pose (location and orientation) of the landpattern. Default is loc(0.0, 0.0, 0.0).
  <DOC>
  pose:Pose with:
    as-method => true
    default => loc(0.0, 0.0, 0.0)
with:
  keyword-constructor => true
  printer => true

doc: \<DOC>
@desc Query if a pad is active in a Corner-Cut-Matrix-Planner setup.
<DOC>
public defmethod active? (x:Corner-Cut-Matrix-Planner, row:Int, column:Int) -> True|False:
  val r-inv = rows(x) - row - 1
  val c-inv = columns(x) - column - 1
  min(row, r-inv) + min(column, c-inv) >= corner-cut(x)

