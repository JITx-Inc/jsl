#use-added-syntax(jitx)
defpackage jsl/symbols/resistors:
  import core
  import collections
  import jitx
  import math

  import maybe-utils

  import jsl/errors
  import jsl/ensure
  import jsl/geometry/LineRectangle
  import jsl/design/Classable
  import jsl/symbols/framework

doc: \<DOC>
@member TriangleWaveStyle
@member OpenRectangle
<DOC>
public defenum ResistorStyle:
  TriangleWaveStyle
  OpenRectangle

val DEF_RES_STYLE = TriangleWaveStyle
val DEF_PORCH_WIDTH = 0.25
val DEF_AMPLITUDE = 0.25
val DEF_PERIODS = 3.0
val DEF_LINE_WIDTH = 0.05

doc: \<DOC>
Resistor Symbol Parameters

These parameters define the characteristics
of a triangle-wave style resistor sybmol.

TODO - Diagram here showing parameters.
<DOC>
public defstruct ResistorSymbolParams <: SymbolParams:
  style:ResistorStyle with:
    default => DEF_RES_STYLE
  doc: \<DOC>
  Length of the line from the pin to the start of the resistor body.
  <DOC>
  porch-width:Double with:
    ensure => ensure-positive!,
    updater => sub-porch-width
    default => DEF_PORCH_WIDTH

  doc: \<DOC>
  Width of the body of the resistor
  For triangle wave versions, this is the amplitude of the
  triangle wave from X=0 to X=triangle peak.
  For the rectangle shaped version, this is the distance from
  X=0 to either edge of the rectangle shape.
  <DOC>
  amplitude:Double with:
    ensure => ensure-positive!
    updater => sub-amplitude
    default => DEF_AMPLITUDE

  doc: \<DOC>
  Number of oscillation periods in the triangle wave.
  This value should typically be a whole- or half-number,
  otherwise, you may get strange discontinuities.
  This values does not apply to the rectangular shaped
  variants.
  <DOC>
  periods:Double with:
    ensure => ensure-positive!
    updater => sub-periods
    default => DEF_PERIODS

  doc: \<DOC>
  Line width for the shapes drawn
  <DOC>
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    default => DEF_LINE_WIDTH

  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  printer => true
  equalable => true

public defn to-tuple (p:ResistorSymbolParams) -> [ResistorStyle, Double, Double, Double, Double] :
  [style(p), porch-width(p), amplitude(p), periods(p), line-width(p)]

var DEF_RESISTOR_PARAMS = ResistorSymbolParams()
public defn get-default-resistor-symbol-params () -> ResistorSymbolParams :
  DEF_RESISTOR_PARAMS

public defn set-default-resistor-symbol-params (v:ResistorSymbolParams) -> False :
  DEF_RESISTOR_PARAMS = v

doc: \<DOC>
Build a Resistor Shape in the scene graph

This function constructs the shape for a canonical resistor
symbol depending on the `style` parameter. defined by a triangle wave.

Triangle Wave - Coarse Example (except rotated 90 degrees):

----/\/\/\----

Rectangular Shape - Coarse Example (rotated 90 degrees):
    ------
----|    |----
    ------

TODO - we should add a diagram here that outlines
the parameterization of the symbol.

Shape is computed as a Line in Symbol Grid Units

@param node Scene graph where we want to draw the resistor symbol.
@param pitch Distance between the two pins
@param params The parameterization of this resistor symbol
<DOC>
public defn build-resistor-glyphs (
  node:SymbolNode,
  pitch:Double,
  params:ResistorSymbolParams
  ):
  val [style, porch-width, amplitude, periods, width] = to-tuple(params)

  if porch-width > (pitch / 2.0) :
    ; This is a minimum check. The symbol is going to look
    ;  like trash if `porch-width` is even close to
    ;  pitch / 2.0
    throw $ ValueError("Invalid Porch Width for Resistor Sym: %_" % [porch-width])

  val w = pitch / 2.0

  val tri-start = w - porch-width
  val total-w = 2.0 * tri-start
  val period-w = total-w / periods

  val x-lookup = [0.0, amplitude, 0.0, (- amplitude) ]

  defn construct-triangle-wave () -> Seq<Point> :
    generate<Point>:
      ; Front Porch
      yield(Point(0.0, (- w)))
      yield(Point(0.0, (- tri-start)))

      val quarter-periods = to-int(2.0 * ceil( periods / 0.5 ))
      for i in 0 to quarter-periods do:
        val y =  to-double(i) * (period-w / 4.0) - tri-start
        val x = x-lookup[ i % 4 ]
        yield(Point(x, y))

      ; Back Porch
      yield(Point(0.0, tri-start))
      yield(Point(0.0, w))

  defn construct-open-rect () :
    line(node, [
      Point(0.0, (- w)),
      Point(0.0, (- tri-start)),
      ],
    width = width, name = "front-porch")
    line(node, [
      Point(0.0, tri-start)
      Point(0.0, w)
      ],
    width = width, name = "back-porch")

    val rect = LineRectangle(2.0 * amplitude, total-w, line-width = width)
    add-glyph(node, rect, name? = One("body"))

  match(style):
    (_:TriangleWaveStyle):
      line(node, to-tuple $ construct-triangle-wave(), width = width, name = "body")
    (_:OpenRectangle):
      construct-open-rect()

doc: \<DOC>
Resistor Symbol Definition

This is the base-line resistor symbol definition
and provides a standard implementation with sane
defaults.

The user can customize the look and feel of the
resistor symbol by using the `set-resistor-glyph`
function.
<DOC>
public defstruct ResistorSymbol <: TwoPinSymbol :
  doc: \<DOC>
  Pitch between the Pins of a Resistor Symbol
  This value is in symbol grid units (not mm)
  <DOC>
  pitch:Double with:
    ensure => ensure-positive!
    default => TWO_PIN_DEF_PITCH
    as-method => true
  doc: \<DOC>
  Indicates whether the symbol will use c/a style pins

  This is typically not used in resistors because they
  are not polarized - but it is part of the TwoPinSymbol
  definition. The default is `false`.
  <DOC>
  polarized?:True|False with:
    as-method => true
    default => false
  doc: \<DOC>
  Optional Override Parameters for Resistor Glyph

  This value can be used to override the resistor glyph
  parameters and replace them with custom parameters.
  This value is by default `None()` which will cause
  {@link get-default-resistor-symbol-params} to be
  consulted for parameters when the symbol is built.
  <DOC>
  params:Maybe<ResistorSymbolParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  printer => true

public defmethod name (x:ResistorSymbol) -> String :
  "Resistor"

defmethod get-params (x:ResistorSymbol) -> ResistorSymbolParams :
  value-or-else(params(x) as Maybe<ResistorSymbolParams>, get-default-resistor-symbol-params)

public defmethod build-artwork (
  x:ResistorSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as ResistorSymbolParams
  build-resistor-glyphs(sn, pitch(x), p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Resistor Symbol Management

var CURR-RESISTOR-SYMBOL:TwoPinSymbol = ResistorSymbol()
public defn get-default-resistor-symbol () : CURR-RESISTOR-SYMBOL
public defn set-default-resistor-symbol (symb:TwoPinSymbol) :
  CURR-RESISTOR-SYMBOL = symb


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variable Resistor Symbol

val DEF_VAR_ARROW_SPAN = (300 %)

public defstruct VariableResistorSymbolParams <: SymbolParams :
  doc: \<DOC>
  Override the default resistor symbol parameters with this value.
  <DOC>
  res-params?:Maybe<ResistorSymbolParams> with:
    default => None()
    updater => sub-res-params
  doc: \<DOC>
  Override the default arrow parameters with this value.
  We will grab `get-default-arrow-symbol-params()` by
  default if this value is `None`.
  <DOC>
  arrow-params?:Maybe<ArrowSymbolParams> with:
    default => None()
    updater => sub-arrow-params
  doc: \<DOC>
  Set the X span of the arrow
  This, along with the body length of the resistor symbol, defines
  the shaft length of the arrow. This value is relative to the
  `amplitude` of the resistor body.
  <DOC>
  arrow-span:Percentage with:
    ensure => ensure-positive!
    default => DEF_VAR_ARROW_SPAN
    updater => sub-arrow-span

  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  equalable => true
  printer => true


var DEF_VAR_RESISTOR_PARAMS = VariableResistorSymbolParams()
public defn get-default-variable-resistor-symbol-params () -> VariableResistorSymbolParams :
  DEF_VAR_RESISTOR_PARAMS

public defn set-default-variable-resistor-symbol-params (v:VariableResistorSymbolParams) -> False :
  DEF_VAR_RESISTOR_PARAMS = v


doc: \<DOC>
Variable Resistor Symbol
<DOC>
public defstruct VariableResistorSymbol <: TwoPinSymbol :
  doc: \<DOC>
  Pitch between the Pins of a Resistor Symbol
  This value is in symbol grid units (not mm)
  <DOC>
  pitch:Double with:
    as-method => true
    default => TWO_PIN_DEF_PITCH
  doc: \<DOC>
  Indicates whether the symbol will use c/a style pins

  This is typically not used in resistors because they
  are not polarized - but it is part of the TwoPinSymbol
  definition. The default is `false`.
  <DOC>
  polarized?:True|False with:
    as-method => true
    default => false
  doc: \<DOC>
  Optional Override Parameters for Variable Resistor Glyph

  This value can be used to override the resistor glyph
  parameters and replace them with custom parameters.
  This value is by default `None()` which will cause
  {@link get-default-variable-resistor-symbol-params} to be
  consulted for parameters when the symbol is built.
  <DOC>
  params:Maybe<VariableResistorSymbolParams> with:
    as-method => true
    default => None()
with:
  printer => true
  keyword-constructor => true

public defmethod name (x:VariableResistorSymbol) -> String :
  "Variable-Resistor"

defmethod get-params (x:VariableResistorSymbol) -> VariableResistorSymbolParams :
  value-or-else(params(x) as Maybe<VariableResistorSymbolParams>, get-default-variable-resistor-symbol-params)

public defn build-variable-resistor-glyphs (
  sn:SymbolNode,
  pitch:Double,
  x:VariableResistorSymbolParams
  ):
  val p = value-or-else(res-params?(x), get-default-resistor-symbol-params)
  build-resistor-glyphs(sn, pitch, p)

  ; Draw arrow here.
  val amp = amplitude(p)
  val porch = porch-width(p)
  val aw = arrow-span(x)
  val x-dim = 2.0 * amp * aw
  ; The arrow is going to run the length of the body
  val y-dim = pitch - (2.0 * porch)

  val shaft = sqrt(pow(x-dim, 2.0) + pow(y-dim, 2.0))
  val start = Point(
    (x-dim / 2.0),
    (y-dim / 2.0)
  )
  val angle = to-degrees $ atan2((- y-dim), (- x-dim))

  val curr-params = value-or-else(arrow-params?(x), get-default-arrow-symbol-params)
  val arrow-params = sub-shaft-length(curr-params, shaft)
  val arrow-sh = loc(start, angle) * construct-arrow(arrow-params)
  add-glyph(sn, arrow-sh, name? = One("arrow"))

public defmethod build-artwork (
  x:VariableResistorSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as VariableResistorSymbolParams
  build-variable-resistor-glyphs(sn, pitch(x), p)

var CURR-VARRES-SYMBOL:TwoPinSymbol = VariableResistorSymbol()
public defn get-default-variable-resistor-symbol () : CURR-VARRES-SYMBOL
public defn set-default-variable-resistor-symbol (symb:TwoPinSymbol) :
  CURR-VARRES-SYMBOL = symb


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Photo Resistor Symbol

val DEF_PHOTO_ARR_MARGIN = 0.2
val DEF_PHOTO_ARR_PITCH = 0.5
val DEF_PHOTO_ARR_ANGLE = 45.0

public defstruct PhotoResistorSymbolParams <: SymbolParams :
  doc: \<DOC>
  Override the default resistor symbol parameters with this value.
  <DOC>
  res-params?:Maybe<ResistorSymbolParams> with:
    default => None()
    updater => sub-res-params
  doc: \<DOC>
  Override the default arrow parameters with this value.
  We will grab `get-default-arrow-symbol-params()` by
  default if this value is `None`.
  <DOC>
  arrow-params?:Maybe<ArrowSymbolParams> with:
    default => None()
    updater => sub-arrow-params
  doc: \<DOC>
  Margin between the start of the arrows and the body of the resistors
  <DOC>
  arrow-margin:Double with:
    ensure => ensure-positive!
    default => DEF_PHOTO_ARR_MARGIN
    updater => sub-arrow-margin
  doc: \<DOC>
  Distance between the photo symbol arrows (pointing at the body)
  <DOC>
  arrow-pitch:Double with:
    ensure => ensure-positive!
    default => DEF_PHOTO_ARR_PITCH
    updater => sub-arrow-pitch
  doc: \<DOC>
  Angle of the arrows with respect to the X-axis in Degrees
  <DOC>
  arrow-angle:Double with:
    ensure => ensure-positive!
    default => DEF_PHOTO_ARR_ANGLE
    updater => sub-arrow-angle

  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  equalable => true
  printer => true


var DEF_PHOTO_RESISTOR_PARAMS = PhotoResistorSymbolParams()
public defn get-default-photo-resistor-symbol-params () -> PhotoResistorSymbolParams :
  DEF_PHOTO_RESISTOR_PARAMS

public defn set-default-photo-resistor-symbol-params (v:PhotoResistorSymbolParams) -> False :
  DEF_PHOTO_RESISTOR_PARAMS = v

doc: \<DOC>
Photo Resistor Symbol
<DOC>
public defstruct PhotoResistorSymbol <: TwoPinSymbol :
  doc: \<DOC>
  Pitch between the Pins of a Resistor Symbol
  This value is in symbol grid units (not mm)
  <DOC>
  pitch:Double with:
    as-method => true
    default => TWO_PIN_DEF_PITCH
  doc: \<DOC>
  Indicates whether the symbol will use c/a style pins

  This is typically not used in resistors because they
  are not polarized - but it is part of the TwoPinSymbol
  definition. The default is `false`.
  <DOC>
  polarized?:True|False with:
    as-method => true
    default => false
  doc: \<DOC>
  Optional Override Parameters for Photo Resistor Glyph

  This value can be used to override the resistor glyph
  parameters and replace them with custom parameters.
  This value is by default `None()` which will cause
  {@link get-default-photo-resistor-symbol-params} to be
  consulted for parameters when the symbol is built.
  <DOC>
  params:Maybe<PhotoResistorSymbolParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  printer => true

public defmethod name (x:PhotoResistorSymbol) -> String :
  "Photo-Resistor"

public defn build-photo-resistor-glyphs (
  sn:SymbolNode,
  pitch:Double,
  x:PhotoResistorSymbolParams
  ) :

  val p = value-or-else(res-params?(x), get-default-resistor-symbol-params)
  val arrow-params = value-or-else(arrow-params?(x), get-default-arrow-symbol-params)

  build-resistor-glyphs(sn, pitch, p)

  ; Draw arrows here.
  val amp = amplitude(p)
  val margin = arrow-margin(x)
  val y-offset = arrow-pitch(x) / 2.0
  val angle = arrow-angle(x)

  val arrow-sh = construct-arrow(arrow-params)
  val arrow-1 = loc(Point(amp + margin, y-offset), angle) * arrow-sh
  add-glyph(sn, arrow-1, name? = One("arrow-1"))
  val arrow-2 = loc(Point(amp + margin, (- y-offset)), angle) * arrow-sh
  add-glyph(sn, arrow-2, name? = One("arrow-2"))

defmethod get-params (x:PhotoResistorSymbol) -> PhotoResistorSymbolParams:
  value-or-else(params(x) as Maybe<PhotoResistorSymbolParams>, get-default-photo-resistor-symbol-params)

public defmethod build-artwork (
  x:PhotoResistorSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as PhotoResistorSymbolParams
  build-photo-resistor-glyphs(sn, pitch(x), p)


var CURR-PHOTO-SYMBOL:TwoPinSymbol = PhotoResistorSymbol()
public defn get-default-photo-resistor-symbol () : CURR-PHOTO-SYMBOL
public defn set-default-photo-resistor-symbol (symb:TwoPinSymbol) :
  CURR-PHOTO-SYMBOL = symb

