#use-added-syntax(jitx)
defpackage jsl/examples/landpatterns/SMT:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns

  import jsl/examples/landpatterns/board

val board-shape = RoundedRectangle(50.0, 50.0, 0.25)

pcb-symbol test-sym:
  pin p[1] at Point(-2.54, 2.54) with :
    direction = Left
    length = 2.54
    number-size = 0.762
    name-size = 0.762

  pin p[2] at Point(-2.54, 0.0) with :
    direction = Left
    length = 2.54
    number-size = 0.762
    name-size = 0.762

pcb-component test-SMT:

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Up |  0]
    [p[2] | p[2] | Down | 0]

  assign-symbol(test-sym)
  val chip-def = chips["1206"]
  val pkg = SMT-Chip(
    chip-def,
    density-level = DensityLevelC
  )

  ; val pkg = get-chip-pkg("1210", DensityLevelB)

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-module test-design:
  inst c : test-SMT
  place(c) at loc(0.0, 0.0) on Top


; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("SMT-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(test-design)

; Use any helper function from helpers.stanza here. For example:
; run-check-on-design(my-design)

; View the results
view-board()
