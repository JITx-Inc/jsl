#use-added-syntax(jitx,tests)
defpackage jsl/tests/layerstack:
  import core
  import jitx
  import jitx/commands

  import jsl/layerstack
  import jsl/tests/utils
  import jsl/errors

deftest(layerstack) test-basic-symmetric:
  val stack = LayerStack(name = "Carl's Crazy Stack")

  val copper-1mm = Copper(1.0, name = "cu")
  val core-FR4 = FR4(1.0, name = "core")
  val prepreg-FR4 = FR4(0.5, name = "prepreg")

  add-symmetric(copper-1mm, core-FR4,
    add-symmetric(copper-1mm, prepreg-FR4,
      add-symmetric(copper-1mm, core-FR4, stack)
    )
  )

  validate!(stack)

  val [prepreg-2, cu-2, core-2] = get-conductor(stack, 2)
  #EXPECT(prepreg-2 is-not None)
  #EXPECT(core-2 is-not None)

  val [prepreg-0, cu-0, core-0] = get-conductor(stack, 0)
  #EXPECT(prepreg-0 is None)
  #EXPECT(core-0 is-not None)

  val [prepreg-5, cu-5, core-5] = get-conductor(stack, 5)
  #EXPECT(prepreg-5 is-not None)
  #EXPECT(core-5 is None)

  ; For debug
  ; val pcb-stack = create-pcb-stackup(stack)
  ; print-def(pcb-stack)

deftest(layerstack) test-validate:

  val empty = LayerStack(name = "Empty Stack")
  expect-throw({validate!(empty)})

  val stack = LayerStack(name = "TwoCoppers")

  val copper-1mm = Copper(1.0, name = "cu")
  val core-FR4 = FR4(1.0, name = "core")

  add-symmetric(copper-1mm, core-FR4, stack)
  add-top(copper-1mm, stack)

  expect-throw({validate!(stack)})

  ; Two Dielectrics in a row

  val stack2 = LayerStack(name = "TwoDielectrics")

  add-symmetric(copper-1mm, core-FR4, stack2)
  add-bottom(core-FR4, stack2)
  add-bottom(core-FR4, stack2)

  expect-throw({validate!(stack2)})

deftest(layerstack) test-compute-thickness:

  val testvecs = [
    [0.5,  0.0174]
    [1.0,  0.0348]
    [2.0,  0.0696]
    [3.0,  0.1044]
    [4.0,  0.1392]
  ]
  for testvec in testvecs do:
    val [weight, exp-thick] = testvec
    val thick = compute-thickness(CopperMaterial, weight)
    #EXPECT(almost-equal?(thick, exp-thick, 0.001))

deftest(layerstack) test-get-conductor:
  val stack = LayerStack(name = "6-layer")

  val copper-1mm = Copper(1.0, name = "cu")
  val core-FR4 = FR4(1.0, name = "core")
  val prepreg-FR4 = FR4(0.5, name = "prepreg")

  add-symmetric(copper-1mm, core-FR4,
    add-symmetric(copper-1mm, prepreg-FR4,
      add-symmetric(copper-1mm, core-FR4, stack)
    )
  )

  validate!(stack)

  #EXPECT(get-conductor-count(stack) == 6)

  val [prepreg-2?, cu-2, core-2?] = get-conductor(stack, 2)
  #EXPECT(prepreg-2? is-not None)
  #EXPECT(core-2? is-not None)

  val prepreg-2 = value!(prepreg-2?)
  val core-2 = value!(core-2?)

  #EXPECT(name(prepreg-2) is-not None)
  #EXPECT(value!(name(prepreg-2)) == "prepreg")
  #EXPECT(description(prepreg-2) is None)
  #EXPECT(thickness(prepreg-2) == 0.5)

  #EXPECT(name(core-2) is-not None)
  #EXPECT(value!(name(core-2)) == "core")
  #EXPECT(description(core-2) is None)
  #EXPECT(thickness(core-2) == 1.0)

  #EXPECT(name(cu-2) is-not None)
  #EXPECT(value!(name(cu-2)) == "cu")
  #EXPECT(description(cu-2) is None)
  #EXPECT(thickness(cu-2) == 1.0)

  ; Check the `get-copper` under failure cases:

  expect-throw({get-conductor(stack, -1)})
  expect-throw({get-conductor(stack, 10)})


deftest(layerstack) test-with-soldermask:

  val stack = LayerStack(name = "2-layer")

  val copper-1mm = Copper(2.0, name = "cu")
  val core-FR4 = FR4(1.0, name = "core")

  add-symmetric(copper-1mm, core-FR4, stack)
  add-soldermask(Soldermask(0.025), stack)

  validate!(stack)

  #EXPECT(get-conductor-count(stack) == 2)

  val [sm?, cu-0, core-0?] = get-conductor(stack, 0)
  #EXPECT(sm? is-not None)
  #EXPECT(core-0? is-not None)

  val sm = value!(sm?)
  val core-0 = value!(core-0?)

  #EXPECT(almost-equal?(thickness(sm), 0.025))

  val [core-1?, cu-1, sm2?] = get-conductor(stack, 1)
  #EXPECT(sm2? is-not None)
  #EXPECT(core-1? is-not None)

;============================================================================
;<note>
My Crazy Stack - each layer is different for testing
 0 - copper-3oz
 1 - core-FR4-2
 2 - copper-2oz
 3 - prepreg-FR4
 4 - copper-1oz
 5 - core-FR4-1
 6 - copper-1oz
 7 - prepreg-FR4
 8 - copper-2oz
 9 - core-FR4-2
 10 - copper-3oz
;<note>
val test-stack = LayerStack(name = "My Crazy Stack")
val copper-1mm = Copper(1.0, name = "cu1")
val copper-2mm = Copper(2.0, name = "cu2")
val copper-3mm = Copper(3.0, name = "cu3")
val core-FR4-1 = FR4(1.0, name = "core1")
val core-FR4-2 = FR4(2.0, name = "core2")
val prepreg-FR4 = FR4(0.5, name = "prepreg")

add-symmetric(copper-3mm, core-FR4-2,
  add-symmetric(copper-2mm, prepreg-FR4,
    add-symmetric(copper-1mm, core-FR4-1, test-stack)
  )
)
validate!(test-stack)
print("%~" % [test-stack])

; Test: test-stack[0]
deftest(layerstack) test-get :
  #EXPECT(test-stack[0] == copper-3mm)
  #EXPECT(test-stack[1] == core-FR4-2)
  #EXPECT(test-stack[2] == copper-2mm)
  #EXPECT(test-stack[3] == prepreg-FR4)

; Test: conductors(test-stack)[0]
deftest(layerstack) test-conductors :
  #EXPECT(conductors(test-stack)[0] == copper-3mm)
  #EXPECT(conductors(test-stack)[1] == copper-2mm)
  #EXPECT(conductors(test-stack)[2] == copper-1mm)
  #EXPECT(conductors(test-stack)[3] == copper-1mm)
  #EXPECT(conductors(test-stack)[4] == copper-2mm)
  #EXPECT(conductors(test-stack)[5] == copper-3mm)

; Test: set-name(test-stack[0] One("cu3-new"))
deftest(layerstack) test-set-name :
  val copper-3mm = Copper(3.0, name = "cu3")
  #EXPECT(test-stack[0] == copper-3mm)
  val copper-3mm-new = Copper(3.0, name = "cu3-new")
  set-name(test-stack[0] "cu3-new")
  ;Verify that the layer has the new name
  #EXPECT(test-stack[0] == copper-3mm-new)

; Test: test-stack[0] = new-stack
deftest(layerstack) test-set :
  #EXPECT(test-stack[0] == copper-3mm)
  test-stack[0] = copper-1mm
  #EXPECT(test-stack[0] == copper-1mm)

  #EXPECT(test-stack[1] == core-FR4-2)
  test-stack[1] = core-FR4-1
  #EXPECT(test-stack[1] == core-FR4-1)

; Test: 
;     Copper(0.3) : specify thickness 
;     Copper(0.3, name = "Cu") : specify thickness and name
;     Copper(0.3, AluminumMaterial, name = "Cu") : specify thickness, material and name
deftest(layerstack) test-copper-optional-arguments :
  val copper-1mm = Copper(1.0)
  val copper-1mm-explicit = Copper(1.0, CopperMaterial)
  #EXPECT(copper-1mm == copper-1mm-explicit)

  val copper-1mm-with-name = Copper(1.0, name = "new-Cu")
  set-name(copper-1mm "new-Cu")
  #EXPECT(copper-1mm-with-name == copper-1mm)
  
  val aluminum-1mm = Copper(1.0, AluminumMaterial)
  val aluminum-1mm-with-name = Copper(1.0, AluminumMaterial, name = "alum")
  set-name(aluminum-1mm "alum")
   #EXPECT(aluminum-1mm-with-name == aluminum-1mm)
 

