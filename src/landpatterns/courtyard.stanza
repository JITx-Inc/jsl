#use-added-syntax(jitx)
defpackage jsl/landpatterns/courtyard:
  import core
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns/helpers
  import jsl/geometry/basics
  import jsl/landpatterns/leads
  import jsl/geometry/box
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/packages with:
    only => (PackageBody, envelope)
  import jsl/geometry/LineRectangle

public val DEF_COURTYARD_WIDTH = 0.1

public defn build-courtyard-origin (
  vp:VirtualLP,
  --
  pose:Pose = loc(0.0, 0.0)
  side:Side = Top
  ) -> False:

  val shape = PlusSymbol(line-width = DEF_COURTYARD_WIDTH, pose = pose)
  add-artwork(vp, Courtyard(side), shape, class = "courtyard")

doc: \<DOC>
Generator for Courtyard Origin Marker

This function generates a `plus` sign marker
at the origin of a component landpattern.

@param pose Override the origin location by applying a
`pose`. This can both rotate and translate the marker position.
@param side Indicates which side to place the courtyard on. Default
per convention is the top.
<DOC>
public defn make-courtyard-origin (
  --
  pose:Pose = loc(0.0, 0.0)
  side:Side = Top
  ):
  inside pcb-landpattern:
    layer(Courtyard(side)) = PlusSymbol(line-width = DEF_COURTYARD_WIDTH, pose = pose)


public defn compute-courtyard-boundary (
  lp-pads:Seqable<LandPatternPad|VirtualPad>,
  pkg-body:PackageBody,
  density-level:DensityLevel,
  excess:Double,
  side:Side,
  pos:Pose,
  ):
  ; @NOTE - Here I'm using the soldermask openings for the pads
  ;   as the controlling boundary/outline. By doing this -
  ;   I can enforce at least a sliver of soldermask between
  ;   components.
  val pad-outline = bounds(lp-pads, layer-spec = SolderMask(side))
  val pkg-outline = bounds(envelope(pkg-body, density-level = density-level))
  val outline = union(pad-outline, pkg-outline)
  val outline* = fatten(excess, outline)
  pos * to-Rectangle(outline*)

doc: \<DOC>
Generator for Courtyard Boundary

The courtyard boundary creates the typical minimum spacing
expected around a component. This spacing is for mechanical assembly
and thermal reflow reasons.

This function uses the copper pads and the package body to define the
envelope of the component. This envelope is then expanded with the `excess`
amount on all sides. We then compute the smallest rectangle that
encapsulates all of these expanded features. This rectangle forms
the courtyard boundary.

@param pkg-body Package Body of the component
@param excess Additional space to pad the boundary of the
pads for this component when making the courtyard boundary.
The default value is 0.5mm
@param side Which side of the board to draw the courtyard on. By
default we use the `Top` side as per convention.
@param pose Pose offset for this group of features. Default is no transform.
@param density-level
<DOC>
public defn make-courtyard-boundary (
  pkg-body:PackageBody
  density-level:DensityLevel
  --
  excess:Double = 0.5
  side:Side = Top
  pos:Pose = loc(0.0, 0.0),
  ):
  inside pcb-landpattern:
    val outline = compute-courtyard-boundary(pads(self), pkg-body, density-level, excess, side, pos)
    layer(Courtyard(side)) = outline

doc: \<DOC>
Create a courtyard boundary in a Virtual Landpattern

@param vp Virtual Landpattern Container
@param pkg-body Package Body for the Component
@param density-level
<DOC>
public defn build-courtyard-boundary (
  vp:VirtualLP,
  pkg-body:PackageBody
  density-level:DensityLevel
  --
  excess:Double = 0.5
  pos:Pose = loc(0.0, 0.0)
  side:Side = Top,
  ) -> False:
  val outline = compute-courtyard-boundary(get-pads(vp), pkg-body, density-level, excess, side, pos)
  add-artwork(vp, Courtyard(side), outline, class = "courtyard")

doc: \<DOC>
Retrieve the Dimensions of the Courtyard Boundary
<DOC>
public defn get-courtyard-boundary (
  vp:VirtualLP
  --
  side:Side = Top
  ) -> Box|False:
  val content = get-layer(vp, Courtyard(side))
  if length(content) == 0: false
  else:
    bounds $ Union(content)


doc: \<DOC>
Extract the courtyard dimensions for the landpattern of a component.

This function introspects the given component and finds the courtyard
layer of its landpattern. It then returns the dimensions of the landpatterns
courtyard layer.

@param comp Instantiable component (pcb-component) with assigned landpattern.
@return X and Y dimensions of the courtyard boundary in mm
<DOC>
public defn get-courtyard-dims (comp:Instantiable) -> Dims:
  val lp = landpattern(comp)
  val topC = Courtyard(Top)
  dims $ Union $ for lspec in layers(lp) seq?:
    switch(specifier(lspec)):
      Courtyard(Top):
        One $ shape(lspec)
      else: None()
