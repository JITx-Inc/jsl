#use-added-syntax(jitx,tests)
defpackage jsl/tests/geometry:
  import core
  import jitx
  import jitx/commands

  import jsl/tests/utils
  import jsl/geometry/basics
  import jsl/geometry/NotchedShapes

deftest(geometry) test-expand-dims:
  val uut = Dims(2.0, 1.0)

  ; Double amount
  var obs = expand(uut, 1.0)
  #EXPECT(almost-equal?(obs, Dims(4.0, 3.0)))

  obs = expand(uut, -0.05)
  #EXPECT(almost-equal?(obs, Dims(1.9, 0.9)))

  obs = expand(uut, 0.0)
  #EXPECT(almost-equal?(obs, Dims(2.0, 1.0)))

  ; Dims amount
  obs = expand(uut, Dims(0.5, 0.4))
  #EXPECT(almost-equal?(obs, Dims(3.0, 1.8)))

  obs = expand(uut, Dims(0.25, -0.1))
  #EXPECT(almost-equal?(obs, Dims(2.5, 0.8)))

deftest(geometry) test-expand-union:

  val testvecs = [
    [Rectangle(2.0, 3.0), 0.5, Dims(3.0, 4.0)],
    [Union([Rectangle(2.0, 3.0)]), 0.5, Dims(3.0, 4.0)]
    [Union([Rectangle(2.0, 3.0), Circle(1.0, 0.0, 0.5)]), 0.5, Dims(3.5, 4.0)]

  ]

  for testvec in testvecs do:
    val [uut, amount, exp] = testvec

    val output = expand-union(uut, amount)
    val obs = dims(output)
    #EXPECT(almost-equal?(obs, exp))

deftest(geometry) test-bounds-dims:

  val uut = [Dims(2.0, 3.0), Dims(3.0, 2.0)]
  var obs = bounds(uut)

  #EXPECT(almost-equal?(obs, Dims(3.0, 3.0)))

  obs = bounds(uut, expand-by = 0.5)
  #EXPECT(almost-equal?(obs, Dims(4.0, 4.0)))

  obs = bounds(uut, expand-by = -0.25)
  #EXPECT(almost-equal?(obs, Dims(2.5, 2.5)))

deftest(geometry) test-bounds-contains?:
  val uut = Dims(2.0, 1.0)

  #EXPECT(contains?(uut, Dims(0.5, 0.5)))
  #EXPECT(not contains?(uut, Dims(1.0, 2.0)))

deftest(geometry) test-to-point:
  val test-vectors = [
    [Point(1.0, 2.0),  Point(1.0, 2.0)],
    [[3,4], Point(3.0, 4.0)],
    [[1.5, 3.2], Point(1.5, 3.2)]
  ]

  for test-vector in test-vectors do:
    val [input, exp] = test-vector
    val obs = to-point(input)
    #EXPECT(almost-equal?(obs, exp))

deftest(geometry) test-scale-shape:
  val test-vectors = [
    [[Point(0.0, 0.0), 3.0], Point(0.0, 0.0)],
    [[Point(0.5, 0.75), 2.0], Point(1.0, 1.5)],
    [[Circle(Point(0.2, 0.3), 0.3), 1.5], Circle(Point(0.3, 0.45), 0.45)]
    [[Rectangle(2.5, 5.0, loc(0.25, 0.5)), 0.25], Rectangle(0.625, 1.25, loc(0.0625, 0.125))]
    [[Line(0.4, [Point(0.2, 0.3), Point(-0.2, -0.1)]), 2.7], Line(1.08, [Point(0.54, 0.81), Point(-0.54, -0.27)])]
    [[Text("asdf", 12.0, C, loc(2.0, -3.0)), 1.5], Text("asdf", 18.0, C, loc(3.0, -4.5))]
    [
      [Polygon([Point(0.2, 0.2), Point(-0.2, 0.2), Point(-0.2, -0.3), Point(0.2, -0.3)]), 1.5],
      Polygon([Point(0.3, 0.3), Point(-0.3, 0.3), Point(-0.3, -0.45), Point(0.3, -0.45)])
    ]
  ]

  for test-vector in test-vectors do:
    val [input, exp] = test-vector
    val [sh, scale] = input

    val obs = scale-shape(sh, scale)
    val exp* = exp as Shape
    match(obs, exp*):
      (a*:Point, b*:Point):
        #EXPECT(almost-equal?(a*, b*))
      (a*:Rectangle, b*:Rectangle):
        #EXPECT(almost-equal?(a*, b*))
      (a*:Circle, b*:Circle):
        #EXPECT(almost-equal?(a*, b*))
      (a*:Line, b*:Line):
        #EXPECT(almost-equal?(a*, b*))
      (a*:Text, b*:Text):
        #EXPECT(almost-equal?(a*, b*))
      (a*:Polygon, b*:Polygon):
        #EXPECT(almost-equal?(a*, b*))
      (a*, b*):
        #EXPECT("Unhandled Types" == "")

deftest(geometry) test-notched-rect:

  val a = NotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 0.1)
  #EXPECT(a is Polygon)

  expect-throw({NotchedRectangle(width = -1.0, height = 1.0, notch-width = 0.1, notch-height = 0.1)})
  expect-throw({NotchedRectangle(width = 1.0, height = -1.0, notch-width = 0.1, notch-height = 0.1)})
  expect-throw({NotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 1.5)})
  expect-throw({NotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 1.0)})
  expect-throw({NotchedRectangle(width = 1.0, height = 1.0, notch-width = 2.0, notch-height = 0.1)})

deftest(geometry) test-double-notched-rect:

  val a = DoubleNotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 0.1)
  #EXPECT(a is Polygon)

  expect-throw({DoubleNotchedRectangle(width = -1.0, height = 1.0, notch-width = 0.1, notch-height = 0.1)})
  expect-throw({DoubleNotchedRectangle(width = 1.0, height = -1.0, notch-width = 0.1, notch-height = 0.1)})
  expect-throw({DoubleNotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 1.5)})
  expect-throw({DoubleNotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 0.75)})
  expect-throw({DoubleNotchedRectangle(width = 1.0, height = 1.0, notch-width = 0.1, notch-height = 0.5)})
  expect-throw({DoubleNotchedRectangle(width = 1.0, height = 1.0, notch-width = 2.0, notch-height = 0.1)})

deftest(geometry) test-chipped-circle:

  val a = ChippedCircle(radius = 1.0, edge-dist = 0.1)
  #EXPECT(a is PolygonWithArcs)

  expect-throw({ChippedCircle(radius = -1.0, edge-dist = 0.1)})
  expect-throw({ChippedCircle(radius = 1.0, edge-dist = -0.1)})
  expect-throw({ChippedCircle(radius = 1.0, edge-dist = 1.0)})
  expect-throw({ChippedCircle(radius = 1.0, edge-dist = 1.5)})

deftest(geometry) test-double-chipped-circle:

  val a = DoubleChippedCircle(radius = 1.0, edge-dist = 0.1)
  #EXPECT(a is PolygonWithArcs)

  expect-throw({DoubleChippedCircle(radius = -1.0, edge-dist = 0.1)})
  expect-throw({DoubleChippedCircle(radius = 1.0, edge-dist = -0.1)})
  expect-throw({DoubleChippedCircle(radius = 1.0, edge-dist = 1.0)})
  expect-throw({DoubleChippedCircle(radius = 1.0, edge-dist = 1.5)})