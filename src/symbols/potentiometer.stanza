#use-added-syntax(jitx)
defpackage jsl/symbols/potentiometer:
  import core
  import collections
  import jitx

  import jsl/design/Classable
  import jsl/symbols/framework
  import jsl/symbols/resistors

public defn build-potentiometer-glyphs (
  node:SymbolNode,
  pitch:Double,
  res-params:ResistorSymbolParams = get-default-resistor-symbol-params()
  arrow-params:ArrowSymbolParams = get-default-arrow-symbol-params()
  ):
  val child = create-child(node, name = "body")
  build-resistor-glyphs(child, pitch, res-params)

  val w-start = amplitude(res-params)
  val w-end = pitch / 2.0
  val shaft-len = abs(w-end - w-start)
  val arrow* = sub-shaft-length(arrow-params, shaft-len)
  val arrow = loc((- w-start), 0.0, 180.0) * construct-arrow(arrow*)
  add-glyph(node, arrow, name? = One("wiper-arrow"))


public defstruct PotentiometerSymbol <: ResistorSymbol :
  doc: \<DOC>
  Pitch between the Pins of a Resistor Symbol
  This value is in symbol grid units (not mm)
  <DOC>
  pitch:Double with: (
    as-method => true
    default => TWO_PIN_DEF_PITCH
  )
  polarized?:True|False with:
    as-method => true
    default => false
with:
  printer => true
  constructor => #PotentiometerSymbol

public defn PotentiometerSymbol (
  --
  pitch:Double = TWO_PIN_DEF_PITCH
  ) -> PotentiometerSymbol:
  #PotentiometerSymbol(pitch)

public defmethod name (x:PotentiometerSymbol) -> String :
  "Potentiometer"

public defmethod build-pins (
  x:PotentiometerSymbol,
  node:SymbolNode
  ) :
  two-pin-build-pins(x, node)
  val w = pitch(x) / 2.0
  add-pin(node, Ref("wiper"), [(- w), 0.0], name = "pin-wiper")

public defmethod build-artwork (
  x:PotentiometerSymbol, sn:SymbolNode
  ):
  build-potentiometer-glyphs(sn, pitch(x))

var CURR-RESISTOR-SYMBOL:TwoPinSymbol = ResistorSymbol()
public defn get-default-resistor-symbol () : CURR-RESISTOR-SYMBOL
public defn set-default-resistor-symbol (symb:TwoPinSymbol) :
  CURR-RESISTOR-SYMBOL = symb

