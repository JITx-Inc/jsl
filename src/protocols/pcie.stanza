doc: \<DOC>
@brief PCI-e Protocol

PCI-e is a serial communication supporting high speed data links
@see https://en.wikipedia.org/wiki/PCI_Express

This functions and definitions in this file support defining PCI-e
connections between components in a board design.

## PCIe Blocking Capacitors

The PCIe specification calls for AC coupling for the data lanes. This is typically
achieved using a blocking capacitor. When connecting two active components, this typically
means blocking caps from `Tx -> Rx` on both sides of the link. When connecting an
active component to a passive component, this typically means adding the blocking caps only on
the `Tx -> Rx` side of the link.

The functions in this module allow you to pass a blocking capacitor as an `Instantiable`.
This component will get instantiated for each leg of the diff-pair. These functions handle
the topology configuration, but the user needs to set a `pin-model` statement on the capacitor component.


<DOC>
#use-added-syntax(jitx)
defpackage jsl/protocols/pcie:
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/errors
  import jsl/ensure
  import jsl/si
  import jsl/pin-assignment


doc: \<DOC>
@brief PCI-e Generation enums
This is a fixed list of possible generation definitions for PCIe
Can be extended if needed to include PCIE-V3.1, for example
@member PCIE-V1
@member PCIE-V2
@member PCIE-V3
@member PCIE-V4
@member PCIE-V5
@member PCIE-V6
@member PCIE-V7
<DOC>

public pcb-enum jsl/protocols/pcie/PCIeVersion:
  PCIE-V1
  PCIE-V2
  PCIE-V3
  PCIE-V4
  PCIE-V5
  PCIE-V6
  PCIE-V7

doc: \<DOC>
@brief PCI-e Width enums
This is a fixed list of possible lane widths for PCIe
@member PCIe-x1
@member PCIe-x2
@member PCIe-x4
@member PCIe-x8
@member PCIe-x16
@member PCIe-x32
<DOC>
public pcb-enum jsl/protocols/pcie/PCIeWidth:
  PCIe-x1
  PCIe-x2
  PCIe-x4
  PCIe-x8
  PCIe-x16
  PCIe-x32

public defn PCIe-enum-to-int (en:PCIeWidth) -> Int:
  switch(en) :
    PCIe-x1  :  1
    PCIe-x2  :  2
    PCIe-x4  :  4
    PCIe-x8  :  8
    PCIe-x16 : 16
    PCIe-x32 : 32

doc: \<DOC>
Optional PCIe Control Pin Enum
@member PCIe-PRSNT# Hot-plug (Presences) detection
@member PCIe-WAKE# Device Wake
@member PCIe-PERST# Reset
@member PCIe-CLKREQ# Clock Request
<DOC>
public pcb-enum jsl/bundles/pcie/PCIePins :
  PCIe-PRSNT#
  PCIe-WAKE#
  PCIe-PERST#
  PCIe-CLKREQ#

doc: \<DOC>
@brief PCI-e Bundle
The Data Bundle consists of a number (1 or more) of RX and TX pairs (1 RX/TX pair set = 1 lane)
and it also includes a refclk (100MHz) differential pair
@param lanes The number of lanes to be configured for this bundle.
@param opt-pins Optional pin support where the value is an enum from jsl/bundles/pcie/PCIePins
@member control Control channel for PCIe
@member data Data channel for PCIe
<DOC>

; for the future
; P/N swapping is ok per pair
; all lanes being swapped is ok as well
; this should be handled at the component level

public defn pcie (lanes:Int, opt-pins:PCIePins ...) :
  pcie-b(lanes, opt-pins)

; Common Control signals - minus Presence. 
val COMMON_CTL = [PCIe-WAKE#, PCIe-PERST#, PCIe-CLKREQ#]

doc: \<DOC>
Construct an N-lane PCIe Bundle with Standard Control Signals

The default control signal set is:

*  PCIe-WAKE#
*  PCIe-PERST#
*  PCIe-CLKREQ#

But doesn't include presence / hotplug detection. See
{@link pcie-with-hotplug}

@return PCIe `pcb-bundle` definition
<DOC>
public defn pcie-std (lanes:Int):
  pcie-b(lanes, COMMON_CTL)

public defn pcie-with-hotplug (lanes:Int):
  pcie-b(lanes, to-tuple $ cat(COMMON_CTL, [PCIe-PRSNT#]))

doc: \<DOC>
Parametric PCIe Bundle Definition

@param lanes Number of {@link lane-pair} sets for the `data` interface
@param opt-pins Set of optional control pins to construct.

@member control PCIe Control bundle controlled by `opt-pins`
@member data PCIe Data bundle
<DOC>
public pcb-bundle pcie-b (lanes:Int, opt-pins:Collection<PCIePins>) :
  name = "PCI-e"
  description = "PCI-e Serial Communications Link"
  port control : pcie-control(opt-pins)
  port data : pcie-data(lanes)

doc: \<DOC>
@brief PCI-e Data Bundle
The Data bundle consists of a number (1 or more) of RX and TX pairs (1 RX/TX pair set = 1 lane)
and it also includes a refclk (100MHz) differential pair.
@param lanes The number of lanes in the bundle.
@member lane An array of {@link lane-pair} ports
@member refclk Reference Clock, typically 100MHz
<DOC>
public pcb-bundle pcie-data (lanes:Int) :
  name = "PCI-e Data"
  description = "PCI-e Serial Communications Link Data"
  port lane : lane-pair[lanes]
  port refclk : diff-pair

doc: \<DOC>
PCIe Control Bundle

Note that all pins are optional because there are common 
cases where control pins are shared across bundles. By allowing
them to be configured - we can create sub-set bundles that
are often useful when doing pin assignment.

@member PRSNT# HotPlug / Presence detection
@member PEWAKE# Wake signal
@member PERST# Reset signal
@member CLKREQ# Clock Request signal
<DOC>
pcb-bundle pcie-control-b (pins:Collection<PCIePins>) :
  name = "PCI-e Control"
  description = "PCI-e Serial Communications Link Control"
  for p in pins do :
    switch(p) :
      PCIe-PRSNT# : make-port(`PRSNT#)    ; hot plug detection
      PCIe-WAKE# : make-port(`PEWAKE#)
      PCIe-PERST# : make-port(`PERST#)    ; PCI-E Reset signal
      PCIe-CLKREQ# : make-port(`CLKREQ#) ; clock request


public defn has-PEWAKE# (b:Bundle) -> True|False :
  for p in pins(b) any? :
    val refName = to-string $ ref(p)
    suffix?(refName, "PEWAKE#")

public defn has-PERST# (b:Bundle) -> True|False :
  for p in pins(b) any? :
    val refName = to-string $ ref(p)
    suffix?(refName, "PERST#")

public defn has-PRSNT# (b:Bundle) -> True|False :
  for p in pins(b) any? :
    val refName = to-string $ ref(p)
    suffix?(refName, "PRSNT#")

public defn has-CLKREQ# (b:Bundle) -> True|False :
  for p in pins(b) any? :
    val refName = to-string $ ref(p)
    suffix?(refName, "CLKREQ#")

doc: \<DOC>
@brief PCI-e Control bundle
PCI-e is a serial communication supporting high speed data links

All signal pins of the control bundle are optional and controlled by
the `pins` set.

@param pins An optional set of pins to be implemented in the control bundle
@member PRSNT# HotPlug / Presence detection
@member PEWAKE# Wake signal
@member PERST# Reset signal
@member CLKREQ# Clock Request signal
<DOC>

public defn pcie-control (pins:Collection<PCIePins>) :
  pcie-control-b(pins)

doc: \<DOC>
@brief Curated values for skew and loss of PCIe Channel
This is a helper function that returns the bounds on the intra-pair
skew timing and maximum loss as expected by the particular standard targeted by
the user.The values returned are a toleranced value with upper/lower limits for the
intra-pair skew and the maximum loss as a double representing dB. Some defaults in the
table are derived from the references listed below.
https://pcisig.com/pci-express%C2%AE-50-architecture-channel-insertion-loss-budget-0

There is also a very loose lane to lane skew spec for different lane rates:
| Parameter	       | 2.5 GT/s | 5.0 GT/s | 8.0 GT/s | 16.0 GT/s | Unit  |
|------------------|----------|----------|----------|-----------|-------|
|Lane to Lane Skew |     20   |    8     |     6    |      5    |   ns  |

Calculating the intra-pair skew distance to time correspondence depends on the material.
tpd 147 ps/in 170 ps/in -> 147 fs/mil to 170 fs/mil
@  5 mils spec'ed that is a intra-pair skew of 750 fs to 850 fs
@ 10 mils spec'ed that is a intra-pair skew of 1.50 ps to 1.70 ps
for system board skew match: page 2 of @see https://docs.broadcom.com/doc/pcie-pcb-layout-review

Another good reference:
@see https://community.nxp.com/pwmxy87654/attachments/pwmxy87654/powerquicc/2284/1/AN307_TP_HARDWARE_DESIGN_PCI_SMGIII.pdf
<DOC>

public defn pcie-get-skew-loss-vals (gen:jsl/protocols/pcie/PCIeVersion) -> [Toleranced, Double]:
  switch(gen) :
    PCIE-V1 : [0.0 +/-  1.0e-12,  12.0]  ;   2.5 GT/s
    PCIE-V2 : [0.0 +/-  1.0e-12,  12.0]  ;   5.0 GT/s
    PCIE-V3 : [0.0 +/-  1.0e-12,  10.3]  ;   8.0 GT/s
    PCIE-V4 : [0.0 +/- 0.850e-12, 13.5]  ;  16.0 GT/s
    PCIE-V5 : [0.0 +/- 0.850e-12, 16.0]  ;  32.0 GT/s
    PCIE-V6 : [0.0 +/- 0.850e-12, 16.0]  ;  64.0 GT/s
    PCIE-V7 : [0.0 +/- 0.850e-12, 16.0]  ; 128.0 GT/s

doc: \<DOC>
@brief Differential impedance specified by the PCIe standard
This is a helper function that returns the expected differential
trace impedance for the specified generation of the PCIe standard.

@return Upper/lower limits for the impedance.
<DOC>

public defn pcie-get-trace-impedance (gen:jsl/protocols/pcie/PCIeVersion) -> Toleranced :
  switch(gen) :
    PCIE-V1 : 100.0 +/- (5 %)  ;   2.5 GT/s
    PCIE-V2 : 100.0 +/- (5 %)  ;   5.0 GT/s
    PCIE-V3 :  85.0 +/- (5 %)  ;   8.0 GT/s
    PCIE-V4 :  85.0 +/- (5 %)  ;  16.0 GT/s
    PCIE-V5 :  85.0 +/- (5 %)  ;  32.0 GT/s
    PCIE-V6 :  85.0 +/- (5 %)  ;  64.0 GT/s
    PCIE-V7 :  85.0 +/- (5 %)  ; 128.0 GT/s

doc: \<DOC>
PCIe SI Constraint Type

This derives from the differential pair constraint
as most of the controlled signals are differential
lane pairs (tx/rx). All of these constraints
will be applied to all of the pairs.

The `constrain` function for this type expects
two compatible `pcie-b` types.
<DOC>
public defstruct PCIe-Constraint <: DiffPair-Constraint :
  doc: \<DOC>
  Intra-pair Timing Skew Constraint in Seconds
  <DOC>
  skew:Toleranced  with:
    as-method => true
  doc: \<DOC>
  Diff-Pair Max Loss Limit Constraint in dB
  <DOC>
  loss:Double with:
    ensure => ensure-positive!,
    as-method => true
  doc: \<DOC>
  Differential Routing Structure for each Diff-Pair
  <DOC>
  route-struct:DifferentialRoutingStructure with:
    as-method => true
with:
  keyword-constructor => true
  constructor => #PCIe-Constraint

doc: \<DOC>
Constructor for the PCIe Link Constraint

@param v PCIe Version that we are building
@param rs Differential Routing Structure constraints for all
lane pairs and the refclk. This is not applied to the control signals.
<DOC>
public defn PCIe-Constraint (v:PCIeVersion, rs:DifferentialRoutingStructure) -> PCIe-Constraint:
  val [sk, ml] = pcie-get-skew-loss-vals(v)
  PCIe-Constraint(
    skew = sk,
    loss = ml,
    route-struct = rs
  )

doc: \<DOC>
Constrain a PCIe Link

@param cst Constraint Object
@param src Source End Point - must be of `pcie-b` type
@param dst Destination End Point - must be of `pcie-b` type and match
the parameterization of `src`, including lane counts.
<DOC>
public defmethod constrain (cst:PCIe-Constraint, src:JITXObject, dst:JITXObject) -> False :
  inside pcb-module:

    val src-ep = find-signal-end(src)
    val dst-ep = find-signal-end(dst)

    val src-cnt = length(src-ep.data.lane)
    val dst-cnt = length(dst-ep.data.lane)
    if src-cnt != dst-cnt:
      throw $ ValueError("MisMatched Lane Counted Between Src and Dst: src=%_ dst=%_" % [src-cnt, dst-cnt])

    for i in indices(src-ep.data.lane) do:
      diffpair-constrain(cst, src-ep.data.lane[i].TX, dst-ep.data.lane[i].TX)
      diffpair-constrain(cst, src-ep.data.lane[i].RX, dst-ep.data.lane[i].RX)

    diffpair-constrain(cst, src-ep.data.refclk, dst-ep.data.refclk)


doc: \<DOC>
Reverse the PCIe Connection using a `node`

When connecting two active PCIe devices, you will often
need to create a `null modem` style connection instead
of the default `tx => tx` and `rx => rx`.

This function allows for a convenient way to create
`tx => rx` and `rx => tx` lane connections.
@param p Input port bundle as a `pcie-b` bundle
@return node of the same type of `p` with the null-modem
connection applied to the tx/rx lanes. The `refclk` and
control lines are straight through connections like normal.
<DOC>
public defn reverse-pcie-lanes (p:JITXObject) :
  inside pcb-module :
    match(port-type(p)):
      (b:Bundle):
        node temp:b
        for i in indices(p.data.lane) do:
          topo-net(p.data.lane[i].TX => temp.data.lane[i].RX)
          topo-net(p.data.lane[i].RX => temp.data.lane[i].TX)
        ; Clock and Controls are straight through.
        topo-net(p.data.refclk => temp.data.refclk)
        ; Controls are not usually topologies.
        net (p.control, temp.control)
        temp
      (x):
        throw $ ValueError("Invalid Port - Expected Bundle - Received: %_" % [x])

