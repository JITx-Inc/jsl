#use-added-syntax(jitx)
defpackage jsl/examples/symbols/net-symbols:
  import core
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns
  import jsl/symbols

  import jsl/symbols/net-symbols
  import jsl/examples/landpatterns/board


pcb-component R-test:
  mpn = "XXXXX"
  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Left |  0]
    [p[2] | p[2] | Right | 0]

  val symb = ResistorSymbol()
  assign-symbol(create-symbol(symb))

  val pkg = get-chip-pkg("1206")

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component C-test:
  mpn = "YYYYY"
  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Left |  0]
    [p[2] | p[2] | Right | 0]

  val symb = CapacitorSymbol()
  assign-symbol(create-symbol(symb))

  val pkg = get-chip-pkg("1206")

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)



pcb-module top-level:

  inst R1 : R-test
  inst C1 : C-test

  net (R1.p[1], C1.p[1])

  net GND (C1.p[2])

  val gs = GroundSymbol()
  val gs-symb = create-symbol(gs)

  symbol(GND) = gs-symb

  net VDD (R1.p[2])

  val ps = PowerSymbol()
  val ps-symb = create-symbol(ps)

  symbol(VDD) = ps-symb


val board-shape = RoundedRectangle(50.0, 50.0, 0.25)

; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("Ground-Symb-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(top-level)

; Use any helper function from helpers.stanza here. For example:
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()

