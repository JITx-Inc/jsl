doc: \<DOC>

TODO:

We should discuss Symbol Grid Units and what
this abstraction is for.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/symbols/SymbolNode:
  import core
  import collections
  import jitx

  import jsl/errors
  import jsl/design/Classable
  import jsl/geometry/basics

val DEF_SYMNODE_POSE = loc(0.0, 0.0)

public val UNIT-TO-MM = 2.54

doc: \<DOC>
Base Type for all SymbolNode types
<DOC>
public deftype SymbolElement <: Classable

public defstruct VirtualPin <: SymbolElement :
  ; Virtual Pin is going to be implemented as `pin` statements in the
  ;  `pcb-symbol` but without the `PinProperties` - ie, like this:
  ;
  ;  pin `name at Point(0.0, 0.0)
  ;
  ; and Not like this:
  ;
  ;  pin `name at Point(0.0, 0.0):
  ;    direction = Left
  ;    length = 1.0
  ;    ...
  ;
  ;  This will give us the control over the pin symbol that we would otherwise
  ;  lack.

  doc: \<DOC>
  Pin Name
  This must be a valid symbol reference in JITX
  <DOC>
  pin-name:Ref
  ; Location of the pin connection point in the current `SymbolNode`
  ;   frame of reference.
  doc: \<DOC>
  Position of the pin connection point
  This position is with respect to the current `SymbolNode`'s frame of
  reference. This value is in millimeters.
  <DOC>
  position:Point

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualPin
  printer => true


public defn VirtualPin (
  pin-name:String|Ref,
  position:Point
  --
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
  ) -> VirtualPin :
  val pin-name* = match(pin-name):
    (x:Ref):x
    (x:String): Ref(x)
  #VirtualPin(pin-name*, position, name?, to-class-vector(class))

; public defmethod make-symbol (vp:VirtualPin, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
;   inside pcb-symbol:
;     ; TODO - apply scale
;     val pin-r = pin-name(vp)
;     pin (pin-r) at pose * position(vp)


doc: \<DOC>
A Glyph is a set of geometry that creates an electrical symbol

This is used to group together geometry into various symbols. These
symbols are often reusable. Primarily this is
<DOC>
public defstruct Glyph <: SymbolElement :
  art:Shape

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #Glyph
  printer => true

public defn Glyph (
  art:Shape
  --
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
  ) -> Glyph:
  #Glyph(art, name?, to-class-vector(class))

; I'm not really using this. I'm not sure
;  if it is really necessary.
val DEF_LAYER_NAME = "symbol"

defn build-layer-name (name:Maybe<String>) -> String :
  match(name):
    (x:One<String>): value(x)
    (x:None): DEF_LAYER_NAME

; public defmethod make-symbol (g:Glyph, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
;   inside pcb-symbol:
;     ; TODO - Apply scale
;     val lname = build-layer-name $ name?(g)
;     layer( lname ) = pose * art(g)

doc: \<DOC>
Scene Graph Builder for Schematic Symbols

The `SymbolNode` is a node in the scene graph
for a schematic symbol. The idea is that we can
construct a symbol by combing various leafs that
are transformed from the root node. This allows for
grouping content and simplifying the calculations needed
to combine various forms of content.
<DOC>
public defstruct SymbolNode <: SymbolElement :

  parent:Maybe<SymbolNode> with: (
    setter => set-parent
  )
  children:Vector<SymbolNode>
  pose:Pose

  doc: \<DOC>
  Converts from Symbol grid to millimeters

  When we create schematic symbols, we often like to construct
  elements of that symbol with respect to a grid. For example,
  we might want all of the pins on a 100mil grid. This makes
  all of the symbols consistent and leads to a nicer aesthetic.

  This parameter is used to enforce a grid scaler so that when
  we construct pins and glyphs, we can use simple units.

  The default scale converts 1.0 -> 2.54mm -> 100mil
  <DOC>
  scale:Maybe<Double>

  glyphs:Vector<Glyph>
  vpins:Vector<VirtualPin>

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #SymbolNode
  printer => true

public defn SymbolNode (
  parent:SymbolNode
  pose:Pose = DEF_SYMNODE_POSE,
  --
  scale:Maybe<Double> = None(),
  name:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> SymbolNode :
  #SymbolNode(
    One(parent),
    Vector<SymbolNode>(),
    pose,
    scale,
    Vector<Glyph>(),
    Vector<VirtualPin>(),
    name,
    to-class-vector(class)
  )

public defn SymbolNode (
  pose:Pose = DEF_SYMNODE_POSE,
  --
  scale:Double = UNIT-TO-MM,
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> SymbolNode :
  #SymbolNode(
    None(),
    Vector<SymbolNode>(),
    pose,
    One(scale),
    Vector<Glyph>(),
    Vector<VirtualPin>(),
    name,
    to-class-vector(class)
  )

public defn is-root? (sn:SymbolNode) -> True|False :
  parent(sn) is None

doc: \<DOC>
Recursively Retrieve the Scale Parameter
This function uses either the local scale override
for this node or searches back through its
ancestors (parents) for a valid scale parameter.
@throws RuntimeError If no ancestor has a valid scale.
<DOC>
public defn get-scale (sn:SymbolNode) -> Double :
  match(scale(sn)):
    (x:None):
      if is-root?(sn):
        throw $ ValueError("No Scale for Root Node")
      else:
        get-scale $ value! $ parent(sn)
    (x:One<Double>): value(x)

doc: \<DOC>
Get the `VirtualPin` instances in this node and all descendents
This function recursively retrieves all of the pins in this
component.
<DOC>
public defn get-pins (sn:SymbolNode) -> Tuple<VirtualPin> :
  val kid-pins = for child in children(sn) seq-cat:
    get-pins(child)
  to-tuple $ cat(vpins(sn), kid-pins)

doc: \<DOC>
Get all `Glyph` instances in this node.
<DOC>
public defn get-glyphs (sn:SymbolNode) -> Tuple<Glyph> :
  val kid-glyphs = for child in children(sn) seq-cat:
    get-glyphs(child)
  val local-glyphs = glyphs(sn)
  to-tuple $ cat(local-glyphs, kid-glyphs)

public defn add-pin (
  sn:SymbolNode,
  pin-name:String|Ref,
  position:Point|[Double, Double]|[Int, Int]
  --
  name:String = ?
  class:Seqable<String>|String = []
  ) -> VirtualPin :
  val p* = to-point(position)
  val ret = VirtualPin(pin-name, p*, name? = name, class = class)
  append(sn, ret)
  ret

public defn append (sn:SymbolNode, vp:VirtualPin) -> False :
  ; TODO - Must pins have a unique name ?
  add{_, vp} $ vpins(sn)

public defn append-all (sn:SymbolNode, vps:Seqable<VirtualPin>) -> False :
  add-all{_, vps} $ vpins(sn)

public defn add-glyph (
  sn:SymbolNode,
  art:Shape
  --
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
 ) -> Glyph :
 val ret = Glyph(art, name? = name?, class = class)
 append(sn, ret)
 ret

public defn append (sn:SymbolNode, g:Glyph) -> False :
  add{_, g} $ glyphs(sn)

public defn append-all (sn:SymbolNode, gs:Seqable<Glyph>) -> False :
  add-all{_, gs} $ glyphs(sn)

public defn append (sn:SymbolNode, child:SymbolNode) -> False :
  ; TODO - check for cycles
  if parent(child) is-not None:
    throw $ ValueError("SymbolNode Child is already claimed by Parent")
  set-parent(child, One(sn))
  add{_, child} $ children(sn)

public defn create-child (
  sn:SymbolNode
  --
  pose:Pose = DEF_SYMNODE_POSE,
  scale:Double = ?,
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> SymbolNode :

  val ret = SymbolNode(sn, pose, scale = scale, name = name, class = class)
  add{_, ret} $ children(sn)
  ret

public defn elements (sn:SymbolNode) -> Seq<SymbolElement> :
  for grp in [vpins(sn), glyphs(sn)] seq-cat:
    for elem in grp seq:
      elem as SymbolElement

; Generators

public defn make-vpin-symbol (vp:VirtualPin, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
  val pin-r = pin-name(vp)
  val pt = scale * position(vp)
  inside pcb-symbol:
    pin (pin-r) at pose * pt

public defn make-glyph-symbol (g:Glyph, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
  inside pcb-symbol:
    val art* = scale-shape(art(g), scale)
    val lname = build-layer-name $ name?(g)
    layer( lname ) = pose * art*

public defn make-symbol (sn:SymbolNode, parent-pose:Pose = DEF_SYMNODE_POSE) :
  inside pcb-symbol:
    val curr-pose = parent-pose * pose(sn)
    val scale = get-scale(sn)
    for vpin in vpins(sn) do:
      make-vpin-symbol(vpin, scale, curr-pose)

    for glyph in glyphs(sn) do:
      make-glyph-symbol(glyph, scale, curr-pose)

    for child in children(sn) do:
      make-symbol(child, curr-pose)

; ----------------------------------
; Graphics Methods for SymbolNode
; ----------------------------------
; We use the unit dimension space that gets converted
;  into mm by the `scale` parameter.
public defn line (
  sn:SymbolNode,
  pts:Collection<Point|[Double, Double]|[Int, Int]>,
  width:Double = 0.05
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val pts* = to-tuple $ for pt in pts seq:
    to-point(pt)
  val art = Line(width, pts*)
  add-glyph(sn, art, name? = name, class = class)

public defn polygon (
  sn:SymbolNode,
  pts:Collection<Point|[Double, Double]|[Int, Int]>,
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val pts* = to-tuple $ for pt in pts seq:
    to-point(pt)
  val art = Polygon(pts*)
  add-glyph(sn, art, name? = name, class = class)

public defn circle (
  sn:SymbolNode,
  r:Double,
  p:Point|[Double, Double]|[Int, Int] = [0, 0]
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val p* = to-point(p)
  val art = Circle(p*, r)
  add-glyph(sn, art, name? = name, class = class)

public defn triangle (
  sn:SymbolNode,
  p0:Point|[Double, Double],
  p1:Point|[Double, Double],
  w:Double
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  ; This signature is from OCDB - I'm not sure
  ;  I understand what the algorithm is doing yet.
  throw $ NotImplementedYet("triangle")

public defn rectangle (
  sn:SymbolNode,
  width:Double,
  height:Double,
  --
  anchor:Anchor = C
  pose:Pose = DEF_SYMNODE_POSE
  name:String = ?,
  class:Seqable<String>|String = []
  ):
  val art = pose * Rectangle(anchor, width, height)
  add-glyph(sn, art, name? = name, class = class)

public defn line-rectangle (
  sn:SymbolNode,
  p0:Point|[Double, Double]|[Int, Int],
  p1:Point|[Double, Double]|[Int, Int],
  width:Double,
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  throw $ NotImplementedYet("line-rectangle")


public defn polyline (
  sn:SymbolNode
  ) -> Glyph:
    throw $ NotImplementedYet("polyline")

public defn approx-arc (
  sn:SymbolNode,
  p:Point|[Double, Double],
  r:Double,
  a1:Double,
  a0:Double = 0.0,
  w:Double = 0.05,
  n:Int = 10
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  throw $ NotImplementedYet("approx-arc")


val FONT-TO-UNIT = 10.0 / 72.0

public defn text (
  sn:SymbolNode,
  p:Point|[Double, Double]|[Int, Int],
  content:String|Printable,
  --
  font-size:Int = 12
  anchor:Anchor = C
  name:String = ?,
  class:Seqable<String>|String = []
  ):
  val p* = to-point(p)
  val size = to-double(font-size) * FONT-TO-UNIT
  val art = Text(to-string(content), size, anchor, loc(p*))
  add-glyph(sn, art, name? = name, class = class)
