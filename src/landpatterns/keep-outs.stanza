#use-added-syntax(jitx)
defpackage jsl/landpatterns/keep-outs:
  import core
  import jitx
  import jitx/commands

  import jsl/ensure
  import jsl/geometry/box
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/silkscreen

doc: \<DOC>
Interface Type for Keepout Creation

Custom keepout generators can be built by inheriting
from this type and then implementing the interface
<DOC>
public deftype KeepoutCreator

doc: \<DOC>
Build the keep-out layer geometry in the Virtual LP Scene Graph

This function will generate the necessary keep-out artwork
in the virtual LP scene graph.
<DOC>
public defmulti build-keep-out (kc:KeepoutCreator, vp:VirtualLP -- side:Side = Top) -> False



doc: \<DOC>
Keepout Creator for Intra-pad Keepouts

For SMT chip components like resistors and capacitors,
we often want to restrict copper underneath the component.
This can be for SI reasons, manufacturing reasons, etc.

Sometimes we want to restrict the ground plane on an internal
layer underneath these components.

This type is used to contruct these keepouts on any layer
of the board design.
<DOC>
public defstruct IntraPadKeepOut <: KeepoutCreator :
  layer-set:Tuple<LayerIndex> with:
    ensure => ensure-not-empty!

  doc: \<DOC>
  Shrink the created keepout
  By default, this type will create a keepout that is
  the same size as the interstitual region between the
  pads of the SMT component.
  This parameter can be used to make this keepout region
  smaller (or larger if negative).
  By default this value is 0.0.
  <DOC>
  shrink-by:Double|Percentage|Dims with:
    default => 0.0
with:
  printer => true
  keyword-constructor => true


public defmethod build-keep-out (k:IntraPadKeepOut, vp:VirtualLP -- side:Side = Top) :

  val b = pad-interior-bounds(vp, side)
  val sh-by = match(shrink-by(k)):
    (s:Double): Point(s, s)
    (s:Dims): Point(x(s), y(s))
    (p:Percentage):
      val s = dims(b)
      Point(x(s) * p, y(s) * p)

  val b* = shrink(sh-by, b)
  val sh = to-Rectangle(b*)

  val cls = ["keepout"]
  for ly in layer-set(k) do:
    val fb = ForbidCopper(ly)
    add-artwork(vp, fb, sh, class = cls)





