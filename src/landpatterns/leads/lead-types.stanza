#use-added-syntax(jitx)
defpackage jsl/landpatterns/leads/lead-types:
  import core
  import jitx

  import jsl/design/settings
  import jsl/landpatterns/leads/protrusions
  import jsl/landpatterns/leads/through-hole

  import jsl/landpatterns/IPC

doc: \<DOC>
Pin or Electrical contact of a component package

The leads of a device are the electrical contact of the
internal semiconductor to the outside world.

These come in a variety of styles:
-  For through hole components, the leads are typically cylindrical
   pieces of metal extending from the ends (axial) or the bottom (radial)
-  For surface mount components, the leads are typically embedded into
   the body of the package.
<DOC>
public deftype Lead <: Equalable & Hashable

doc: \<DOC>
Dimension of the lead that is normal to the edge of the package body

Examples:
-  For through-hole components, the lead length is the overall length
  of the cylindrical copper.
-  For SOP/SOIC/QFP, the lead length is typically the length of
  mate-able surface between the lead contact and the PCB. It typically
  does not include any bends in the lead to reach the mating surface.
-  For SMT chip resistors (0603, etc), the length is the termination
  (typically labeled `b` in drawings)
  TODO - need a figure here.
<DOC>
public defmulti length (lead:Lead) -> Toleranced

doc: \<DOC>
Dimension of the lead that is parallel to the edge of the package body.

Examples:
-  For through-hole components, the lead width is typically the
  diameter of the cylindrical lead.
-  For SOP/SOIC/QFP, the lead width is measured parallel to the body
  and must be strictly smaller than the pitch of the pins.
-  For SMT chip resistors, the lead width is typically the entire width
  of the package body.
<DOC>
public defmulti width (lead:Lead) -> Toleranced

doc: \<DOC>
Surface Mount Component Lead

This type is for describing leads from SMT packages
such as SOIC, SOP, QFN, etc.
<DOC>
public defstruct SMT-Lead <: Lead :
  doc: \<DOC>
  The lead type defines the physical nature of the lead.
  <DOC>
  lead-type:LeadProtrusion
  doc: \<DOC>
  Length of the surface contact for the electrical lead of an SMT package.

  This is the length of the lead that will be mateable to the pad. This
  length does not include any bends in the lead to reach the mating surface
  from the body of the package.

  This is typically identified with the letter `L` in mechanical drawings
  of a component datasheet.

  TODO - add figure here.
  <DOC>
  length:Toleranced with:
    as-method => true
  doc: \<DOC>
  Width of the electrical lead of an SMT package.

  This is typically identified with the letter `b` in mechanical drawings
  of a component datasheet.

  TODO - add figure here.
  <DOC>
  width:Toleranced with:
    as-method => true

with:
  equalable => true
  hashable => true
  printer => true

doc: \<DOC>
Compute the IPC-compliant Pad Constraints for this SMT Lead
This result provides the necessary dimensions for computing
the pad size and position in a landpattern.

@param x self
@param lead-span
@param density-level
<DOC>
public defmulti pad-constraints (
  x:SMT-Lead,
  lead-span:Toleranced
  --
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> IpcResults

doc: \<DOC>
Default Implementation for `pad-constraints`
<DOC>
public defmethod pad-constraints (
  x:SMT-Lead
  lead-span:Toleranced
  --
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> IpcResults :
  val fillets = lead-fillets(lead-type(x), density-level = density-level)
  ipc-formula(lead-span, length(x), width(x), fillets)


doc: \<DOC>
Through-hole Component Lead

This type is for describing the leads from a Through-hole
package such as a Radial Capacitor, or an Axial Resistor.
<DOC>
public defstruct TH-Lead <: Lead :
  doc: \<DOC>
  The length of the lead describes the total length of the
  metal contact. This is not describing the pad placement
  in anyway.
  For components where the lead lengths are different (for example,
  with electrolytic capacitors), this length describes the minimum
  common length.
  <DOC>
  length:Toleranced with:
    as-method => true
  doc: \<DOC>
  The width of the lead is typically describing the diameter
  of a cylindrical lead.
  <DOC>
  width:Toleranced with:
    as-method => true

  doc: \<DOC>
  Override Pad Definition

  This allows the user to define a specific pad definition
  that will override the computed pad dimensions based on
  IPC rules.
  <DOC>
  override:Maybe<Pad> with:
    default => None()

with:
  equalable => true
  hashable => true
  printer => true
  constructor => #TH-Lead

doc: \<DOC>
Through-Hole Lead Constructor

@param length Length of the wire lead of a through-hole
component in mm.
@param width Cross-section width of the wire lead in mm. This
is typically the diameter (or for square/rectangular pins the diagonal)
@param override Optional Pad definition to override computed values.
Often a datasheet provides explicit hole sizes. This argument can
allow the user to use those definitions explicitly.
<DOC>
public defn TH-Lead (
  --
  length:Toleranced,
  width:Toleranced,
  override:Pad = ?
  ):
  #TH-Lead(length, width, override)


doc: \<DOC>
Compute the Hole and Pad Dimensions

This function is primarily intended to be a tool
for converting the lead dimensions into a hole for
a landpattern.

@param lead The parameters of this through-hole lead
@param dl Density Level specification for this package.
@return Tuple of [hole-size, pad-size] as `Dims` objects. These
objects then get converted to a pad by the `PadPlanner`
generator functions.
<DOC>
public defmulti compute-hole-pad-diam (lead:TH-Lead, dl:DensityLevel) -> [Dims, Dims]


doc: \<DOC>
Default Implementation for hole and pad size computation

This function generates sizes according IPC2222 specs.
@return This function only returns symmetric definitions
resulting in circular holes.
<DOC>
public defmethod compute-hole-pad-diam (lead:TH-Lead, dl:DensityLevel) -> [Dims, Dims] :
  val lead-diam = width(lead)
  val hole-diam = compute-hole-diam(lead-diam, dl)
  val pad-diam = compute-pad-diam(hole-diam, dl)

  val hole-sz = Dims(hole-diam, hole-diam)
  val pad-sz = Dims(pad-diam, pad-diam)
  [hole-sz, pad-sz]


doc: \<DOC>
Construct the Pad Definition for this Through-Hole Lead

This is primarily a helper function to make construction
of the through-hole pad easier. This function will
decide between:

1.  Computing the hole and pad sizes and constructing the
pads using the `PadPlanner` generator
2.  Leveraging the `override` pad provided by the user.

@param lead This lead
@param pad-gen Function that converts the hole and pad size
to a `Pad` definition. This function typically comes from
the PadPlanner.
@param dl Density Level specification for the package this
pad is supporting.

@return A pad definition that will be used to construct
the land pattern definition.
<DOC>
public defn make-pad-def (lead:TH-Lead, pad-gen:((Dims, Dims) -> Pad), dl:DensityLevel) -> Pad:
  match(override(lead)):
    (_:None):
      val [hole-size, pad-size] = compute-hole-pad-diam(lead, dl)
      pad-gen(hole-size, pad-size)
    (given:One<Pad>):
      value(given)
