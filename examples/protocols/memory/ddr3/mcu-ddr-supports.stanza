  
#use-added-syntax(jitx)
defpackage jsl/examples/protocols/memory/ddr3/mcu-ddr-supports :
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/protocols/memory/ddr3

public defn make-supports () :
  inside pcb-component :

    pcb-bundle bit :
        pin q

    pcb-bundle dummy-pair (name:String) :
      name = name
      pin N
      pin P

    defn dq-ref (bit:Int) : ; 0 to 63
      if bit < 0 or bit > 63 :
        fatal("dq-ref byte out of range (0,63) %_" % [bit])
      dot(self, Ref(to-string("DRAM_D%_" % [to-string(bit)])))

    defn dqs-ref (byte:Int, n?:True|False) :
      if byte < 0 or byte > 7 :
        fatal("dqs-ref byte out of range (0,7) %_" % [byte])
      if n? :
        dot(self, Ref(to-string("DRAM_SDQS%__B" % [byte])))
      else :
        dot(self, Ref(to-string("DRAM_SDQS%_" % [byte])))

    defn dm-ref (byte:Int) :
      if byte < 0 or byte > 7 :
        fatal("dm-ref byte out of range (0,7) %_" % [byte])
      dot(self, Ref(to-string("DRAM_DQM%_" % [byte])))

    for i in 0 to 64 do :
      supports bit :
        bit.q => dq-ref(i)

    val fixed-bits = map(dq-ref, [0 8 16 24 32 40 48 56])
    ; println("fixed bits -> %_" % [map(ref, fixed-bits)])
    for (fb in fixed-bits, dqs-idx in 0 to false) do :
      supports DDR3-8b-data-lane :
        DDR3-8b-data-lane.dqs.N => dqs-ref(dqs-idx, true )
        DDR3-8b-data-lane.dqs.P => dqs-ref(dqs-idx, false)
        DDR3-8b-data-lane.dqm   => dm-ref(dqs-idx)

        val inner-refs = to-tuple $
          for i in 1 to 8 seq :
            dq-ref(dqs-idx * 8 + i)

        require bs : bit[7]
        for p in pins(bs) do :
          restrict(p, fn (mypin) :
            contains?(inner-refs, mypin))
        DDR3-8b-data-lane.dq[0] => fb
        for i in 0 to 7 do :
          DDR3-8b-data-lane.dq[i + 1] => bs[i].q

    for channel in 0 to 4 do :
      supports DDR3-16b-data-lane :
        require data : DDR3-8b-data-lane[2]

        for l in 0 to 2 do :
          for b in 0 to 8 do :
            DDR3-16b-data-lane.data[l].dq[b] => data[l].dq[b]
          DDR3-16b-data-lane.data[l].dqs.N   => data[l].dqs.N
          DDR3-16b-data-lane.data[l].dqs.P   => data[l].dqs.P
          DDR3-16b-data-lane.data[l].dqm     => data[l].dqm

    supports DDR3-acc-lane :
        for i in 0 to 16 do :
          DDR3-acc-lane.a[i] => dot(self, Ref(to-string("DRAM_A%_" % [i])))
        for i in 0 to 3 do :
          DDR3-acc-lane.sdba[i] => dot(self, Ref(to-string("DRAM_SDBA%_" % [i])))

        DDR3-acc-lane.reset_b  => self.DRAM_RESET
        DDR3-acc-lane.we_b     => self.DRAM_SDWE
        DDR3-acc-lane.cas_b    => self.DRAM_CAS
        DDR3-acc-lane.ras_b    => self.DRAM_RAS
        DDR3-acc-lane.sdodt    => self.DRAM_SDODT0
        DDR3-acc-lane.cs_b     => self.DRAM_CS0
        DDR3-acc-lane.sdcke    => self.DRAM_SDCKE0
        DDR3-acc-lane.clk.P    => self.DRAM_SDCLK_0
        DDR3-acc-lane.clk.N    => self.DRAM_SDCLK_0_B


