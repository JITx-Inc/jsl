doc: \<DOC>
@title Two-Pin Landpatterns
@brief Generators & Landpatterns for Two-Pin Components
@desc
  This package contains generators and `pcb-landpattern` definitions for
generic two-pin components like resistors, capacitors, etc.

Entities in this package are typically defined in matching pairs:
1.  `make-*-landpattern` - This is a generator that can be run from within a `pcb-landpattern` definition
2.  `*-landpattern` - A landpattern definition that makes use of the associated generator `make-*-landpattern`.

All units for the functions in this package are in millimeters.

## Component Case Sizes

The IPC two-pin SMT component landpatterns can be specified using
a case name. Below are the available case names:

TODO - table with 3 columns:
  Imperial
  Metric
  Wide Variants


<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/two-pin:
  import core
  import math

  import jitx
  import jitx/commands

  import jsl/landpatterns/helpers
  import jsl/landpatterns/pads

  import jsl/landpatterns/leads
  import jsl/geometry/LineRectangle

  forward jsl/landpatterns/two-pin/SMT
  forward jsl/landpatterns/two-pin/axial
  forward jsl/landpatterns/two-pin/radial


; TODO - Used in `db-parts.stanza` and `symbols.stanza`
public pcb-landpattern dummy-landpattern (n:Int, courtyard:[Double, Double]) :
  val r = (max(courtyard[0], courtyard[1]) - 0.2) / 2.0
  for i in 0 to n do :
    var theta = (2.0 * PI / to-double(n)) * to-double(i) + PI
    pad p[i + 1] : smd-pad(Circle(to-radius $ 0.05)) at loc(r * cos(theta), r * sin(theta))

  layer(Courtyard(Top)) = Rectangle(courtyard[0], courtyard[1])
  layer(Silkscreen("f-silk", Top)) = LineRectangle(courtyard[0], courtyard[1])
  ref-label()
  name = to-string("DUMMY-%_" % [n])

