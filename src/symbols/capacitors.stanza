#use-added-syntax(jitx)
defpackage jsl/symbols/capacitors:
  import core
  import collections
  import math
  import jitx

  import maybe-utils

  import jsl/ensure
  import jsl/design/Classable
  import jsl/symbols/framework

val DEF_PORCH_WIDTH = (80 %)
val DEF_WIDTH = 1.5
val DEF_LINE_WIDTH = 0.05

doc: \<DOC>
Construct Parameter Set for a Non-Polarized Capacitor Symbol

Each keyword argument for this function has a default value
that can be overridden. These parameters are all of the
configurable aspects of the symbol.
<DOC>
public defstruct CapacitorSymbolParams <: SymbolParams :
  doc: \<DOC>
  The porch width is the length of line from the pin to the capacitor plate lines
  This value can be either an absolute value in symbol grid units or it
  can be a percentage of the `pitch / 2.0`.
  <DOC>
  porch-width:Double|Percentage with:
    ensure => ensure-positive!
    updater => sub-porch-width
    default => DEF_PORCH_WIDTH
  width:Double with:
    ensure => ensure-positive!
    updater => sub-width
    default => DEF_WIDTH
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    default => DEF_LINE_WIDTH
  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  equalable => true
  printer => true

public defn to-tuple (p:CapacitorSymbolParams) -> [Double|Percentage, Double, Double] :
  [porch-width(p), width(p), line-width(p)]

var DEF_NON_POL_PARAMS = CapacitorSymbolParams()
public defn get-default-cap-symbol-params () -> CapacitorSymbolParams :
  DEF_NON_POL_PARAMS

public defn set-default-cap-symbol-params (v:CapacitorSymbolParams) -> False :
  DEF_NON_POL_PARAMS = v


doc: \<DOC>
@member Polarized-Straight-Style
@member Polarized-Curved-Style
<DOC>
public defenum PolarizedStyle:
  Polarized-Straight-Style
  Polarized-Curved-Style

val DEF_POL_STYLE = Polarized-Straight-Style
val DEF_POL_RADIUS = 5.0
val DEF_PLUS_SIZE = (20 %)

doc: \<DOC>
Construct Parameter Set for PolCap Symbol Shape

The parameters of this function are the configurable
features of a Polarized Capacitor's default symbol shape.
Each argument has a default value that can be overridden.
<DOC>
public defstruct PolarizedCapacitorSymbolParams <: CapacitorSymbolParams :
  style:PolarizedStyle with:
    default => DEF_POL_STYLE
  doc: \<DOC>
  The porch width is the length of line from the pin to the capacitor plate lines
  This value can be either an absolute value in symbol grid units or it
  can be a percentage of the `pitch / 2.0`.
  <DOC>
  porch-width:Double|Percentage with:
    ensure => ensure-positive!
    updater => sub-porch-width
    as-method => true
    default => DEF_PORCH_WIDTH
  width:Double with:
    ensure => ensure-positive!
    updater => sub-width
    as-method => true
    default => DEF_WIDTH
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    as-method => true
    default => DEF_LINE_WIDTH
  pol-radius:Double with:
    ensure => ensure-positive!
    updater => sub-pol-radius
    default => DEF_POL_RADIUS
  plus-size:Double|Percentage with:
    ensure => ensure-positive!
    updater => sub-plus-size
    default => DEF_PLUS_SIZE
  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()
with:
  keyword-constructor => true
  equalable => true
  printer => true

public defn sub-base-params (p:PolarizedCapacitorSymbolParams, b:CapacitorSymbolParams) -> PolarizedCapacitorSymbolParams :
  p $> sub-porch-width{_, porch-width(b)}
    $> sub-width{_, width(b)}
    $> sub-line-width{_, line-width(b)}
    $> {_ as PolarizedCapacitorSymbolParams}

doc: \<DOC>
If the user does not call `set-default-polarized-cap-symbol-params`, then
the `get-default-polarized-cap-symbol-params` function will return a
parameters object that combines the base `CapacitorSymbolParams`
<DOC>
var CUSTOM_POL_PARAMS:True|False = false
var DEF_POL_PARAMS = PolarizedCapacitorSymbolParams()
public defn get-default-polarized-cap-symbol-params () -> PolarizedCapacitorSymbolParams :
  if CUSTOM_POL_PARAMS:
    DEF_POL_PARAMS
  else:
    sub-base-params(DEF_POL_PARAMS, get-default-cap-symbol-params())

doc: \<DOC>
Determine if the new params for the polarized capacitor symbol modifies the base parameters

This helps implement the logic that allows the user to modify
only the `DEF_NON_POL_PARAMS` and have this propagate to
the `DEF_POL_PARAMS`
<DOC>
defn check-non-base-defaults (p:PolarizedCapacitorSymbolParams) -> True|False :
  val b = get-default-cap-symbol-params()
  (p as CapacitorSymbolParams) != b

public defn set-default-polarized-cap-symbol-params (p:PolarizedCapacitorSymbolParams) -> False :
  CUSTOM_POL_PARAMS = check-non-base-defaults(p)
  DEF_POL_PARAMS = p

doc: \<DOC>
Construct the T shape that makes up a non-polarized capacitors two plate representations.
<DOC>
defn construct-top-plate (w:Double, top:Double, cross-y:Double, line-width:Double) -> Shape :
  val w2 = w / 2.0
  Line(line-width, [
    Point(0.0, top),
    Point(0.0, cross-y),
    Point(w2, cross-y),
    Point((- w2), cross-y),
    Point(0.0, cross-y),
  ])

doc: \<DOC>
Construct the Non-Polarized Capacitor Glyph Geometry
@param node Symbol scene graph to draw glyphs in.
@param pitch Pin to Pin Distance for two-pin component.
@param params Configurable parameters for the generated shape.
<DOC>
public defn build-capacitor-glyphs (
  node:SymbolNode,
  pitch:Double,
  params:CapacitorSymbolParams
  ):

  val [porch-width, width, line-width] = to-tuple(params)
  val h = pitch / 2.0
  val porch-width* = match(porch-width):
    (x:Double): x
    (x:Percentage): h * x

  ; Y point at which the cross bar for the
  ;   Capacitor plate starts.
  val w2 = width / 2.0
  val cross-y = h - porch-width*
  val top-plate = construct-top-plate(width, h, cross-y, line-width)
  add-glyph(node, top-plate, name? = One("top-plate"))

  val bot-plate = loc(0.0, 0.0, 180.0) * top-plate
  add-glyph(node, bot-plate, name? = One("bot-plate"))

doc: \<DOC>
Build the Polarized Capacitor Glyph Geometry
@param node SymbolNode scenegraph to draw the capacitor in
@param pitch Pin to Pin distance for this two-pin component
@param params Configurable parameters of the polarized capacitor
  symbol shape.
<DOC>
public defn build-pol-cap-glyphs (
  node:SymbolNode,
  pitch:Double,
  params:PolarizedCapacitorSymbolParams
  ):
  val [porch-width, width, line-width] = to-tuple(params)
  val h = pitch / 2.0
  val porch-width*:Double = match(porch-width):
    (x:Double): x
    (x:Percentage): h * x

  ; Y point at which the cross bar for the
  ;   Capacitor plate starts.
  val w2 = width / 2.0
  val cross-y = h - porch-width*
  val top-plate = construct-top-plate(width, h, cross-y, line-width)
  add-glyph(node, top-plate, name? = One("top-plate"))

  val bot-plate = match(style(params)):
    (_:Polarized-Straight-Style):
      loc(0.0, 0.0, 180.0) * top-plate
    (_:Polarized-Curved-Style):
      ; The polarized curve style uses an arc
      ;  in the bottom hat. We use the same width
      ;  and the pol-radius. Center is 0.0, - pol-radius

      ; We must compute the angle for the arc based on the
      ;  width and the pol-radius
      val pol-r = pol-radius(params)
      val half-angle = to-degrees $ atan( w2 / pol-r )

      val porch-line = Line(line-width, [Point(0.0, (- h)), Point(0.0, (- cross-y))])
      val pol-r-center = Point(0.0, (- (cross-y + pol-r)))
      val pline = Polyline(line-width,[
        [
          Arc(pol-r-center, pol-r, 90.0 + half-angle, (- 2.0 * half-angle))
          Arc(pol-r-center, pol-r, 90.0 - half-angle, (2.0 * half-angle))
          ]
      ] )
      ; pline
      Union([porch-line, pline])
  add-glyph(node, bot-plate, name? = One("bot-plate"))

  val plus-len = match(plus-size(params)):
    (x:Double): x
    (x:Percentage): width * x
  val arm = plus-len / 2.0
  val x-pos = (width / 2.0) - arm
  val y-pos = cross-y + (2.0 * arm)
  val plus-pose = loc(x-pos,  y-pos)
  val plus = plus-pose * Union([Line(line-width, [Point((- arm), 0.0),     Point(arm, 0.0)])
         Line(line-width, [Point(0.0,     (- arm)), Point(0.0, arm)])])

  add-glyph(node, plus, name? = One("plus"))


doc: \<DOC>
Non-Polarized Capacitor Symbol

This type is used to generate the two-pin electrical
symbol for standard capacitors
<DOC>
public defstruct CapacitorSymbol <: TwoPinSymbol :
  pitch:Double with:
    as-method => true
    default => TWO_PIN_DEF_PITCH
  doc: \<DOC>
  Indicates whether the symbol will use c/a style pins

  This is typically not used for non-polarized capacitors
  but it is part of the TwoPinSymbol definition. The default
  is `false`.
  <DOC>
  polarized?:True|False with:
    as-method => true
    default => false
  doc: \<DOC>
  Optional Capacitor Symbol Parameters Override
  If this value is None, then this function will
  consult {@link get-default-cap-symbol-params}
  when constructing the capacitor symbol. Otherwise,
  this value will override the existing defaults.
  <DOC>
  params:Maybe<CapacitorSymbolParams> with:
    ; NOTE: I'm not using `get-default-cap-symbol-params()` here
    ;  because it would prevent the user from overriding the defaults
    ;  because `CURR-CAPACITOR-SYMBOL` gets instantiate on run.
    as-method => true
    default => None()
with:
  keyword-constructor => true
  printer => true


public defmethod name (x:CapacitorSymbol) -> String :
  "Capacitor"

defmethod get-params (x:CapacitorSymbol) -> CapacitorSymbolParams :
  value-or-else(params(x) as Maybe<CapacitorSymbolParams>, get-default-cap-symbol-params)

public defmethod build-artwork (
  x:CapacitorSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as CapacitorSymbolParams
  build-capacitor-glyphs(sn, pitch(x), p)

var CURR-CAPACITOR-SYMBOL:TwoPinSymbol = CapacitorSymbol()
public defn get-default-capacitor-symbol () : CURR-CAPACITOR-SYMBOL
public defn set-default-capacitor-symbol (symb:TwoPinSymbol) :
  CURR-CAPACITOR-SYMBOL = symb


public defstruct PolarizedCapacitorSymbol <: TwoPinSymbol :
  pitch:Double with:
    as-method => true
    default => TWO_PIN_DEF_PITCH
  doc: \<DOC>
  Indicates whether the symbol will use c/a style pins

  This is value defaults to `true` for the Polarized
  capacitor symbol.
  <DOC>
  polarized?:True|False with:
    as-method => true
    default => true
  doc: \<DOC>
  Optional Override Parameters for Polarized Capacitor Glyph

  This value can be used to override the capacitor glyph
  parameters and replace them with custom parameters.
  This value is by default `None()` which will cause
  {@link get-default-polarized-cap-symbol-params} to be
  consulted for parameters when the symbol is built.
  <DOC>
  params:Maybe<PolarizedCapacitorSymbolParams> with:
    as-method => true
    default => None()
with:
  constructor => #PolarizedCapacitorSymbol

public defn PolarizedCapacitorSymbol (
  --
  pitch:Double = TWO_PIN_DEF_PITCH
  polarized?:True|False = true
  params:PolarizedCapacitorSymbolParams = ?
  ) -> PolarizedCapacitorSymbol:
  #PolarizedCapacitorSymbol(pitch, polarized?, params)

public defmethod name (x:PolarizedCapacitorSymbol) -> String :
  "Polarized Capacitor"

defmethod get-params (x:PolarizedCapacitorSymbol) -> PolarizedCapacitorSymbolParams:
  value-or-else(
    params(x) as Maybe<PolarizedCapacitorSymbolParams>,
    get-default-polarized-cap-symbol-params
    )

public defmethod build-artwork (
  x:PolarizedCapacitorSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as PolarizedCapacitorSymbolParams
  build-pol-cap-glyphs(sn, pitch(x), p)

var CURR-POL-CAP-SYMBOL:TwoPinSymbol = PolarizedCapacitorSymbol()
public defn get-default-polarized-capacitor-symbol () : CURR-POL-CAP-SYMBOL
public defn set-default-polarized-capacitor-symbol (symb:TwoPinSymbol) :
  CURR-POL-CAP-SYMBOL = symb
