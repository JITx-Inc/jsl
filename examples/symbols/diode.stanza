#use-added-syntax(jitx)
defpackage jsl/examples/symbols/diode:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl
  import jsl/examples/landpatterns/board


pcb-component test-Diode:
  manufacturer = "Onsemi"
  mpn = "1N1234"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = DiodeSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)


pcb-component test-Schottky:
  manufacturer = "Onsemi"
  mpn = "1N1235"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = SchottkyDiodeSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-Zener:
  manufacturer = "Onsemi"
  mpn = "1N1236"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = ZenerDiodeSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-Tunnel:
  manufacturer = "Onsemi"
  mpn = "1N1237"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = TunnelDiodeSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-LED:
  manufacturer = "Onsemi"
  mpn = "1N1238"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = LEDSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-Photodiode:
  manufacturer = "Onsemi"
  mpn = "1N1239"
  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | p[1] ]
    [ c | p[2] ]

  val symb-defn = PhotoDiodeSymbol()
  val symb = create-symbol(symb-defn)
  assign-symbol(symb)

  val pkg = SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-TVSDiode:
  manufacturer = "TI"
  mpn = "ESD751"

  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [ a | a ]
    [ c | c ]

  val symb-defn = TVSDiodeSymbol()
  assign-symbol $ create-symbol(symb-defn)

  val pkg = Molded-2pin(
    lead-span = min-max(0.85, 0.95)
    polarized? = true,
    pin-1-id? = One $ #R(c),
    keep-out = One $ IntraPadKeepOut(),
    lead = Molded-2pin-Lead(
      length = min-max(0.2, 0.3)
      width = min-max(0.45, 0.55)
    )
    package-body = PackageBody(
      length = min-max(0.9, 1.1),
      width = min-max(0.5, 0.7),
      height = min-max(0.3, 0.45)
    )
  )

  assign-landpattern $ create-landpattern(pkg)


pcb-module test-design:
  inst d1 : test-Diode
  inst d2 : test-Schottky
  inst d3 : test-Zener
  inst d4 : test-Tunnel
  inst d5 : test-LED
  inst d6 : test-Photodiode
  inst d7 : test-TVSDiode

val board-shape = RoundedRectangle(50.0, 50.0, 0.25)
; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("DIODES-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(test-design)

; View the results
view-schematic()
view-board()