#use-added-syntax(jitx)
defpackage jsl/examples/symbols/resistor:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl

  import jsl/examples/landpatterns/board

val board-shape = RoundedRectangle(50.0, 50.0, 0.25)

pcb-component test-SMT:

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Up |  0]
    [p[2] | p[2] | Down | 0]

  val symb = ResistorSymbol()
  assign-symbol(create-symbol(symb))
  val chip-def = chips["1206"]
  val pkg = SMT-Chip(
    chip-def,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-SMT-2:
  reference-prefix = "R"
  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Up |  0]
    [p[2] | p[2] | Down | 0]

  val override = ResistorSymbolParams( style = OpenRectangle)
  val symb = ResistorSymbol(params = One $ override)
  assign-symbol(create-symbol(symb))
  val chip-def = chips["1206"]
  val pkg = SMT-Chip(
    chip-def,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)


pcb-component test-Var-SMT:

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Up |  0]
    [p[2] | p[2] | Down | 0]

  val symb = VariableResistorSymbol()
  assign-symbol(create-symbol(symb))
  val chip-def = chips["1206"]
  val pkg = SMT-Chip(
    chip-def,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

pcb-component test-Photo-SMT:

  pin-properties :
    [pin:Ref | pads:Ref ... | side:Dir | bank:Int]
    [p[1] | p[1] | Up |  0]
    [p[2] | p[2] | Down | 0]

  val symb = PhotoResistorSymbol()
  assign-symbol(create-symbol(symb))
  val chip-def = chips["1206"]
  val pkg = SMT-Chip(
    chip-def,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)


pcb-component test-Potentiometer:

  pin-properties :
    [pin:Ref | pads:Ref ... ]
    [p[1] | p[1] ]
    [p[2] | p[2] ]
    [wiper | p[3] ]

  val symb = PotentiometerSymbol()
  assign-symbol(create-symbol(symb))

  val pkg = SOIC-N(
    num-leads = 8,
    lead-span = min-max(5.8, 6.2),
    package-length = 4.5 +/- 0.10,
    density-level = DensityLevelC
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)


pcb-module test-design:
  inst R1 : test-SMT
  place(R1) at loc(0.0, 0.0) on Top
  inst R2 : test-Var-SMT
  inst R3 : test-Photo-SMT
  inst R4 : test-Potentiometer
  inst R5 : test-SMT-2

; Set the top level module (the module to be compile into a schematic and PCB)
set-current-design("Resistor-Symb-TEST")
set-rules(default-rules)
set-board(default-board(board-shape))

set-main-module(test-design)

; Use any helper function from helpers.stanza here. For example:
; run-check-on-design(my-design)

; View the results
view-board()
view-schematic()