doc: \<DOC>

TODO:

We should discuss Symbol Grid Units and what
this abstraction is for.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/symbols/SymbolNode:
  import core
  import collections
  import jitx

  import jsl/utils
  import jsl/errors
  import jsl/ensure
  import jsl/design/Classable
  import jsl/geometry/basics
  import jsl/geometry/box

val DEF_SYMNODE_POSE = loc(0.0, 0.0)

public val UNIT-TO-MM = 2.54

doc: \<DOC>
Base Type for all SymbolNode types
<DOC>
public deftype SymbolElement <: Classable

doc: \<DOC>
Pin Decorator - add art to a pin

This type is used to construct shapes that are used
to indicate special functions for pins.

For Example:

*  Bubble for active-low indication
*  Arrows for Input / Output
*  Open-Drain Indicator
*  Clock Angle Symbol
<DOC>
public defstruct PinDecorator <: SymbolElement :
  doc: \<DOC>
  Art to apply to the pin
  The shape defined here will be applied in a frame of
  reference where the pin's position is the origin.
  It is assumed that the pin is pointed to the `Left`
  when drawing the art. The art shape will be flipped
  across the Y axis for `Right` pins.
  For the `Up` pins, the Left pin version is rotated 90 degrees.
  For the `Down` pins, the Right pin is rotated 90 degrees.
  <DOC>
  art:Shape

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #PinDecorator
  printer => true

public defn PinDecorator (
  art:Shape
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> PinDecorator :
  #PinDecorator(art, name?, to-class-vector(class))


doc: \<DOC>
Pin Statement Optional Parameters

The `pin` statement in a `pcb-symbol` can be a standalone
point or it can have some parameterizations. This
struct defines the parameterization so that the user can
optionally include this in pin definitions.
<DOC>
public defstruct VirtualPinParams <: Equalable :
  direction:Dir
  pin-length:Double with: ( ensure => ensure-positive! )
  doc: \<DOC>
  Pad Id/Ref Text Size
  This parameter is optional and if set to `None` then
  no pad Ref text will be generated
  <DOC>
  pad-ref-size:Maybe<Double> with: ( ensure => ensure-positive! )
  doc: \<DOC>
  Pin Name Text Size
  This parameter is optional and if set to `None` then
  no pin name text will be generated
  <DOC>
  pin-name-size:Maybe<Double> with: ( ensure => ensure-positive! )
with:
  equalable => true
  constructor => #VirtualPinParams

public defn VirtualPinParams (
  --
  direction:Dir,
  pin-length:Double
  pad-ref-size:Double = ?
  pin-name-size:Double = ?
  ) -> VirtualPinParams :
  #VirtualPinParams(direction, pin-length, pad-ref-size, pin-name-size)

doc: \<DOC>
Virtual Pin in the Symbol Node Frame of Reference

This type allows the user to define a pin to be placed
in the symbol node frame a reference. The pin can be created
either as a single point or as a parameterized pin like one
might consider in legacy CAD.

The single point pin version is often useful for two-pin
components like resistors, capacitors, etc. The fully
parameterized pin is often useful when you want to be
explicit about pad reference or pin names.
<DOC>
public defstruct VirtualPin <: SymbolElement :
  doc: \<DOC>
  Pin Name
  This must be a valid symbol reference in JITX
  <DOC>
  pin-name:Ref
  ; Location of the pin connection point in the current `SymbolNode`
  ;   frame of reference.
  doc: \<DOC>
  Position of the pin connection point
  This position is with respect to the current `SymbolNode`'s frame of
  reference. This value is in millimeters.
  <DOC>
  position:Point

  doc: \<DOC>
  Optional Pin Statement Parameters
  <DOC>
  params:Maybe<VirtualPinParams>

  doc: \<DOC>
  Optional set of decorators for this pin.
  <DOC>
  decorators:Vector<PinDecorator>

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualPin
  printer => true


public defn VirtualPin (
  pin-name:String|Ref,
  position:Point
  --
  params:Maybe<VirtualPinParams> = None()
  decorators:Seqable<PinDecorator> = []
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
  ) -> VirtualPin :
  val pin-name* = match(pin-name):
    (x:Ref):x
    (x:String): Ref(x)
  #VirtualPin(pin-name*, position, params, to-vector<PinDecorator>(decorators), name?, to-class-vector(class))

doc: \<DOC>
Add a decorator to this pin
User can add multiple decorators to a pin.
Current implementation doesn't handle preventing overlap
well.
<DOC>
public defn add-decorator (vp:VirtualPin, dec:PinDecorator) :
  add(decorators(vp), dec)

public defn add-decorator (vp:VirtualPin, decs:Seqable<PinDecorator>) :
  add-all(decorators(vp), decs)

doc: \<DOC>
A Glyph is a set of geometry that creates an electrical symbol

This is used to group together geometry into various symbols. These
symbols are often reusable. Primarily this is
<DOC>
public defstruct Glyph <: SymbolElement :
  art:Shape

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #Glyph
  printer => true

public defn Glyph (
  art:Shape
  --
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
  ) -> Glyph:
  #Glyph(art, name?, to-class-vector(class))

; I'm not really using this. I'm not sure
;  if it is really necessary.
val DEF_LAYER_NAME = "symbol"

defn build-layer-name (name:Maybe<String>) -> String :
  match(name):
    (x:One<String>): value(x)
    (x:None): DEF_LAYER_NAME

doc: \<DOC>
Scene Graph Builder for Schematic Symbols

The `SymbolNode` is a node in the scene graph
for a schematic symbol. The idea is that we can
construct a symbol by combing various leafs that
are transformed from the root node. This allows for
grouping content and simplifying the calculations needed
to combine various forms of content.
<DOC>
public defstruct SymbolNode <: SymbolElement :

  parent:Maybe<SymbolNode> with: (
    setter => set-parent
  )
  children:Vector<SymbolNode>
  pose:Pose with: (
    updater => sub-pose
    setter => set-pose
  )

  doc: \<DOC>
  Converts from Symbol grid to millimeters

  When we create schematic symbols, we often like to construct
  elements of that symbol with respect to a grid. For example,
  we might want all of the pins on a 100mil grid. This makes
  all of the symbols consistent and leads to a nicer aesthetic.

  This parameter is used to enforce a grid scaler so that when
  we construct pins and glyphs, we can use simple units.

  The default scale converts 1.0 -> 2.54mm -> 100mil
  <DOC>
  scale:Maybe<Double>

  glyphs:Vector<Glyph>
  vpins:Vector<VirtualPin>

  doc: \<DOC>
  Optional Preferred Orientation
  This parameter is only applicable for the root node of the
  symbol scene graph.
  This generates the `preferred-orientation` statement in the
  symbol context if not `None()`
  <DOC>
  preferred-orient?:Maybe<SymbolOrientation> with: (
    default => None(),
    setter => set-preferred-orient?
    )
  doc: \<DOC>
  Backend Symbol Substitutions
  This vector holds a mapping of `name` to substitute symbols.
  The `name` parameter is the backend name like `Altium` or `Kicad`
  The substitute symbol is a `pcb-symbol` definition that will replace
  the symbol generated by this generator when exported to the proposed
  backend.
  <DOC>
  backend-sub?:Vector<KeyValue<String, SchematicSymbol>>

  ; SymbolElement
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #SymbolNode
  printer => true

public defn SymbolNode (
  parent:SymbolNode
  pose:Pose = DEF_SYMNODE_POSE,
  --
  scale:Maybe<Double> = None(),
  name:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> SymbolNode :
  #SymbolNode(
    One(parent),
    Vector<SymbolNode>(),
    pose,
    scale,
    Vector<Glyph>(),
    Vector<VirtualPin>(),
    None(),
    Vector<KeyValue<String, SchematicSymbol>>(),
    name,
    to-class-vector(class)
  )

public defn SymbolNode (
  pose:Pose = DEF_SYMNODE_POSE,
  --
  scale:Double = UNIT-TO-MM,
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> SymbolNode :
  #SymbolNode(
    None(),
    Vector<SymbolNode>(),
    pose,
    One(scale),
    Vector<Glyph>(),
    Vector<VirtualPin>(),
    None(),
    Vector<KeyValue<String, SchematicSymbol>>(),
    name,
    to-class-vector(class)
  )

public defn is-root? (sn:SymbolNode) -> True|False :
  parent(sn) is None

doc: \<DOC>
Recursively Retrieve the Scale Parameter
This function uses either the local scale override
for this node or searches back through its
ancestors (parents) for a valid scale parameter.
@throws RuntimeError If no ancestor has a valid scale.
<DOC>
public defn get-scale (sn:SymbolNode) -> Double :
  match(scale(sn)):
    (x:None):
      if is-root?(sn):
        throw $ ValueError("No Scale for Root Node")
      else:
        get-scale $ value! $ parent(sn)
    (x:One<Double>): value(x)

doc: \<DOC>
Get the `VirtualPin` instances in this node and all descendents
This function recursively retrieves all of the pins in this
component.
<DOC>
public defn get-pins (sn:SymbolNode) -> Tuple<VirtualPin> :
  val kid-pins = for child in children(sn) seq-cat:
    get-pins(child)
  to-tuple $ cat(vpins(sn), kid-pins)

doc: \<DOC>
Get all `Glyph` instances in this node.
<DOC>
public defn get-glyphs (sn:SymbolNode) -> Tuple<Glyph> :
  val kid-glyphs = for child in children(sn) seq-cat:
    get-glyphs(child)
  val local-glyphs = glyphs(sn)
  to-tuple $ cat(local-glyphs, kid-glyphs)

doc: \<DOC>
Compute the bounding box around the glyphs of this symbol.
<DOC>
public defn glyph-bounds (sn:SymbolNode) -> Box :
  reduce{union, _} $ for glyph in get-glyphs(sn) seq:
    bounds $ art(glyph)

public defn add-pin (
  sn:SymbolNode,
  pin-name:String|Ref,
  position:Point|[Double, Double]|[Int, Int]
  --
  params:VirtualPinParams = ?
  name:String = ?
  class:Seqable<String>|String = []
  ) -> VirtualPin :
  val p* = to-point(position)
  val ret = VirtualPin(pin-name, p*, params = params, name? = name, class = class)
  append(sn, ret)
  ret

public defn append (sn:SymbolNode, vp:VirtualPin) -> False :
  ; TODO - Must pins have a unique name ?
  add{_, vp} $ vpins(sn)

public defn append-all (sn:SymbolNode, vps:Seqable<VirtualPin>) -> False :
  add-all{_, vps} $ vpins(sn)

public defn add-glyph (
  sn:SymbolNode,
  art:Shape
  --
  name?:Maybe<String> = None()
  class:Seqable<String>|String = []
 ) -> Glyph :
 val ret = Glyph(art, name? = name?, class = class)
 append(sn, ret)
 ret

public defn append (sn:SymbolNode, g:Glyph) -> False :
  add{_, g} $ glyphs(sn)

public defn append-all (sn:SymbolNode, gs:Seqable<Glyph>) -> False :
  add-all{_, gs} $ glyphs(sn)

public defn append (sn:SymbolNode, child:SymbolNode) -> False :
  ; TODO - check for cycles
  if parent(child) is-not None:
    throw $ ValueError("SymbolNode Child is already claimed by Parent")
  set-parent(child, One(sn))
  add{_, child} $ children(sn)



public defn set-preferred-orientation (sn:SymbolNode, orient:SymbolOrientation) :
  if not is-root?(sn):
    throw $ ValueError("Preferred Orientation is only valid on the root SymbolNode")

  set-preferred-orient?(sn, One(orient))

defn check-backend-clash (sn:SymbolNode, name:String):
  val clash = for kv in backend-sub?(sn) any?:
    key(kv) == name

  if clash:
    throw $ ValueError("A backend substitution for '%_' already exists!" % [name])


public defn add-backend-substitution (sn:SymbolNode, nameSymb:KeyValue<String, SchematicSymbol>) :
  if not is-root?(sn):
    throw $ ValueError("Backend Substitutions are only valid on the root SymbolNode")

  check-backend-clash(sn, key(nameSymb))
  add(backend-sub?(sn), nameSymb)

public defn add-backend-substitution (sn:SymbolNode, name:String, symb:SchematicSymbol) :
  add-backend-substitution(sn, name => symb)

public defn add-backend-substitutions (sn:SymbolNode, nameSymbs:Seqable<KeyValue<String, SchematicSymbol>>) :
  for nameSymb in nameSymbs do:
    add-backend-substitution(sn, nameSymb)

public defn add-value-label (sn:SymbolNode, pos:Pose|Point|[Double, Double]|[Int, Int]
  --
  anchor:Anchor = C,
  unit-size:Double = 1.0
  ) :
  text(sn, pos, ">VALUE", anchor = anchor, unit-size = unit-size)

public defn add-ref-label (sn:SymbolNode, pos:Pose|Point|[Double, Double]|[Int, Int]
  --
  anchor:Anchor = C,
  unit-size:Double = 1.0
  ) :
  text(sn, pos, ">REF", anchor = anchor, unit-size = unit-size)


doc: \<DOC>
Create a new child node

@param sn SymbolNode parent for the new child.
@param pose Coordinate transformation for the child.
Note that this is applied before the scaling operation.
@param scale Optional scale for the child glyphs. By default,
the parent's scale factor is used.
@param name Sets the id name for this child if any
@param class Set class names that apply to this child.
@return Child node in the symbol scene graph.
<DOC>
public defn create-child (
  sn:SymbolNode
  --
  pose:Pose = DEF_SYMNODE_POSE,
  scale:Double = ?,
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> SymbolNode :

  val ret = SymbolNode(sn, pose, scale = scale, name = name, class = class)
  add{_, ret} $ children(sn)
  ret

public defn elements (sn:SymbolNode) -> Seq<SymbolElement> :
  for grp in [vpins(sn), glyphs(sn)] seq-cat:
    for elem in grp seq:
      elem as SymbolElement

; Generators

doc: \<DOC>
Create a full pin statement with pararmeters

This allows the creation of pins with parameterization
for length, direction, and text size.
<DOC>
defn make-full-vpin (vp:VirtualPin, scale:Double, pose:Pose) :
  val pin-r = pin-name(vp)
  val pt = scale * position(vp)
  val p = value! $ params(vp)

  defn convert-maybe (x:Maybe<Double>) -> Double :
    match(x):
      (_:None): 0.0
      (x:One<Double>): value(x)

  defn dec-rot () -> Pose :
    match(direction(p)):
      (_:Right): loc(Point(0.0, 0.0), FlipX)
      (_:Up): loc(Point(0.0, 0.0), 90.0, FlipX)
      (_:Down): loc(Point(0.0, 0.0), 90.0)
      (_:Left): loc(0.0, 0.0)

  inside pcb-symbol:
    pin (pin-r) at pose * pt with:
      direction = direction(p)
      length = scale * pin-length(p)
      name-size = scale * convert-maybe $ pad-ref-size(p)
      number-size = scale * convert-maybe $ pin-name-size(p)

    val dec-pose =  pose * loc(pt) * dec-rot()
    for dec in decorators(vp) do:
      layer("decorators") =  dec-pose * scale-shape(art(dec), scale)


public defn make-vpin-symbol (vp:VirtualPin, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
  val pin-r = pin-name(vp)
  val pt = scale * position(vp)
  inside pcb-symbol:
    match(params(vp)):
      (_:None):
        ; This is the simplfied single-point pin representation
        ;   useful for two-pin components
        pin (pin-r) at pose * pt
        ; This isn't optimal - without the parameters - I don't know
        ;  if the pin points to the left or the right.
        ;  So the suggestion is that for the best decorator support
        ;  the user should provide a parameters object
        val dec-pose = pose * loc(pt)
        for dec in decorators(vp) do:
          layer("decorators") = dec-pose * scale-shape(art(dec), scale)

      (x:One<VirtualPinParams>):
        make-full-vpin(vp, scale, pose)

public defn make-glyph-symbol (g:Glyph, scale:Double, pose:Pose = DEF_SYMNODE_POSE) :
  inside pcb-symbol:
    val art* = scale-shape(pose * art(g), scale)
    val lname = build-layer-name $ name?(g)
    layer( lname ) = art*

public defn make-symbol (sn:SymbolNode, parent-pose:Pose = DEF_SYMNODE_POSE) :
  inside pcb-symbol:
    val curr-pose = parent-pose * pose(sn)
    val scale = get-scale(sn)

    for glyph in glyphs(sn) do:
      make-glyph-symbol(glyph, scale, curr-pose)

    for vpin in vpins(sn) do:
      make-vpin-symbol(vpin, scale, curr-pose)

    for child in children(sn) do:
      make-symbol(child, curr-pose)

    if is-root?(sn):
      match(preferred-orient?(sn)):
        (so:One<SymbolOrientation>):
          preferred-orientation = value(so)
        (_:None): false

      for kv in backend-sub?(sn) do:
        val [name, symb] = unpack(kv)
        backend-substitution(name) = symb

; ----------------------------------
; Graphics Methods for SymbolNode
; ----------------------------------
; We use the unit dimension space that gets converted
;  into mm by the `scale` parameter.
public defn line (
  sn:SymbolNode,
  pts:Collection<Point|[Double, Double]|[Int, Int]>,
  --
  width:Double = 0.05
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val pts* = to-tuple $ for pt in pts seq:
    to-point(pt)
  val art = Line(width, pts*)
  add-glyph(sn, art, name? = name, class = class)

public defn polygon (
  sn:SymbolNode,
  pts:Collection<Point|[Double, Double]|[Int, Int]>,
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val pts* = to-tuple $ for pt in pts seq:
    to-point(pt)
  val art = Polygon(pts*)
  add-glyph(sn, art, name? = name, class = class)

public defn circle (
  sn:SymbolNode,
  r:Double,
  p:Point|[Double, Double]|[Int, Int] = [0, 0]
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val p* = to-point(p)
  val art = Circle(p*, r)
  add-glyph(sn, art, name? = name, class = class)

public defn triangle (
  sn:SymbolNode,
  p0:Point|[Double, Double],
  p1:Point|[Double, Double],
  w:Double
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  ; This signature is from OCDB - I'm not sure
  ;  I understand what the algorithm is doing yet.
  throw $ NotImplementedYet("triangle")

public defn rectangle (
  sn:SymbolNode,
  width:Double,
  height:Double,
  --
  anchor:Anchor = C
  pose:Pose = DEF_SYMNODE_POSE
  name:String = ?,
  class:Seqable<String>|String = []
  ):
  val art = pose * Rectangle(anchor, width, height)
  add-glyph(sn, art, name? = name, class = class)

public defn line-rectangle (
  sn:SymbolNode,
  p0:Point,
  p1:Point,
  width:Double,
  --
  pose:Pose = DEF_SYMNODE_POSE
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  val top-right = Point(x(p1), y(p0))
  val bottom-left = Point(x(p0), y(p1))
  val art = pose * Polyline(width, [p0, top-right, p1, bottom-left, p0])
  add-glyph(sn, art, name? = name, class = class)

public defn polyline (
  sn:SymbolNode,
  pts:Collection<Arc|Point|[Double, Double]|[Int, Int]>,
  --
  width:Double = 0.05
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :

  val pts* = to-tuple $ for pt in pts seq:
    match(pt):
      (a:Arc): a
      (p:Point|[Double, Double]|[Int, Int]): to-point(p)
  val art = Polyline(width, pts*)
  add-glyph(sn, art, name? = name, class = class)

public defn approx-arc (
  sn:SymbolNode,
  p:Point|[Double, Double],
  r:Double,
  a1:Double,
  a0:Double = 0.0,
  w:Double = 0.05,
  n:Int = 10
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> Glyph :
  throw $ NotImplementedYet("approx-arc")

public val FONT-TO-UNIT = 10.0 / 72.0

public defn font-to-unit (i: Int) -> Double :
  to-double(i) * FONT-TO-UNIT

public defn text (
  sn:SymbolNode,
  p:Pose|Point|[Double, Double]|[Int, Int],
  content:String|Printable,
  --
  font-size:Int = 12
  anchor:Anchor = C
  name:String = ?,
  class:Seqable<String>|String = []
  ):
  val l =
    match(p):
      (pose:Pose): pose
      (point:Point|[Double Double]|[Int Int]): loc(to-point(point))
  val art = Text(to-string(content), font-to-unit(font-size), anchor, l)
  add-glyph(sn, art, name? = name, class = class)

public defn text (
  sn:SymbolNode,
  p:Pose|Point|[Double, Double]|[Int, Int],
  content:String|Printable,
  --
  unit-size:Double
  anchor:Anchor = C
  name:String = ?,
  class:Seqable<String>|String = []
  ):
  val l =
    match(p):
      (pose:Pose): pose
      (point:Point|[Double Double]|[Int Int]): loc(to-point(point))
  val art = Text(to-string(content), unit-size, anchor, l)
  add-glyph(sn, art, name? = name, class = class)

public defn text-size (
  content:String|Printable,
  unit-size:Double
) -> Dims :
  val art = Text(to-string(content), unit-size, C, loc(0.0, 0.0))
  to-Dims(bounds(art))