doc: \<DOC>
@title Quad Package Generator
@brief Generate landpatterns for packages with pins on 4-sides

@desc
This package contains a general purpose generator for creating
square/rectangular packages that have pins along the 4 external
edges of the package shape.

The generators defined here are parameterized to support multiple
different types of packages.

TODO - add diagram here of the package
 - Explain west, south, east, north with respect to the diagram.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/quad:
  import core
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/design/settings
  import jsl/landpatterns/IPC
  import jsl/landpatterns/packages
  import jsl/landpatterns/leads
  import jsl/landpatterns/pads
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/numbering
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/grid-planner
  import jsl/landpatterns/thermal-pads

public val QUAD-NUM-COLUMNS = 4

doc: \<DOC>
Quad Package Lead Span Definition

This is a tool for defining the `Lead-Profile` for the
leads on the E/W (X) Edges and the N/S (Y) Edges of the
quad package component.

This type allows the user to optionally select the
number of pins on either the X edges, the Y edges,
or on both. These numbers must still be consistent
with the `num-leads` parameter of the package.

See {@link select-quad-numbering} for more information.

<DOC>
public defstruct Quad-Lead-Profile <: Equalable & Hashable:
  x-leads : Lead-Profile
  x-count : Maybe<Int> with:
    ensure => ensure-positive!
  y-leads : Lead-Profile
  y-count : Maybe<Int> with:
    ensure => ensure-positive!
with:
  equalable => true
  printer => true
  hashable => true
  constructor => #Quad-Lead-Profile

doc: \<DOC>
Construct a Quad-Lead Profile

The quad-lead profile allows the user to optionally select different
lead-span configurations for the X leads vs the Y leads.

The X leads are the dual row of pads that straddle the Y axis.
The Y leads are the dual row of pads that straddle the X axis.

@param x-span Center to center distance between the X-dimension leads in mm.
@param x-pitch Center to center distance between leads in mm.
@param x-lead Lead Configuration data for generating the pad of the X leads

@param y-span Center to center distance between the Y-dimension leads in mm.
@param y-pitch Center to center distance between leads in mm.
@param y-lead Lead Configuration data for generating the pad of the Y leads

@param x-count Number of leads for the X-dimension leads. This is the number
of leads on the E/W sides of the quad package. If this value is not provided, then
we will attempt to guess based on other parameters.
@param y-count Number of leads for the Y-dimension leads. This is the number
of leads on the N/S sides of the quad package. If this value is not provided, then
we will attempt to guess based on other parameters.

<DOC>
public defn Quad-Lead-Profile (
  --
  x-span : Toleranced,
  x-pitch : Double,
  x-lead : SMT-Lead,
  y-span : Toleranced,
  y-pitch : Double,
  y-lead : SMT-Lead,
  x-count : Int = ?
  y-count : Int = ?
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(
    Lead-Profile( span = x-span, pitch = x-pitch, lead = x-lead),
    x-count,
    Lead-Profile( span = y-span, pitch = y-pitch, lead = y-lead),
    y-count
  )

public defn Quad-Lead-Profile (
  --
  span : Toleranced,
  pitch : Double,
  lead : SMT-Lead
  ) -> Quad-Lead-Profile:
  val profile = Lead-Profile( span = span, pitch = pitch, lead = lead)
  Quad-Lead-Profile(profile = profile)

doc: \<DOC>
Construct a Quad Profile from two separate `Lead-Profile` objects.

@param x-leads Lead Profile for the X leads (E/W edges)
@param y-leads Lead Profile for the Y leads (N/S edges)
@param x-count Number of leads for the X-dimension leads. This is the number
of leads on the E/W sides of the quad package. If this value is not provided, then
we will attempt to guess based on other parameters.
@param y-count Number of leads for the Y-dimension leads. This is the number
of leads on the N/S sides of the quad package. If this value is not provided, then
we will attempt to guess based on other parameters.
<DOC>
public defn Quad-Lead-Profile (
  --
  x-leads:Lead-Profile,
  y-leads:Lead-Profile,
  x-count:Int = ?
  y-count:Int = ?
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(x-leads, x-count, y-leads, y-count)

doc: \<DOC>
Construct a symmetric quad lead profile from a given `Lead-Profile` object

@param profile Lead Profile to apply to all edges of the quad package.
<DOC>
public defn Quad-Lead-Profile (
  --
  profile:Lead-Profile,
  ) -> Quad-Lead-Profile:
  #Quad-Lead-Profile(profile, None(), profile, None())


doc: \<DOC>
Select Numbering Scheme for QFN lead configuration

For standard square QFN packages, the {@link type:Column-Major-Numbering}
is sufficient to enumerate the pad ids for a QFN. This gets selected if
`x-count` and `y-count` are both `None`.

For non-standard QFNs that have uneven numbers of leads of
each side we must use a different numbering scheme. This function
will use the configuration in the {@link type:Quad-Lead-Profile} to
generate an appropriate {@link type:Uneven-Column-Major-Numbering} for
the asymmetric pin edges of a non-standard QFN.

If `x-count` is an `Int` and `y-count` is None - then we will attempt to use the
`num-leads` value to solve for what `y-count` should be assuming the N/S edge of
leads is equal on either side. Vice versa if `x-count` is `None` and `y-count` is an
`Int`.

@param num-leads Total number of leads in the desired package (not including thermal)
@throws ValueError If the lead configurations are invalid - such as one side having
less than or equal to 0 leads.
<DOC>
public defn select-quad-numbering (num-leads:Int, pf:Quad-Lead-Profile) -> Numbering :
  match(x-count(pf), y-count(pf)):
    (x:One<Int>, y:One<Int>):
      val ret = Uneven-Column-Major-Numbering(value(x), value(y))
      val obs-total = get-total-pads(ret)
      if obs-total != num-leads:
        throw $ ValueError("Quad: Lead Configurations Don't Match: total = %_ num-leads = %_" % [obs-total, num-leads])
      ret
    (x:One<Int>, y:None    ):
      val x-side = value(x)
      val y-side = (num-leads - (2 * x-side)) / 2
      if y-side <= 0:
        throw $ ValueError("Quad: Invalid N/S side lead configuration: y-side = %_" % [y-side])
      Uneven-Column-Major-Numbering(x-side, y-side)
    (x:None,     y:One<Int>):
      val y-side = value(y)
      val x-side = (num-leads - (2 * y-side)) / 2
      if x-side <= 0:
        throw $ ValueError("Quad: Invalid E/W side lead configuration: x-side = %_" % [x-side])
      Uneven-Column-Major-Numbering(x-side, y-side)
    (x:None,     y:None    ):
      Column-Major-Numbering(num-leads, QUAD-NUM-COLUMNS)

doc: \<DOC>
Base Quad Package Definition

The user is expected to inherit from this base implementation to
create various quad packages like QFN, QFP, etc.
<DOC>
public defstruct Quad-Package <: Package :
  doc: \<DOC>
  Number of leads ignoring any depopulated leads and thermal leads
  <DOC>
  num-leads:Int with:
    ensure => ensure-even-positive!
    as-method => true

  doc: \<DOC>
  Lead Profiles for All Edges of the Quad Package
  <DOC>
  lead-profile:Quad-Lead-Profile
  doc: \<DOC>
  Optional thermal lead for the package.
  <DOC>
  thermal-lead?:False|Shape|ThermalPad

  doc: \<DOC>
  Package Body for the Quad-based Package.
  <DOC>
  package-body:PackageBody with:
    as-method => true

  doc: \<DOC>
  Pad Planner for the Quad package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with:
    as-method => true

  doc: \<DOC>
  Lead Numbering Scheme for the Quad Package

  This provides a numbering scheme for the leads of the Quad
  package. By default, it uses {@link type:Column-Major-Numbering}.
  <DOC>
  lead-numbering:Numbering with:
    as-method => true

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true

with:
  printer => true
  constructor => #Quad-Package

public defn Quad-Package (
  --
  num-leads:Int,
  lead-profile:Quad-Lead-Profile,
  thermal-lead?:False|Shape|ThermalPad,
  package-body:PackageBody,
  pad-planner:PadPlanner = RectanglePadPlanner,
  lead-numbering:Numbering = select-quad-numbering(num-leads, lead-profile),
  density-level:DensityLevel = DENSITY-LEVEL
  ):
  #Quad-Package(
    num-leads, lead-profile, thermal-lead?,
    package-body, pad-planner, lead-numbering,
    density-level
  )

public defmethod build-pads (
  pkg:Quad-Package
  vp:VirtualLP
  ) -> False :

  val profile = lead-profile(pkg)
  val num-scheme = lead-numbering(pkg)
  val pad-planner = pad-planner(pkg)

  ; The Quad is structured as a grid of 4 columns x [M1, M2, M3, M4] rows
  ; For a standard Quad - M1-M4 are all equal.
  ; For a non-standard (rectangular) quad, M1 == M3, M2 == M4 but M1 != M2
  val row-sets = match(num-scheme):
    (ns:Column-Major-Numbering):
      val r = num-leads(pkg) / QUAD-NUM-COLUMNS
      to-tuple $ repeat(r, QUAD-NUM-COLUMNS)
    (ns:Uneven-Column-Major-Numbering):
      columns(ns)

  ; There are 2 X grids and 2 Y grids.
  ; The X grids straddle the Y axis.
  ; The Y grids straddle the X axis.
  ; The X & Y grids map to the following columns:
  ;   X-grid - 0 (West) & 2 (East)
  ;   Y-grid - 1 (South) & 3 (North)

  val x-params = compute-params(x-leads(profile), density-level = density-level(pkg))
  val y-params = compute-params(y-leads(profile), density-level = density-level(pkg))

  defn gen-pad-info () -> Seq<VirtualPad> :

    val grid-gen = QuadGridPlanner(
      param-sets = [x-params, y-params],
      row-sets = row-sets
    )

    for pos in grid(grid-gen) seq? :
      val [r, c] = [row(pos), column(pos)]

      val params = get-params(grid-gen, c)
      val pad-size = pad-size(params)

      val pad-id = to-pad-id(num-scheme, r, c)
      val pad-gen? = pad-generator(pad-planner, r, c)
      match(pad-gen?):
        (_:False): None()
        (pad-gen):
          val cls = build-vpad-classes(r, c)
          One $ VirtualPad(pad-id, pad-gen(pad-size), pose(pos), class = cls)

  append-all(vp, gen-pad-info())

  if thermal-lead?(pkg) is-not False:
      add-thermal-pad(vp, num-leads(pkg) + 1, thermal-lead?(pkg))



doc: \<DOC>
Quad Grid Planner

This grid planner supports Quad Package components like QFN,
QFP, etc

The idea is that this constructs a 4-Column grid where:
1.  Column 0 is in `-X` half plane and orders ascending for +Y to -Y
2.  Column 1 is in the `-Y` half-plane and is rotated 90 degrees
3.  Column 2 is in the `+X` half plane and is rotated 180 degrees
4.  Column 3 is in the `+Y` half-plane and is rotated 270 degrees

This creates the typical numbering scheme for ICs:

```
Left-Row  Col 0               Col 2    Right-Row
       Col 3 ->  16 15 14 13
   0          1               12         3
   1          2               11         2
   2          3               10         1
   3          4               9          0
       Col 1 ->  5  6  7  8
```

Notice that the row indices are directed down the edge of the package
and result in the same flipped on the left and right side pattern as
in a dual-package.
<DOC>
public defstruct QuadGridPlanner <: GridPlanner :
  doc: \<DOC>
  Lead Profile Parameter Sets
  The quad package is assumed to support different Lead-Profiles
  on the Y-span (-X and +X column) and X-span (-Y and +Y columns).
  This value is expected to consist of the lead params in the following
  order:
  [Y-span, X-span]
  <DOC>
  param-sets:[Lead-Profile-Params, Lead-Profile-Params]

  doc: \<DOC>
  Row Sets for the columns of the grid.
  This value can optionally be a single number of rows which is
  applied to all columns. This is the most common for regular
  square quad packages.
  This value can also be a `Tuple` of integers identifying unique
  numbers of rows per column. This is most useful for rectangular
  quad packages with uneven numbers of pads on each lead span.
  <DOC>
  row-sets:Int|Tuple<Int>

  doc: \<DOC>
  Number of Columns in the Grid
  By default the quad package is pegged to 4 columns.
  <DOC>
  columns:Int with:
    ensure => ensure-positive!
    as-method => true
    default => DEF_QUAD_GRID_COLS

with:
  constructor => #QuadGridPlanner
  printer => true

val DEF_QUAD_GRID_COLS = 4

doc: \<DOC>
Constructor for the Quad Grid Planner
<DOC>
public defn QuadGridPlanner (
  --
  param-sets:[Lead-Profile-Params, Lead-Profile-Params]
  row-sets:Int|Tuple<Int>
  ) -> QuadGridPlanner :
  #QuadGridPlanner(param-sets, row-sets, DEF_QUAD_GRID_COLS)

defmethod rows (g:QuadGridPlanner) -> Int :
  match(row-sets(g)):
    (uneven-row:Tuple<Int>):
      throw $ ValueError("Unexpected Combination - Uneven Rows but no Column Indicated")
    (static-row:Int):
      static-row

defmethod rows (g:QuadGridPlanner, c:Int) -> Int :
  match(row-sets(g)):
    (uneven-row:Tuple<Int>):
      uneven-row[c]
    (static-row:Int): static-row

defmethod pitch (g:QuadGridPlanner) -> Double|Dims :
  val given = param-sets(g)
  Dims(pitch(given[0]), pitch(given[1]))

doc: \<DOC>
Retrieve the appropriate lead profile parameters depending on column
@param c Column index as a zero-indexed value.
<DOC>
public defn get-params (g:QuadGridPlanner, c:Int) -> Lead-Profile-Params :
  param-sets(g)[c % 2]

defmethod grid (g:QuadGridPlanner) -> Seq<GridPosition> :
  if columns(g) != DEF_QUAD_GRID_COLS:
    throw $ ValueError("Unexpected 'columns=%_' - Expected '%_'" % [columns(g), DEF_QUAD_GRID_COLS])

  for c in 0 to columns(g) seq-cat:

    val params = get-params(g, c)

    val [pad-size, row-C-to-C, row-pitch] = to-tuple(params)

    val rot = to-double(90 * c)
    val offset = loc(0.0, 0.0, rot) * loc((- row-C-to-C) / 2.0, 0.0)

    val row-set = grid-locs(rows(g, c), 1, 1.0, row-pitch)
    val raw-grid-locs = for row-loc in row-set seq:
      offset * row-loc

    for (raw-grid-loc in raw-grid-locs, r in 0 to false) seq:
      GridPosition(r, c, raw-grid-loc)
