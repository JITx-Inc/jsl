doc: \<DOC>
@brief Small Outline No-Lead Packages

@desc

The SON package is a dual-row SMT package similar to the QFN. There is no external
leads resulting in a compact land pattern.

This package is also referred to as a `DFN` package.

TODO - Diagram here of SON style packages.

<DOC>


#use-added-syntax(jitx)
defpackage jsl/landpatterns/SON:
  import core
  import jitx
  import jitx/commands

  import jsl/errors
  import jsl/ensure
  import jsl/design/settings
  import jsl/geometry/box
  import jsl/geometry/LineRectangle
  import jsl/landpatterns/pads
  import jsl/landpatterns/leads
  import jsl/landpatterns/dual-row
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/numbering
  import jsl/landpatterns/packages
  import jsl/landpatterns/VirtualLP
  import jsl/landpatterns/silkscreen

doc: \<DOC>
Small Outline No Lead (SON) Lead Type

This type defines the parameters of each of the individual leads
of the IC package. It is typically used with {@link Lead-Profile}
<DOC>
public defstruct SON-Lead <: SMT-Lead:
  lead-type:LeadProtrusion with: (
      as-method => true,
      default => SmallOutlineNoLeads(),
    )
  length:Toleranced with: (
    as-method => true,
    ensure => ensure-positive!
    )
  width:Toleranced with: (
    as-method => true,
    ensure => ensure-positive!
    )
with:
  equalable => true
  hashable => true
  printer => true
  constructor => #SON-Lead

doc: \<DOC>
Constructor for `SON-Lead`

@param lead-type The default lead protrusion type is {@link SmallOutlineNoLeads}
@param length Length of the lead in mm - see {@link SMT-Lead} for more info
@param width Width of the lead in mm - see {@link SMT-Lead} for more info
<DOC>
public defn SON-Lead (
  --
  lead-type:LeadProtrusion = SmallOutlineNoLeads(),
  length:Toleranced,
  width:Toleranced,
) -> SON-Lead:
  #SON-Lead(lead-type, length, width)


doc: \<DOC>
SON Package Type

This type defines the features of the dual-row
small outline no-lead type of package.
<DOC>
public defstruct SON <: Dual-Package :
  doc: \<DOC>
  Total Number of Leads - excluding the thermal pad.
  <DOC>
  num-leads: Int with: (
    ensure => ensure-even-positive!,
    as-method => true
  )

  doc: \<DOC>
  Lead Profile for the pins on the opposing edges of the SON package.
  By default the {@link SON-Lead} type is used for the `lead` and
  `protrusion` definitions.
  <DOC>
  lead-profile:Lead-Profile with: (as-method => true)

  doc: \<DOC>
  Specify the presence and shape of the exposed thermal lead (pad)
  on the bottom side of the package body.
  If `false` - then no thermal pad is created.
  <DOC>
  thermal-lead?:False|Shape with: (as-method => true)
  doc: \<DOC>
  Package Body for the SON.
  <DOC>
  package-body:PackageBody with: (as-method => true)

  doc: \<DOC>
  Pad Planner for the SON package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with: (as-method => true)

  doc: \<DOC>
  Lead Numbering Scheme for the SOIC Package

  This provides a numbering scheme for the leads of the SON
  package. By default, it uses {@link Std-IC-Numbering}.
  <DOC>
  lead-numbering:Numbering with: (as-method => true)

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with: (as-method => true)
with:
  hashable => true
  printer => true
  constructor => #SON

val SON-DEF-PAD-PLANNER = RectanglePadPlanner
val SON-DEF-NUM-SCHEME = Column-Major-Numbering{_, DUAL-ROW-COLS}

doc: \<DOC>
Constructor for SON Packages

@param num-leads Total number of leads in the package (not including thermal leads)
@param lead-profile Lead span profile for describing the pads on the E/W edges.
@param thermal-lead? Optional thermal lead. This shape will be placed at (0.0, 0.0)
in the land pattern's reference frame.
@param package-body 3D component body descriptor.
@param pad-planner Pad shape planner - default is {@link RectanglePadPlanner}
@param num-scheme Numbering scheme for pads - default is {@link Column-Major-Numbering}
@param density-level Density Level of Generated Package
<DOC>
public defn SON (
  --
  num-leads:Int,
  lead-profile:Lead-Profile,
  thermal-lead?:False|Shape      = false,
  package-body:PackageBody,
  pad-planner:PadPlanner         = SON-DEF-PAD-PLANNER,
  num-scheme:Numbering           = SON-DEF-NUM-SCHEME(num-leads),
  density-level:DensityLevel     = DENSITY-LEVEL
  ) -> SON :
  #SON(
    num-leads, lead-profile, thermal-lead?, package-body,
    pad-planner, num-scheme, density-level
  )

public defmethod name (pkg:SON) -> String :
  defn to-deci (v:Double) -> String:
    val v* = to-int( v * 100.0 )
    to-string("%_" % [v*])
  val body = package-body(pkg)
  val p = to-deci(pitch $ lead-profile(pkg))
  val w = to-deci(typ $ width(body))
  val l = to-deci(typ $ length(body))
  val n = num-leads(pkg) + (1 when thermal-lead?(pkg) is-not False else 0)
  to-string("SON%_P%_X%_-%_N" % [p, w, l, n])

public defmethod courtyard-excess (pkg:SON) -> Double :
  val protrusion = lead-type $ lead $ lead-profile $ pkg
  val fillets = lead-fillets(protrusion, density-level = density-level(pkg))
  courtyard-excess(fillets)

public defn SON-overall-outline (
  pkg:SON,
  vp:VirtualLP
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):
  val pkg-body = package-body(pkg)
  val pkg-outline = bounds $ envelope(pkg-body, density-level = density-level(pkg))
  val pad-outline = bounds(get-pads(vp), layer-spec = SolderMask(side))
  val pad-outline* = fatten(mask-clearance + (line-width / 2.0), pad-outline)

  val overall = union(pkg-outline, pad-outline*)
  LineRectangle(overall, line-width = line-width)


public defn SON-pkg-outline (
  pkg:SON,
  vp:VirtualLP
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):
  val pkg-body = package-body(pkg)
  val pkg-outline = bounds $ envelope(pkg-body, density-level = density-level(pkg))
  val pkg-outline* = fatten(line-width / 2.0, pkg-outline)
  LineRectangle(pkg-outline*, line-width = line-width)
  ; TODO - Here is where I want to use `Difference` to substract out
  ;  the combined soldermask on all sides.

public defn SON-outline (
  pkg:SON,
  vp:VirtualLP
  --
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):
  val outline-geom = switch(density-level(pkg)):
    DensityLevelA: SON-overall-outline(pkg, vp)
    DensityLevelB: SON-overall-outline(pkg, vp)
    DensityLevelC: SON-pkg-outline(pkg, vp)

  add-artwork(vp, Silkscreen("outline", side), outline-geom, class = "outline")

public defn SON-pin-1-marker (
  pkg:SON,
  vp:VirtualLP
  --
  pin-1-id:Int|Ref = 1,
  line-width:Double = default-silk-width(),
  mask-clearance:Double = default-mask-clearance(),
  side:Side = Top
  ):

  val extra-margin = switch(density-level(pkg)):
    DensityLevelA: mask-clearance + line-width
    DensityLevelB: mask-clearance + line-width
    DensityLevelC: 0.0

  val pin-1-pad = get-pad-by-ref!(vp, pin-1-id)

  val pad-loc = pose(pin-1-pad)
  val pad-center = center(pad-loc)

  val smasks = get-layer(pin-1-pad, SolderMask(side))
  if length(smasks) == 0:
    ; This is a very strange error - it means
    ;  that pad 1 of this component doesn't have a soldermask
    ;  opening.
    ; This could happen if the user passed an erroneous `side` argument
    throw $ ValueError("Pin-1 - No Soldermask Opening for Pad on Side: %_" % [side])
  val smask = smasks[0]

  val width = x $ dims(smask)
  val offset = Point((- (width / 2.0) + mask-clearance + line-width + extra-margin), 0.0)
  val marker-shape = Circle(offset, line-width)

  val marker-geom = pad-loc * marker-shape

  add-artwork(vp, Silkscreen("pin-1-marker", side), marker-geom, name = "pin-1-dot", class = "pin1-marker")

  if density-level(pkg) == DensityLevelA :
    val outlines = to-tuple $ seq{as-VirtualArtwork, _} $ find-by-class(vp, "outline")
    if length(outlines) != 1:
      throw $ ValueError("Expected only one element in class 'outline': %," % [outlines])

    val outline = outlines[0]
    val o-box = bounds $ shape(outline)

    val marker = compute-triangle-marker(pad-center, o-box, line-width)
    add-artwork(
      vp, Silkscreen("pin-1-marker", side),
      marker,
      name = "pin-1-triangle",
      class = "pin-1-marker"
      )


public defmethod build-silkscreen (
  pkg:SON,
  vp:VirtualLP
  ) -> False:
  SON-outline(pkg, vp)
  SON-pin-1-marker(pkg, vp)


