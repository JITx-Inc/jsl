#use-added-syntax(jitx,tests)
defpackage jsl/tests/layerstack:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/layerstack
  import jsl/tests/utils
  import jsl/errors

deftest(layerstack) test-basic-symmetric:
  val stack = LayerStack(name = "Carl's Crazy Stack")

  ;Realistic thickness for testing:
  ;    weight 0.5oz -> thickness 17.4um = 0.0174mm
  ;    weight 1oz -> thickness 35um = 0.035mm
  ;    weight 2oz -> thickness 70um = 0.070mm
  ;    weight 3oz -> thickness 105um = 0.105mm
  val copper-35um = Copper(0.035, name = "cu")
  val core-FR4 = FR4(1.0, name = "core")
  val prepreg-FR4 = FR4(0.5, name = "prepreg")

  add-symmetric(copper-35um, core-FR4,
    add-symmetric(copper-35um, prepreg-FR4,
      add-symmetric(copper-35um, core-FR4, stack)
    )
  )

  val [prepreg-2, cu-2, core-2] = get-conductor(stack, 2)
  #EXPECT(prepreg-2 is-not None)
  #EXPECT(core-2 is-not None)

  val [prepreg-0, cu-0, core-0] = get-conductor(stack, 0)
  #EXPECT(prepreg-0 is None)
  #EXPECT(core-0 is-not None)

  val [prepreg-5, cu-5, core-5] = get-conductor(stack, 5)
  #EXPECT(prepreg-5 is-not None)
  #EXPECT(core-5 is None)

  ; For debug
  ; val pcb-stack = create-pcb-stackup(stack)
  ; print-def(pcb-stack)

deftest(layerstack) test-compute-thickness:

  val testvecs = [
    [0.5,  0.0174]
    [1.0,  0.0348]
    [2.0,  0.0696]
    [3.0,  0.1044]
    [4.0,  0.1392]
  ]
  for testvec in testvecs do:
    val [weight, exp-thick] = testvec
    val thick = compute-thickness(CopperMaterial, weight)
    #EXPECT(almost-equal?(thick, exp-thick, 0.001))

deftest(layerstack) test-get-conductor:
  val stack = LayerStack(name = "6-layer")

  val copper-35um = Copper(0.035, name = "cu")
  val core-FR4 = FR4(1.2, name = "core")
  val prepreg-FR4 = FR4(0.6, name = "prepreg")

  add-symmetric(copper-35um, core-FR4,
    add-symmetric(copper-35um, prepreg-FR4,
      add-symmetric(copper-35um, core-FR4, stack)
    )
  )

  #EXPECT(get-conductor-count(stack) == 6)

  val [prepreg-2?, cu-2, core-2?] = get-conductor(stack, 2)
  #EXPECT(prepreg-2? is-not None)
  #EXPECT(core-2? is-not None)

  val prepreg-2 = value!(prepreg-2?)
  val core-2 = value!(core-2?)

  #EXPECT(name(prepreg-2) is-not None)
  #EXPECT(value!(name(prepreg-2)) == "prepreg")
  #EXPECT(description(prepreg-2) is None)
  #EXPECT(thickness(prepreg-2) == 0.6)

  #EXPECT(name(core-2) is-not None)
  #EXPECT(value!(name(core-2)) == "core")
  #EXPECT(description(core-2) is None)
  #EXPECT(thickness(core-2) == 1.2)

  #EXPECT(name(cu-2) is-not None)
  #EXPECT(value!(name(cu-2)) == "cu")
  #EXPECT(description(cu-2) is None)
  #EXPECT(thickness(cu-2) == 0.035)

  ; Check the `get-copper` under failure cases:

  expect-throw({get-conductor(stack, -1)})
  expect-throw({get-conductor(stack, 10)})


deftest(layerstack) test-with-soldermask:

  val stack = LayerStack(name = "2-layer")

  val copper-35um = Copper(0.035, name = "cu")
  val core-FR4 = FR4(1.4, name = "core")

  add-symmetric(copper-35um, core-FR4, stack)
  add-soldermask(Soldermask(0.025), stack)

  #EXPECT(get-conductor-count(stack) == 2)

  val [sm?, cu-0, core-0?] = get-conductor(stack, 0)
  #EXPECT(sm? is-not None)
  #EXPECT(core-0? is-not None)

  val sm = value!(sm?)
  val core-0 = value!(core-0?)

  #EXPECT(almost-equal?(thickness(sm), 0.025))

  val [core-1?, cu-1, sm2?] = get-conductor(stack, 1)
  #EXPECT(sm2? is-not None)
  #EXPECT(core-1? is-not None)

;============================================================================
;<note>
My Crazy Stack - each layer is different for testing
 0 - copper-105um
 1 - core-FR4-2
 2 - copper-70um
 3 - prepreg-FR4
 4 - copper-35um
 5 - core-FR4-1
 6 - copper-35um
 7 - prepreg-FR4
 8 - copper-70um
 9 - core-FR4-2
 10 - copper-105um
;<note>
val test-stack = LayerStack(name = "My Crazy Stack")
val copper-17_5um = Copper(0.0175, name = "cu1")
val copper-35um = Copper(0.035, name = "cu1")
val copper-70um = Copper(0.070, name = "cu2")
val copper-105um = Copper(0.105, name = "cu3")
val core-FR4-1 = FR4(1.0, name = "core1")
val core-FR4-2 = FR4(1.2, name = "core2")
val prepreg-FR4 = FR4(0.4, name = "prepreg")

add-symmetric(copper-105um, core-FR4-2,
  add-symmetric(copper-70um, prepreg-FR4,
    add-symmetric(copper-35um, core-FR4-1, test-stack)
  )
)
;print("%~" % [test-stack])

; Test: test-stack[0]
deftest(layerstack) test-get :
  #EXPECT(test-stack[0] == copper-105um)
  #EXPECT(test-stack[1] == core-FR4-2)
  #EXPECT(test-stack[2] == copper-70um)
  #EXPECT(test-stack[3] == prepreg-FR4)

; Test: conductors(test-stack)[0]
deftest(layerstack) test-conductors :
  #EXPECT(conductors(test-stack)[0] == copper-105um)
  #EXPECT(conductors(test-stack)[1] == copper-70um)
  #EXPECT(conductors(test-stack)[2] == copper-35um)
  #EXPECT(conductors(test-stack)[3] == copper-35um)
  #EXPECT(conductors(test-stack)[4] == copper-70um)
  #EXPECT(conductors(test-stack)[5] == copper-105um)

; Test: set-name(test-stack[0] One("cu3-new"))
deftest(layerstack) test-set-name :
  val copper-105um = Copper(0.105, name = "cu3")
  #EXPECT(test-stack[0] == copper-105um)
  val copper-105um-new = Copper(0.105, name = "cu3-new")
  set-name(test-stack[0] "cu3-new")
  ;Verify that the layer has the new name
  #EXPECT(test-stack[0] == copper-105um-new)

; Test: 
;     Copper(0.035) : specify thickness 
;     Copper(0.035, name = "Cu") : specify thickness and name
;     Copper(0.035, AluminumMaterial, name = "Cu") : specify thickness, material and name
deftest(layerstack) test-copper-optional-arguments :
  val copper-35um = Copper(0.035)
  val copper-35um-explicit = Copper(0.035, CopperMaterial)
  #EXPECT(copper-35um == copper-35um-explicit)

  val copper-35um-with-name = Copper(0.035, name = "new-Cu")
  set-name(copper-35um "new-Cu")
  #EXPECT(copper-35um-with-name == copper-35um)
  
  val aluminum-35um = Copper(0.035, AluminumMaterial)
  val aluminum-35um-with-name = Copper(0.035, AluminumMaterial, name = "alum")
  set-name(aluminum-35um "alum")
   #EXPECT(aluminum-35um-with-name == aluminum-35um)

;========== Test different ways to create LayerStack ==========
doc:\<DOC>
  Verify the layers in a stack.
  The middle layer, at the bottom of the `top-layers` tuple, appears only once.
  The bottom layers are symmetric to the top layers in reverse order.

  Usage Example:
  ```
    val top-layers = [
      soldermask
      copper-35um
      prepreg 
      copper-17_5um
      core
    ]
    verify-layers(stack, top-layers)
  ```
  The expected `layers(stack)` equals
  ```
    [
      soldermask
      copper-35um
      prepreg 
      copper-17_5um
      core            ; the middle layer
      copper-17_5um
      prepreg
      copper-35um
      soldermask
    ]
  ```  
@param stack The LayerStack to verify
@param top-layers the top layers, from the top of the stack to the middle layer.
<DOC>
public defn verify-layers (stack:LayerStack, top-layers:Tuple<LayerSpec>) :
  #EXPECT(length(layers(stack)) == length(top-layers) * 2 - 1)
  val total-layers = length(layers(stack))
  val middle = total-layers / 2
  for idx in 0 through middle do :
    #EXPECT(stack[idx] == top-layers[idx])
    #EXPECT(stack[total-layers - 1 - idx] == top-layers[idx])

;Verify the 4-layers stack
defn verify-4-layer-stack (stack:LayerStack, soldermask?:True|False) :
  val soldermask = [Soldermask(0.019, SoldermaskMaterial)]
    when soldermask? else []
  val prepreg = FR4(0.1, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val top-layers = to-tuple $ cat(soldermask, [
      copper-35um
      prepreg 
      copper-17_5um
      core
    ])
  verify-layers(stack, top-layers)

;Use the function make-layer-stack to create a LayerStack from a tuple of LayerSpect
deftest(layerstack) make-4-layer-stack :
  val soldermask = Soldermask(0.019, SoldermaskMaterial)
  val prepreg = FR4(0.1, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val stack = make-layer-stack("4-Layer Stack without Soldermask", top-layers, soldermask = soldermask) where :
    val top-layers =  [
      [copper-35um prepreg] 
      [copper-17_5um core]
    ]
  verify-4-layer-stack(stack, true)

;Without the soldermask layer
deftest(layerstack) make-4-layer-layer-stack-no-soldermask :
  val prepreg = FR4(0.1, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val stack = make-layer-stack("4-Layer Stack with Soldermask", top-layers) where :
    val top-layers =  [
      [copper-35um prepreg] 
      [copper-17_5um core]
    ]
  verify-4-layer-stack(stack, false)

;Verify the layers with multiple adjacent prepreg layers
; - insert the `adjacent-prepregs` layers right below the outer [copper prepreg] layers
defn verify-4-layer-stack-with-adjacent-prepregs (stack:LayerStack, adjacent-prepregs:Tuple<LayerSpec>) :
  val prepreg = FR4(0.1, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val top-layers = Vector<LayerSpec>()
  add-all(top-layers, [copper-35um prepreg ])
  add-all(top-layers, adjacent-prepregs)
  add-all(top-layers, [copper-17_5um core])
  verify-layers(stack, to-tuple $ top-layers)

; Two adjacent prepreg layers
; Example: "JLC04161H-7628A"
deftest(layerstack) make-layer-stack-two-adjacent-prepreg-layers :
  val prepreg = FR4(0.1, FR4-Material)
  val prepreg2 = FR4(0.2, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val stack = make-layer-stack("4-layer with two adjacent prepreg layers", top-layers) where :
    val top-layers =  [
      [copper-35um prepreg]
      prepreg2
      [copper-17_5um core]
    ]
  verify-4-layer-stack-with-adjacent-prepregs(stack, [prepreg2])

; Two adjacent prepreg layers
; Example: "JLC04161H-7628A"
deftest(layerstack) make-layer-stack-three-adjacent-prepreg-layers :
  val prepreg = FR4(0.1, FR4-Material)
  val prepreg2 = FR4(0.2, FR4-Material)
  val prepreg3 = FR4(0.3, FR4-Material)
  val core = FR4(1.265, FR4-Material)
  val stack = make-layer-stack("4-layer with two adjacent prepreg layers", top-layers) where :
    val top-layers =  [
      [copper-35um prepreg]
      prepreg2
      prepreg3
      [copper-17_5um core]
    ]
  verify-4-layer-stack-with-adjacent-prepregs(stack, [prepreg2 prepreg3])