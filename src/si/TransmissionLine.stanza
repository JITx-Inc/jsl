doc: \<DOC>
Transmission Line Interface

The `TransmissionLine` interface is intended to provide
a defined set of methods for constructing the parameters needed
for a particular type of transmission line. Transmission lines in the
context of a board may be single-ended (think microstrip or stripline) or
differential (ie, edge-coupled microstrip lines, or edge-coupled CPWG).

<DOC>
#use-added-syntax(jitx)
defpackage jsl/si/TransmissionLine:
  import core
  import jitx


public defenum TransmissionStructure:
  Single-Ended
  Differential

doc: \<DOC>
Transmission Line Interface

This type is intended to be inherited and overrided to provide
the specific constraints for a particular structure.

TODO - Current implementation does not construct a `Toleranced` output
  This is because our `Toleranced` implementation does not yet include
  all of the necessary functions required, such as pow, sqrt, exp, log, etc
  in `Toleranced` argument form.

<DOC>
public defstruct TransmissionLine :
  doc: \<DOC>
  Sets where this transmission line applies to single-ended or differential pairs.
  <DOC>
  structure:TransmissionStructure

doc: \<DOC>
Solve for the effective relative permitivitty for this structure.

This is a unitless quantity.

@see https://en.wikipedia.org/wiki/Relative_permittivity

@param t Transmission Line Structure
@param freq Optional Frequency to compute dispersion relationships.
  If not given, then the DC parameter is assumed. Default value is `None()`
<DOC>
public defmulti effective-eps-r (t:TransmissionLine -- freq:Double = ?) -> Double

doc: \<DOC>
Solve for the characteristic impedance for this structure in ohms.

@param t Transmission Line Structure
@param freq Optional Frequency to compute dispersion relationships.
  If not given, then the DC parameter is assumed. Default value is `None()`
<DOC>
public defmulti Z0 (t:TransmissionLine -- freq:Double = ?) -> Double

doc: \<DOC>
Compute the Phase Velocity for this Structure in mm/s

@param t Transmission Line Structure
@param freq Optional Frequency to compute dispersion relationships.
  If not given, then the DC parameter is assumed. Default value is `None()`
<DOC>
public defmulti phase-velocity (t:TransmissionLine -- freq:Double = ?) -> Double

doc: \<DOC>
Computer the insertion loss rate for this structure in db/mm
@param t Transmission Line Structure
@param freq Optional Frequency to compute dispersion relationships.
  If not given, then the DC parameter is assumed. Default value is `None()`
<DOC>
public defmulti insertion-loss-rate (t:TransmissionLine -- freq:Double = ?) -> Double



doc: \<DOC>
Solve for the Transmission Line that provides a specific Characteristic Impedance.

The goal of this function is to solve for the physical features of this
transmission line that provide an impedance close to the passed `Z` impedance.

Some functions may have closed form impedance equations, others may need to use a solve.

Each function must document what features are expected to be valid in the
passed `t` object and which will be override with new values.

@param t Transmission Line Type to solve for
@param Z Target characteristic impedance for the structure.
@param freq Optional frequency to solve for - this includes the dispersion relationships.
<DOC>
public defmulti solve-Z (t:TransmissionLine, Z:Double -- freq:Double = ?) -> TransmissionLine