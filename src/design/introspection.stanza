#use-added-syntax(jitx)
defpackage jsl/design/introspection:
  import core
  import jitx
  import jitx/commands


doc: \<DOC>
Retrieve the `Instantiable` that generates the instances of the passed object.

NOTE: This function is recursive.

@param comps This is a instantiated component or module, or an array
 of instances (all of the same type).
@return The originating instantiable of either the instance or the elements
of the array.
<DOC>
public defn get-instantiable (comps:JITXObject|InstantiableType) -> Instantiable:
  val hc-type = match(comps):
    (jcomps:JITXObject): instantiable-type(jcomps)
    (insttype:InstantiableType): insttype
  match(hc-type):
    (hc-arr:InstantiableArray):
      get-instantiable(base(hc-arr))
    (hc-inst:Instantiable):
      hc-inst

doc: \<DOC>
Retrieve a Port by its symbol name

This function retrieves a port on a component but doesn't
throw an error if that port does not exist.

@param obj Component or Module to interrogate for a port
@param name Name of port to interrogate. This name can include
dot-notation style introspection if needed.
@return `None()` if no port by this name exists.
`One<JITXObject>` if a port is found by the passed name.
<DOC>
public defn get-port-by-name (obj:JITXObject, name:String) -> Maybe<JITXObject> :
  label<Maybe<JITXObject>> return:
    val pat = to-string(".%_" % [name])
    for p in pins(obj) do:
      val refName = to-string $ ref(p)
      if suffix?(refName, pat) :
        return(One(p))
    return(None())

doc: \<DOC>
Get the Cathode / Anode Ports of a device if they exist
@param obj Two-pin component or module instance that may or
may not be a polarized device with cathode (`c`) and anode (`a`) ports.
@return If the passed object is a polarized device, then this returns
One<Tuple> of the ports in the order `[c, a]`. If not a polarized device,
this function returns `None()`
<DOC>
public defn cathode-anode? (obj:JITXObject) -> Maybe<[JITXObject, JITXObject]> :
  val mC = get-port-by-name(obj, "c")
  val mA = get-port-by-name(obj, "a")
  match(mC, mA) :
    (oC:One<JITXObject>, oA:One<JITXObject>): One([value(oC), value(oA)])
    (x,y): None()

doc: \<DOC>
Retrieve the two ports of a 2-pin element device.

Two-pin lumped circuit element devices (like resistors, capacitors, etc)
come typically in one of two forms:

1.  The `p[1]` and `p[2]` form for non-polatized devices.
2.  The `c` and `a` form for the cathode / anode of polarized
devices.

This function interrogates an object and retrieves the ports
in a known order for use in circuits.

@param obj Two-Pin component or module instance
@return Tuple of two ports of the component - They are returned either as:
1.  `[p[1], p[2]]`
2.  `[c, a]`

Depending on whether the passed device is polarized.

<DOC>
public defn get-element-ports (obj:JITXObject) -> [JITXObject, JITXObject] :
  val mCA = cathode-anode?(obj)
  match(mCA):
    (given:One<[JITXObject, JITXObject]>): value(given)
    (_:None):
      [obj.p[1], obj.p[2]]

