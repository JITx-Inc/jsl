doc: \<DOC>
@title SOIC
@brief SOIC Package Definition

@desc

The SOIC package is a dual-row SMT package with a
typical pitch of 1.27mm.

Unless otherwise specified, the dimensions in this package are in millimeters.

@see JEDEC MS-012

@snippet Example

```stanza
public pcb-component LM324:
  port p : pin[[1 through 14]]

  val lp = create-landpattern $ SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = min-max(8.55, 8.75),
  )
  assign-landpattern = lp(p[1] => lp.p[1], ...)
```

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/SOIC:
  import core
  import jitx

  import jsl/ensure
  import jsl/design/settings
  import jsl/landpatterns/framework

val SOIC-DEF-PITCH = 1.27

doc: \<DOC>
SOIC Lead Definition

The default definitions for the SOIC leads are
taken from JEDEX MS-012.
<DOC>
public defstruct SOIC-Lead <: SMT-Lead:
  doc: \<DOC>
  Style of lead protrusion.

  Default style is {@link type:BigGullWingLeads}. This is
  suitable for pitches > 0.625mm. Below 0.625mm,
  the lead-type {@link type:SmallGullWingLeads} should be
  considered.
  <DOC>
  lead-type:LeadProtrusion with:
      as-method => true
      default => BigGullWingLeads()
  length:Toleranced with:
    as-method => true
    default => min-max(0.4, 1.27)
    ensure => ensure-positive!
  width:Toleranced with:
    as-method => true
    default => min-max(0.31, 0.51)
    ensure => ensure-positive!
with:
  equalable => true
  hashable => true
  printer => true

doc: \<DOC>
Create a Narrow SOIC PackageBody
@param length Length of the package body - typically
labeled `D` in the mechanical drawings of most
datasheets.
@param width Width of the package body - typically
labeled `E1` in the mechanical drawings of most
datasheets. The default is `min-max(3.8, 4.0)`
@param height Height of the package body above
the board surface. This is typically labeled `A`
in the mechanical drawings of most datasheets.
The default value is `min-max(1.35, 1.75)`.
<DOC>
public defn make-SOIC-narrow-body (
  length:Toleranced
  --
  width:Toleranced = min-max(3.8, 4.0),
  height:Toleranced = min-max(1.35, 1.75),
  ) -> PackageBody :
  PackageBody(width = width, length = length, height = height)

doc: \<DOC>
Create a Wide SOIC PackageBody
@param length Length of the package body - typically
labeled `D` in the mechanical drawings of most
datasheets.
@param width Width of the package body - typically
labeled `E1` in the mechanical drawings of most
datasheets. The default is `min-max(7.4, 7.6)`
@param height Height of the package body above
the board surface. This dimension is typically labeled `A`
in the mechanical drawings of most datasheets.
The default value is `min-max(2.35, 2.65)`.
<DOC>
public defn make-SOIC-wide-body (
  length:Toleranced
  --
  width:Toleranced = min-max(7.4, 7.6),
  height:Toleranced = min-max(2.35, 2.65)
  ) -> PackageBody :
  PackageBody(width = width, length = length, height = height)

doc: \<DOC>
SOIC Standard Package Type

This type defines the physical features of an SOIC
package. Instances of this type can be used to create
a landpattern using the {@link make-landpattern}
interface.
<DOC>
public defstruct SOIC <: Dual-Package :
  doc: \<DOC>
  Total Number of Leads - excluding the thermal pad.
  <DOC>
  num-leads: Int with:
    ensure => ensure-even-positive!
    as-method => true

  doc: \<DOC>
  Lead Profile for the pins on the opposing edges of the SOIC package.
  By default the {@link type:SOIC-Lead} type is used for the `lead` and
  `protrusion` definitions.
  <DOC>
  lead-profile:Lead-Profile with:
    as-method => true

  doc: \<DOC>
  Specify the presence and shape of the exposed thermal lead (pad)
  on the bottom side of the package body.
  If `false` - then no thermal pad is created.
  <DOC>
  thermal-lead?:False|Shape|ThermalPad with:
    as-method => true

  doc: \<DOC>
  Package Body for the SOIC.
  <DOC>
  package-body:PackageBody with:
    as-method => true

  doc: \<DOC>
  Pad Planner for the SOIC package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with:
    as-method => true

  doc: \<DOC>
  Lead Numbering Scheme for the SOIC Package

  This provides a numbering scheme for the leads of the SOIC
  package. By default, it uses {@link type:Std-IC-Numbering}.
  <DOC>
  lead-numbering:Numbering with:
    as-method => true

  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true
with:
  hashable => true
  printer => true
  constructor => #SOIC


val SOIC-DEF-PAD-PLANNER = RectanglePadPlanner
val SOIC-DEF-NUM-SCHEME = Column-Major-Numbering{_, DUAL-ROW-COLS}

doc: \<DOC>
Create a SOIC Package
<DOC>
public defn SOIC (
  --
  num-leads:Int,
  lead-span:Toleranced,
  package-body:PackageBody,
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SMT-Lead,                 = SOIC-Lead(),
  thermal-lead?:False|Shape|ThermalPad = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = SOIC-DEF-NUM-SCHEME(num-leads),
  density-level:DensityLevel     = DENSITY-LEVEL
  ) -> SOIC :
  val profile = Lead-Profile(
    span = lead-span,
    pitch = pitch,
    lead = lead
    )
  #SOIC(
    num-leads, profile, thermal-lead?, package-body,
    pad-planner, num-scheme, density-level
    )

doc: \<DOC>
Create a Narrow Body SOIC Package
@see {@link type:SOIC}
<DOC>
public defn SOIC-N (
  --
  num-leads: Int,
  lead-span:Toleranced,
  package-length:Toleranced,
  package-body:PackageBody       = make-SOIC-narrow-body(package-length),
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SOIC-Lead                 = SOIC-Lead(),
  thermal-lead?:False|Shape|ThermalPad = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = SOIC-DEF-NUM-SCHEME(num-leads),
  density-level:DensityLevel     = DENSITY-LEVEL
  ) -> SOIC :
  val profile = Lead-Profile(
    span = lead-span,
    pitch = pitch,
    lead = lead
    )
  #SOIC(
    num-leads, profile, thermal-lead?, package-body,
    pad-planner, num-scheme, density-level
    )

doc: \<DOC>
Create a Wide Body SOIC Package
@see {@link type:SOIC}
<DOC>
public defn SOIC-W (
  --
  num-leads: Int,
  lead-span:Toleranced,
  package-length:Toleranced,
  package-body:PackageBody       = make-SOIC-wide-body(package-length)
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SOIC-Lead                 = SOIC-Lead(),
  thermal-lead?:False|Shape|ThermalPad = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = SOIC-DEF-NUM-SCHEME(num-leads),
  density-level:DensityLevel     = DENSITY-LEVEL
  ) -> SOIC:
  val profile = Lead-Profile(
    span = lead-span,
    pitch = pitch,
    lead = lead
    )
  #SOIC(
    num-leads, profile, thermal-lead?, package-body,
    pad-planner, num-scheme, density-level
    )

public defmethod name (x:SOIC) -> String :
  val p = to-int $ (100.0 * pitch $ lead-profile(x))
  val l = to-int $ (100.0 * (typ $ span $ lead-profile(x)))
  val h = to-int $ (100.0 * (typ $ height $ package-body(x)))
  to-string("SOIC%_P%_X%_-%_" % [p, l, h, num-leads(x)])

doc: \<DOC>
Courtyard Excess Expectation for SOIC

The user can override by providing a custom {@link type:LeadProtrusion} type.
<DOC>
public defmethod courtyard-excess (pkg:SOIC) -> Double :
  val protrusion = lead-type $ lead $ lead-profile $ pkg
  val fillets = lead-fillets(protrusion, density-level = density-level(pkg))
  courtyard-excess(fillets)


public defmethod build-silkscreen (
  pkg:SOIC,
  vp:VirtualLP,
  ) -> False :
  val eo = EdgesOutline(
    pkg-body = package-body(pkg),
    density-level = density-level(pkg)
  )
  build-outline(eo, vp)
  build-smd-pin-1-dot(vp, dir = Left)
  add-reference-designator(vp)
