#use-added-syntax(jitx)
defpackage jsl/symbols/SCR:
  import core
  import jitx

  import jsl/ensure
  import jsl/geometry/box
  import jsl/symbols/framework
  import jsl/symbols/diodes

val DEF_BODY_WIDTH = 1.0
val DEF_LINE_WIDTH = 0.1
val DEF_FILLED? = false
val DEF_GATE_HEIGHT = 0.5
val DEF_PIN_LEN = 2.0
val DEF_PAD_REF_SIZE = 0.75

public defstruct SCRSymbolParams <: DiodeSymbolParams :

  body-dims:Dims|Double with:
    ensure => ensure-positive!,
    updater => sub-body-dims
    as-method => true
    default => DEF_BODY_WIDTH
  line-width:Double with:
    ensure => ensure-positive!
    updater => sub-line-width
    as-method => true
    default => DEF_LINE_WIDTH
  filled?:True|False with:
    updater => sub-filled?
    as-method => true
    default => DEF_FILLED?

  doc: \<DOC>
  Sets the Y-offset from the Diode Body for the gate pin
  <DOC>
  gate-height:Double with:
    ensure => ensure-positive!,
    updater => sub-gate-height
    default => DEF_GATE_HEIGHT
  pin-length:Double with:
    ensure => ensure-positive!
    updater => sub-pin-length
    default => DEF_PIN_LEN
  pad-ref-size:Double with:
    ensure => ensure-positive!
    updater => sub-pad-ref-size
    default => DEF_PAD_REF_SIZE
  ; SymbolParams Interface
  label-params?:Maybe<SymbolLabelParams> with:
    as-method => true
    default => None()

with:
  keyword-constructor => true
  equalable => true
  printer => true

var DEF_SCR_PARAMS = SCRSymbolParams()
public defn get-default-scr-symbol-params () -> SCRSymbolParams :
  DEF_SCR_PARAMS

public defn set-default-scr-symbol-params (v:SCRSymbolParams) -> False :
  DEF_SCR_PARAMS = v

public defn build-scr-glyphs (
  node:SymbolNode,
  pitch:Double,
  width:Double,
  p:SCRSymbolParams
  ) :

  ; Build Diode here
  build-diode-glyphs(node, pitch, p as DiodeSymbolParams)

  ; Now add the gate
  val p2 = pitch / 2.0
  val lw = line-width(p)

  val porch-end = compute-body-start(p as DiodeSymbolParams)

  val gh = gate-height(p)
  val Gp = gate-position(pitch, width, p)

  val start = Point(0.0, (- porch-end))
  line(node, [
    start
    Point(x(start) - gh, y(Gp))
    Gp
  ], width = lw, name = "gate-wire")

public defstruct SCRSymbol <: ThreePinSymbol :
  pitch:Double with:
    ensure => ensure-positive!,
    default => THREE_PIN_DEF_PITCH
    as-method => true
  width:Double with:
    ensure => ensure-positive!
    default => THREE_PIN_DEF_WIDTH
    as-method => true
  params:Maybe<SCRSymbolParams> with:
    default => None()
with:
  printer => true
  keyword-constructor => true

public defmethod name (x:SCRSymbol) -> String :
  "SCR"

defmethod get-params (x:SCRSymbol) -> SCRSymbolParams:
  match(params(x)):
    (_:None): get-default-scr-symbol-params()
    (given:One<SCRSymbolParams>): value(given)

defn gate-position (pitch:Double, width:Double, p:SCRSymbolParams) -> Point :
  val porch-end = compute-body-start(p as DiodeSymbolParams)
  Point((- width), (- porch-end + gate-height(p)))

public defmethod build-pins (
  x:SCRSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as SCRSymbolParams
  val p2 = pitch(x) / 2.0

  val dirs = [Up, Down, Left]
  val positions = [
    Point(0.0, p2),
    Point(0.0, (- p2)),
    gate-position(pitch(x), width(x), p)
  ]
  val pin-refs = [Ref("C"), Ref("A"), Ref("G")]
  for (pin-ref in pin-refs, direction in dirs, pos in positions) do:
    val pin-params = VirtualPinParams(
      direction = direction,
      pin-length = pin-length(p),
      pad-ref-size = pad-ref-size(p)
    )
    val name = to-string("pin-%_" % [pin-ref])
    add-pin(sn, pin-ref, pos, params = pin-params, name = name)


public defmethod build-artwork (
  x:SCRSymbol, sn:SymbolNode
  ):
  val p = get-params(x) as SCRSymbolParams
  val ch = create-child(sn, name = "scr")
  build-scr-glyphs(ch, pitch(x), width(x), p)

public defmethod build-params (
  x:SCRSymbol, sn:SymbolNode
  ):
  val b = glyph-bounds(sn)
  val p = get-label-params $ get-params(x)
  build-labels(
    p,
    sn,
    LabelPosition([right(b) + 0.5, 0.5], W)
    LabelPosition([right(b) + 0.5, (- 0.5)], W)
    )

var CURR-SCR-SYMBOL:ThreePinSymbol = SCRSymbol()
public defn get-default-scr-symbol () : CURR-SCR-SYMBOL
public defn set-default-scr-symbol (symb:ThreePinSymbol) :
  CURR-SCR-SYMBOL = symb
