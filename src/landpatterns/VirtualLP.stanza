#use-added-syntax(jitx)
defpackage jsl/landpatterns/VirtualLP:
  import core
  import collections
  import jitx
  import jitx/commands

  import jsl/errors

doc: \<DOC>
Base Type for the Elements of the Virtual Landpattern Tree

This type provides an interface for the elements to provide
the name/class labeling that will later be used for filtering.
<DOC>
public deftype VirtualElement

doc: \<DOC>
Optional Name for an Element

In general, the name of each element in virtual landpattern container
should be unique. Nothing prevents the user from using the same
name for multiple elements, but functions that use the virtual landpattern
functions may fail in subtle ways if they expect to find one element with
a particular name.
<DOC>
public defmulti name? (v:VirtualElement) -> Maybe<String>

doc: \<DOC>
Optional Class Set for this Element

The class set is used to indicate a set of elements that are
serve a particular function. This is similar to the `class`
attribute in `HTML` where they are used for styling among other
things.
<DOC>
public defmulti class (v:VirtualElement) -> Vector<String>

doc: \<DOC>
Force name resolution from an element
@throws ValueError If the element does not have a name
<DOC>
public defmulti name! (v:VirtualElement) -> String
public defmethod name! (v:VirtualElement) -> String :
  match(name?(v)):
    (_:None): throw $ ValueError("VirtualElement has No Name")
    (x:One<String>): value(x)


public defn to-class-vector (x:Seqable<String>|String) -> Vector<String> :
  val obj = match(x):
    (y:String): [y]
    (y:Seqable<String>): y
  to-vector<String>(obj)

val DEF_VLP_LOC = loc(0.0, 0.0)

doc: \<DOC>
Landpattern Content Generator Function

This function is a generator for creating the content of this
element into the `pcb-landpattern` definition.
@param v VirtualElement (self)
@param pose Optional transform to apply to the elements's content
<DOC>
public defmulti make-landpattern (v:VirtualElement, pose:Pose = ?)

doc: \<DOC>
Helper Struct for Constructing Virtual Landpattern definitions
<DOC>
public defstruct VirtualPad <: VirtualElement :
  pad-id:Int|Ref
  pad-def:Pad
  loc:Pose
  side:Side

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)

with:
  constructor => #VirtualPad
  printer => true

public defn VirtualPad (
  pad-id:Int|Ref,
  pad-def:Pad,
  loc:Pose
  --
  name:String = ?,
  class:Seqable<String>|String = []
  side:Side = Top
  ) -> VirtualPad :

  #VirtualPad(pad-id, pad-def, loc, side, name, to-class-vector(class))

doc: \<DOC>
Generator to create a `pad` statement for this `VirtualPad` instance

@param p Self
@param offset Extra offset to apply to the pad definition.
This is often used for translating an entire landpattern.
<DOC>
public defmethod make-landpattern (p:VirtualPad, offset:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    val r = ref(p)
    pad (r) : pad-def(p) at offset * loc(p) on side(p)

doc: \<DOC>
Function to mimic `layer` from jitx/commands on `VirtualPad`
<DOC>
public defn get-layer (p:VirtualPad, ls:LayerSpecifier) -> Tuple<Shape> :
  layer{_, ls} $ pad-def(p)

doc: \<DOC>
Function to mimic `layers` from jitx/commands on `VirtualPad`
<DOC>
public defn get-layers (p:VirtualPad) -> Tuple<LayerShape> :
  layers $ pad-def(p)

; Helpers for making `VirtualPad` behave like `LandpatternPad`

public defn ref (p:VirtualPad) -> Ref:
  match(pad-id(p)):
    (i:Int): IndexRef(Ref("p"), i)
    (x:Ref): x

public defn pad (p:VirtualPad) -> Pad :
  pad-def(p)

public defn pose (p:VirtualPad) -> Pose :
  loc(p)


public defstruct VirtualCopper <: VirtualElement :
  layer-index:LayerIndex
  shape:Shape

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualCopper
  printer => true

public defn VirtualCopper (
  layer-index:LayerIndex,
  shape:Shape
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualCopper :
  #VirtualCopper(layer-index, shape, name?, to-class-vector(class))

public defmethod make-landpattern (cu:VirtualCopper, pose:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    copper(layer-index(cu)) = pose * shape(cu)

public defstruct VirtualArtwork <: VirtualElement :
  layer-spec:LayerSpecifier
  shape:Shape

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)
with:
  constructor => #VirtualArtwork
  printer => true

public defn VirtualArtwork (
  layer-spec:LayerSpecifier,
  shape:Shape
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualArtwork :
  #VirtualArtwork(layer-spec, shape, name?, to-class-vector(class))

public defn to-layer-shape (art:VirtualArtwork) -> LayerShape :
  LayerShape(layer-spec(art), shape(art))

public defmethod make-landpattern (art:VirtualArtwork, pose:Pose = DEF_VLP_LOC) :
  inside pcb-landpattern:
    layer(layer-spec(art)) = pose * shape(art)

doc: \<DOC>
Virtual LandPattern Node

This type is used to create a virtual landpattern
model. We use this so that we can modify the landpattern
elements (pads, artwork, etc) before writing it to the
ESIR `pcb-landpattern` definition. Once written to ESIR,
the landpattern cannot be modified.

NOTE: I'm not supporting `copper` statements yet because
I'm not sure how or why to use them. They don't seem
particularly useful

<DOC>
public defstruct VirtualLP <: VirtualElement :
  doc: \<DOC>
  Optional Parent node. If `None` then this node
  is the root of the tree.
  <DOC>
  parent:Maybe<VirtualLP> with: (
    setter => set-parent
  )
  doc: \<DOC>
  Child nodes of this landpattern
  <DOC>
  children:Vector<VirtualLP>

  doc: \<DOC>
  Pads to be placed in this virtual landpattern frame of reference
  <DOC>
  lands:Vector<VirtualPad>

  doc: \<DOC>
  Layer Artwork to be placed in this virtual landpattern frame of reference.
  <DOC>
  artwork:Vector<VirtualArtwork>

  doc: \<DOC>
  Virtual `copper` statements as placced in the virtual landpattern
  frame of reference.
  <DOC>
  metal:Vector<VirtualCopper>

  doc: \<DOC>
  Kinematic transform of this node of the virtual landpattern tree.

  This pose will be applied to the reference frame of this node.
  This means that all geometry in this node will experience this
  transformation. Additionally, all children node's frames of
  reference will be transformed by this pose.
  <DOC>
  pose:Pose with: (
    setter => set-pose
  )

  ; Virtual Element
  name?:Maybe<String> with: (as-method => true)
  class:Vector<String> with: (as-method => true)

with:
  constructor => #VirtualLP
  printer => true

val DEF_VLP_POSE = loc(0.0, 0.0)

doc: \<DOC>
Construct a VirtualLP Leaf Node
This is not intended to be public. Use `create-child`
instead.
<DOC>
defn VirtualLP (
  parent:VirtualLP,
  pose:Pose = DEF_VLP_POSE
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualLP:
  #VirtualLP(
    One(parent),
    Vector<VirtualLP>(),
    Vector<VirtualPad>(),
    Vector<VirtualArtwork>(),
    Vector<VirtualCopper>(),
    pose,
    name?,
    to-class-vector(class)
  )

doc: \<DOC>
Construct a VirtualLP Root Node
<DOC>
public defn VirtualLP (
  pose:Pose = DEF_VLP_POSE
  --
  name?:Maybe<String> = None(),
  class:Seqable<String>|String = []
  ) -> VirtualLP :
  #VirtualLP(
    None(),
    Vector<VirtualLP>(),
    Vector<VirtualPad>(),
    Vector<VirtualArtwork>(),
    Vector<VirtualCopper>(),
    pose,
    name?,
    to-class-vector(class)
  )

doc: \<DOC>
Check if this is the root node in a Virtual Landpattern Tree
<DOC>
public defn is-root? (vp:VirtualLP) -> True|False :
  parent(vp) is None

public defn get-artwork (vp:VirtualLP, ls:LayerSpecifier) -> Seqable<VirtualArtwork> :
  for va in artwork(vp) filter:
    layer-spec(va) == ls

doc: \<DOC>
Attempts to mimic the `layer` function from jitx/commands

This returns the shapes present on a specific layer that
are defined directly in the landpattern or its children. It
does not include the geometry defined in the pads.

<DOC>
public defn get-layer (vp:VirtualLP, ls:LayerSpecifier) -> Tuple<Shape> :
  ; @NOTE - to match the behavior of `layer` which doesn't seem
  ;  to act recursively on a landpattern definition - we are not
  ;  inspecting the pads in this function.
  val local-shapes = for va in artwork(vp) seq?:
    if layer-spec(va) == ls:
      One $ shape(va)
    else:
      None()

  val kid-shapes = for child in children(vp) seq-cat:
    get-layer(child, ls)
  to-tuple $ cat(local-shapes, kid-shapes)

doc: \<DOC>
Get all shapes on the specified layer - including pad defined shapes
This function is an expansion on `get-layer` that includes
<DOC>
public defn get-layer-all (vp:VirtualLP, ls:LayerSpecifier) -> Tuple<Shape> :
  val local-shapes = get-layer(vp, ls)
  val land-shapes = for land in lands(vp) seq-cat:
    get-layer(land, ls)
  val kid-shapes = for child in children(vp) seq-cat:
    get-layer-all(child, ls)
  to-tuple $ for shList in [local-shapes, land-shapes, kid-shapes] seq-cat:
    shList

doc: \<DOC>
Attempts to mimic the `pads` function from jitx/commands
<DOC>
public defn get-pads (vp:VirtualLP) -> Tuple<VirtualPad> :
  val kid-pads = for child in children(vp) seq-cat:
    get-pads(child)
  val lp-pads = lands(vp)
  to-tuple $ cat(lp-pads, kid-pads)

doc: \<DOC>
Attempts to mimic the `layers` function from jitx/commands
<DOC>
public defn get-layers (vp:VirtualLP) -> Tuple<LayerShape> :
  ; @NOTE - to match the behavior of `layer` which doesn't seem
  ;  to act recursively on a landpattern definition - we are not
  ;  inspecting the pads in this function.
  val local-art = for va in artwork(vp) seq:
    to-layer-shape(va)
  val kid-art = for child in children(vp) seq-cat:
    get-layers(child)
  to-tuple $ cat(local-art, kid-art)

public defn get-copper (vp:VirtualLP, li:LayerIndex) -> Tuple<VirtualCopper> :
  to-tuple $ for m in metal(vp) filter:
    layer-index(m) == li

public defn get-coppers (vp:VirtualLP) -> Tuple<VirtualCopper> :
  to-tuple $ metal(vp)

public defn add-artwork (
  vp:VirtualLP,
  ls:LayerSpecifier,
  shape:Shape
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False :
  append(vp, VirtualArtwork(ls, shape, name? = name, class = class))

public defn add-artwork (
  vp:VirtualLP,
  ls:LayerSpecifier,
  shapes:Seqable<Shape>
  --
  class:Seqable<String>|String = []

  ) -> False :
  val new-art = for sh in shapes seq:
    VirtualArtwork(ls, sh, class = class)
  append-all(vp, new-art)

doc: \<DOC>
Add a `VirtualArtwork` instance to the landpattern
<DOC>
public defn append (vp:VirtualLP, va:VirtualArtwork) -> False :
    add{_, va} $ artwork(vp)

doc: \<DOC>
Add multipple `VirtualArtwork` instances to the landpattern.
<DOC>
public defn append-all (vp:VirtualLP, vas:Seqable<VirtualArtwork>) -> False :
    add-all{_, vas} $ artwork(vp)

doc: \<DOC>
Add a pad to the virtual landpattern
<DOC>
public defn append (vp:VirtualLP, p:VirtualPad) -> False :
  add{_, p} $ lands(vp)

doc: \<DOC>
Add a multiple pads to the virtual landpattern
<DOC>
public defn append-all (vp:VirtualLP, ps:Seqable<VirtualPad>) -> False :
  add-all{_, ps} $ lands(vp)

doc: \<DOC>
Add a virtual `copper` statement to virtual landpattern
<DOC>
public defn append (vp:VirtualLP, cu:VirtualCopper) -> False:
  add{_, cu} $ metal(vp)

doc: \<DOC>
Add multiple virtual `copper` statements to virtual landpattern
<DOC>
public defn append-all (vp:VirtualLP, cus:Seqable<VirtualCopper>) -> False:
  add-all{_, cus} $ metal(vp)

doc: \<DOC>
Add a copper geometry to the landpattern on a particular layer index.
<DOC>
public defn add-copper (
  vp:VirtualLP,
  li:LayerIndex,
  shape:Shape
  --
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> False:
  append(vp, VirtualCopper(li, shape, name? = name, class = class))

doc: \<DOC>
Add multiple copper geometry elements to the landpattern on a particular layer index.
<DOC>
public defn add-copper (
  vp:VirtualLP,
  li:LayerIndex,
  shapes:Seqable<Shape>
  --
  class:Seqable<String>|String = []
  ) -> False:
  val new-cu = for sh in shapes seq:
    VirtualCopper(li, sh, class = class)
  append-all(vp, new-cu)


doc: \<DOC>
Add a new child virtual landpattern node
@param vp Self
@param child VirtualLP to include as a child of `vp`
@throws ValueError If the passed `child` is already associated
with a parent.
<DOC>
public defn append (vp:VirtualLP, child:VirtualLP) -> False :
  ; TODO - check for cycles
  if parent(child) is-not None:
    throw $ ValueError("VirtualLP Child is already claimed by Parent")
  set-parent(child, One(vp))
  add{_, child} $ children(vp)

doc: \<DOC>
Create a new Virtual Landpattern that is a child of this node
@param vp Self
@param offset Default pose for the child node. This pose will
  be relative to the parent's pose.
@return VirtualLP with parent set to `vp`.
<DOC>
public defn create-child (
  vp:VirtualLP
  --
  offset:Pose = DEF_VLP_POSE
  name:String = ?,
  class:Seqable<String>|String = []
  ) -> VirtualLP :
  val ret = VirtualLP(
    vp,
    offset,
    name? = name,
    class = class
    )
  add{_, ret} $ children(vp)
  ret

doc: \<DOC>
Local Elements for this Virtual Landpattern

This does not search recursively into the children, it just
reports the elements of this node.
<DOC>
public defn elements (vp:VirtualLP) -> Seqable<VirtualElement> :
  for grp in [lands(vp), artwork(vp), metal(vp)] seq-cat:
    for elem in grp seq:
      elem as VirtualElement

doc: \<DOC>
Recursively generate the pads and layer artwork for this virtual landpattern

This function should be called from within a `pcb-landpattern`
definition. It will create `pad` and `layer` statements
which build up the landpattern
<DOC>
public defmethod make-landpattern (vp:VirtualLP, parent-pose:Pose = DEF_VLP_POSE) :
  inside pcb-landpattern:
    val curr-pose = parent-pose * pose(vp)
    ; Pads, Artwork, and Metal
    for elem in elements(vp) do:
      make-landpattern(elem, curr-pose)

    for child in children(vp) do:
      make-landpattern(child, curr-pose)


public defn find-by-name (vp:VirtualLP, name:String) -> Seqable<VirtualElement> :
  val local-elems = for elem in cat( [vp], elements(vp) ) filter:
    name?(elem) is-not None
    match(name?(elem)):
      (_:None): false
      (x:One<String>): value(x) == name

  val kid-elems = for child in children(vp) seq-cat:
    find-by-name(child, name)

  cat(local-elems, kid-elems)

public defn find-by-class (vp:VirtualLP, cls:String) -> Seqable<VirtualElement> :
  val local-elems = for elem in cat([vp], elements(vp)) filter:
    contains?(class(elem), cls)
  val kid-elems = for child in children(vp) seq-cat:
    find-by-class(child, cls)
  cat(local-elems, kid-elems)

public defn get-pad-by-ref (vp:VirtualLP, r:Ref|Int) -> Maybe<VirtualPad> :
  for lp-pad in get-pads(vp) first:
    if pad-id(lp-pad) == r:
      One(lp-pad)
    else:
      None()

; Converters
#for (vType in [VirtualPad, VirtualArtwork, VirtualCopper, VirtualLP]
  funcName in [as-VirtualPad, as-VirtualArtwork, as-VirtualCopper, as-VirtualLP]) :
  public defn funcName (e:VirtualElement) -> vType :
    e as vType
