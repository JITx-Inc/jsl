doc: \<DOC>
@title Packages & Landpatterns
@brief Interface definitions for Landpatterns
@desc

This package contains the definition of some abstract types for
defining the landpatterns of various components.

The goal of these definitions is to provide a consistent interface
across all landpattern definitions. This promotes re-use and
correctness.

All of the entities in this package use millimeters as their standard unit.

TODO - Diagram here discussing the concept for landpatterns & component packages.
  We should include examples of various packages and use the right nomenclature
  to describe things.

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/packages:
  import core
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/numbering
  import jsl/landpatterns/courtyard
  import jsl/landpatterns/VirtualLP

  forward jsl/landpatterns/package-body


doc: \<DOC>
Every component has a representation for a
package
<DOC>
public deftype Package <: Hashable

doc: \<DOC>
IPC7351 compliant name for the package generated
by this instance.
<DOC>
public defmulti name (x:Package) -> String

doc: \<DOC>
Number of Total Lead Mounts on this Package

This number should include all possible standard lead
locations on this package.

1.  The user should not substract the pins that are marked absent.
2.  The user should not include the thermal lead if any.
<DOC>
public defmulti num-leads (x:Package) -> Int

doc: \<DOC>
Package Body provides the physical envelope for
the package's body.
<DOC>
public defmulti package-body (x:Package) -> PackageBody

doc: \<DOC>
Pad Planner for this Package
<DOC>
public defmulti pad-planner (x:Package) -> PadPlanner

doc: \<DOC>
Lead Numbering Scheme for this Package
<DOC>
public defmulti lead-numbering (x:Package) -> Numbering

public defmulti courtyard-excess (x:Package) -> Double

doc: \<DOC>
Density Level for this Package
<DOC>
public defmulti density-level (x:Package) -> DensityLevel

doc: \<DOC>
Default Density Level Setting

If the package doesn't provide an implementation for
density-level - then this function will serve the `DENSITY-LEVEL`
from the design settings file as the default level.
<DOC>
public defmethod density-level (x:Package) -> DensityLevel :
  DENSITY-LEVEL

doc: \<DOC>
Default Landpattern Generator Pose
This value should be the default value used for the
`pose` argument in all `make-landpattern` invokations.
<DOC>
public val DEF_LP_POSE = loc(0.0, 0.0)


doc: \<DOC>
Build the pad/copper in a virtual landpattern

This function is used to build the landpattern's
pad definitions in a virtual landpattern environment.
That virtual environment can then be written out to a
`pcb-landpattern` definition.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-pads (
  pkg:Package,
  vp:VirtualLP,
  ) -> False


doc: \<DOC>
Generator for creating the copper pad landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the necessary pads and copper geometry associated
with that component's landpattern.

@param pkg IC Package for which we are creating a landpattern
@param pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-pads (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default Implementation of the Landpattern Copper Generator
<DOC>
public defmethod make-pads (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-pads(pkg, virt)
    make-landpattern(virt)


doc: \<DOC>
Create silkscreen content in virtual landpattern

This function is used to build the landpattern's
silkscreen artwork in a virtual landpattern environment.
That virtual environment can then be written out to a
`pcb-landpattern` definition.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-silkscreen (
  pkg:Package,
  vp:VirtualLP,
  ) -> False

doc: \<DOC>
Default silkscreen creator - No Silkscreen Content
<DOC>
public defmethod build-silkscreen (
  pkg:Package,
  vp:VirtualLP,
  ) -> False:
  false

doc: \<DOC>
Generator for creating the silkscreen of a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the silkscreen outline, pin-1 indicator, or
any other silkscreen artwork.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-silkscreen (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default Silkscreen Implementation - No Silkscreen Artwork Created
<DOC>
public defmethod make-silkscreen (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-silkscreen(pkg, virt)
    make-landpattern(virt)



doc: \<DOC>
Create courtyard content in a virtual landpattern

This function is used to build the landpattern's
courtyard region in a virtual landpattern environment.
That virtual environment can then be written out to a
`pcb-landpattern` definition.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-courtyard (
  pkg:Package,
  vp:VirtualLP,
  ) -> False

doc: \<DOC>
Default courtyard creator

This function creates the default courtyard for the component
by introducing a center mark at the origin and a bounding
rectangle on the `Courtyard(Top)` layer.
<DOC>
public defmethod build-courtyard (
  pkg:Package,
  vp:VirtualLP,
  ) -> False:
  val excess = courtyard-excess(pkg)
  val outline = build-courtyard-boundary(vp, package-body(pkg), density-level(pkg), excess = excess)
  build-courtyard-origin(vp, outline)
  false


doc: \<DOC>
Generator for creating courtyard for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the courtyard outline for this component.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-courtyard (
  pkg:Package
  --
  pose:Pose = ?
  )

public defmethod make-courtyard (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-courtyard(pkg, virt)
    make-landpattern(virt)


doc: \<DOC>
Create `keep-out` regions in a virtual landpattern

This function is used to build the landpattern's
keep-out regions in a virtual landpattern environment.
This may include keep-outs for copper, vias, etc.
That virtual environment can then be written out to a
`pcb-landpattern` definition.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-keep-out (
  pkg:Package,
  vp:VirtualLP,
  ) -> False

doc: \<DOC>
Default `build-keep-out` - No Keep-out Regions Applied.
<DOC>
public defmethod build-keep-out (
  pkg:Package,
  vp:VirtualLP,
  ) -> False:
  false

doc: \<DOC>
Generator for creating keep-out constraints for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the keep-out regions for this component.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-keep-out (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default `make-keep-out` - Constructs the Keepouts Only.
<DOC>
public defmethod make-keep-out (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-keep-out(pkg, virt)
    make-landpattern(virt)

doc: \<DOC>
Create `cut-out` regions in a virtual landpattern

This function is used to build the landpattern's
cut-out regions in a virtual landpattern environment.

The cut-outs are routed areas where the board is
completely removed. Sharp corners (zero radius) are
difficult to manufacturer so filleted edges should be
used where appropriate.

The VirtualLP environment will be written out to a
`pcb-landpattern` definition by the `make-cut-out`
function.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
<DOC>
public defmulti build-cut-out (
  pkg:Package,
  vp:VirtualLP,
  ) -> False

doc: \<DOC>
Default `build-cut-out` - No cut-out regions created.
<DOC>
public defmethod build-cut-out (
  pkg:Package,
  vp:VirtualLP,
  ) -> False:
  false

doc: \<DOC>
Generator for creating cutout regions in the landpattern.

This generator is typically called within a `pcb-landpattern`
definition to create the `Cutout()` layer regions for this component.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
<DOC>
public defmulti make-cut-out (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default Generator `make-cut-out` - Constructs the cutouts only.
<DOC>
public defmethod make-cut-out (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-cut-out(pkg, virt)
    make-landpattern(virt)

doc: \<DOC>
Create conformal coat mask regions in a virtual landpattern

This function is used to build the landpattern's
conformal coat mask regions in a virtual landpattern environment.
Typically this is used to mark where on this component conformal
coating should not be applied - like for connector openings, etc.
That virtual environment can then be written out to a
`pcb-landpattern` definition.

@param pkg Package definition to build
@param vp Virtual Landpattern Container
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-conformal-mask (
  pkg:Package,
  vp:VirtualLP,
  ) -> False

doc: \<DOC>
Default `build-conformal-mask` - No Conformal Mask Regions Applied.
<DOC>
public defmethod build-conformal-mask (
  pkg:Package,
  vp:VirtualLP,
  ) -> False:
  false

doc: \<DOC>
Generator for creating conformal coat masks for a landpattern

This generator is typically called within a `pcb-landpattern`
definition to create the conformal coat mask regions. This is
typically useful for connectors or thermal interfaces.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti make-conformal-mask (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default Conformal Coat Generator
<DOC>
public defmethod make-conformal-mask (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-conformal-mask(pkg, virt)
    make-landpattern(virt)


doc: \<DOC>
Apply all `Package` builder functions

This function applies all of the `build-*` functions
associated with the `Package` type to a virtual landpattern container.

@param pkg IC Package for which we are creating silkscreen artwork
@param virt Virtual Landpattern to which content will be written
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmulti build-all (
  pkg:Package,
  virt:VirtualLP
  ) -> False

doc: \<DOC>
Externally Defined Build All Order

This function can be used when you want to override the
default behavior of default `build-all` defmethod.
<DOC>
public defn package-build-all-order (
  pkg:Package,
  virt:VirtualLP
  ) -> False:
  build-pads(pkg, virt)
  build-courtyard(pkg, virt)
  build-silkscreen(pkg, virt)
  build-keep-out(pkg, virt)
  build-cut-out(pkg, virt)
  build-conformal-mask(pkg, virt)

doc: \<DOC>
Default `build-all` implementation

Builders are applied in the following order:

1.  {@link build-pads}
1.  {@link build-courtyard}
1.  {@link build-silkscreen}
1.  {@link build-keep-out}
1.  {@link build-cut-out}
1.  {@link build-conformal-mask}

<DOC>
public defmethod build-all (
  pkg:Package,
  virt:VirtualLP
  ) -> False :
  package-build-all-order(pkg, virt)

doc: \<DOC>
Generator for applying all `Package` generators

This function applies all of the `make-*` generators
associated with the `Package` type.

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.

<DOC>
public defmulti make-all (
  pkg:Package
  --
  pose:Pose = ?
  )

doc: \<DOC>
Default `make-all` generator implementation

@param pkg IC Package for which we are creating silkscreen artwork
@param pkg pose Offset to apply to all of the geometry generated
by this generator function. By default, no offset is applied.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmethod make-all (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE
  ):
  inside pcb-landpattern:
    val virt = VirtualLP(pose)
    build-all(pkg, virt)
    make-landpattern(virt)

doc: \<DOC>
Create a `LandPattern` definition

This function is used to create a complete landpattern definition
for this `Package`. Typically this function would use the `make-*`
generators for this type to construct a `pcb-landpattern` definition
and return it.

@param pkg Package to create a landpattern for.
@param pose Geometry gets created with an offset from the origin
by `pose`.
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.

Example:
```
  val lp = create-landpattern(pkg)

  ; Is equivalent to:

  pcb-landpattern lp:
    name = "lp"
    description = ""
    make-landpattern(pkg)
```
<DOC>
public defmulti create-landpattern (
  pkg:Package
  --
  pose:Pose = ?,
  description:String = ?,
  ) -> LandPattern

doc: \<DOC>
Default Implementation of `create-landpattern`

The default landpattern creator combines all of the
defined generators for a `Package` (ie, `make-*` functions)
to generate the complete landpattern for a package.

In more complex packages, you may need to define your own
`pcb-landpattern` definition with multiple packages

@param pkg Package to create a landpattern for.
@param pose Offset of the geometry in the landpattern. Default
is no offset, ie `loc(0.0, 0.0)`
@param density-level Density Level for this LandPattern definition.
See IPC7351 regarding Maximum, Nominal, and Least Material Conditions.
<DOC>
public defmethod create-landpattern (
  pkg:Package
  --
  pose:Pose = DEF_LP_POSE,
  description:String = "",
  ) -> LandPattern :
  pcb-landpattern lp:
    name = name(pkg)
    description = description
    make-all(pkg, pose = pose)
  lp




