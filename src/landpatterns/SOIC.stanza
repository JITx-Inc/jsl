doc: \<DOC>
@title SOIC
@brief SOIC Package Definition

@desc

The SOIC package is a dual-row SMT package with a
typical pitch of 1.27mm.

Unless otherwise specified, the dimensions in this package are in millimeters.

@see JEDEC MS-012

@snippet Example

```stanza
public pcb-component LM324:
  port p : pin[[1 through 14]]

  val lp = create-landpattern $ SOIC-N(
    num-leads = 14,
    lead-span = min-max(5.8, 6.2),
    package-length = min-max(8.55, 8.75),
  )
  assign-landpattern = lp(p[1] => lp.p[1], ...)
```

<DOC>
#use-added-syntax(jitx)
defpackage jsl/landpatterns/SOIC:
  import core
  import jitx

  import jsl/design/settings
  import jsl/landpatterns/pads
  import jsl/landpatterns/leads
  import jsl/landpatterns/helpers
  import jsl/landpatterns/dual-row
  import jsl/landpatterns/pad-planner
  import jsl/landpatterns/numbering
  import jsl/landpatterns/packages


val SOIC-DEF-PITCH = 1.27

doc: \<DOC>
SOIC Lead Definition

The default definitions for the SOIC leads are
taken from JEDEX MS-012.
<DOC>
public defstruct SOIC-Lead <: SMT-Lead:
  doc: \<DOC>
  Style of lead protrusion.

  Default style is {@link BigGullWingLeads}. This is
  suitable for pitches > 0.625mm. Below 0.625mm,
  the lead-type {@link SmallGullWingLeads} should be
  considered.
  <DOC>
  lead-type:jsl/landpatterns/leads/LandProtrusionType with: (
      as-method => true,
      default => BigGullWingLeads,
    )
  length:Toleranced with: (
    as-method => true,
    default => min-max(0.4, 1.27),
    ensure => ensure-positive!
    )
  width:Toleranced with: (
    as-method => true,
    default => min-max(0.31, 0.51),
    ensure => ensure-positive!
    )
with:
  equalable => true
  hashable => true
  printer => true

doc: \<DOC>
Create a Narrow SOIC PackageBody
@param length Length of the package body - typically
labeled `D` in the mechanical drawings of most
datasheets.
@param width Width of the package body - typically
labeled `E1` in the mechanical drawings of most
datasheets. The default is `min-max(3.8, 4.0)`
@param height Height of the package body above
the board surface. This is typically labeled `A`
in the mechanical drawings of most datasheets.
The default value is `min-max(1.35, 1.75)`.
<DOC>
public defn make-SOIC-narrow-body (
  length:Toleranced
  --
  width:Toleranced = min-max(3.8, 4.0),
  height:Toleranced = min-max(1.35, 1.75),
  anchor:Anchor = C
  ) -> PackageBody :
  #PackageBody(width, length, height, anchor)

doc: \<DOC>
Create a Wide SOIC PackageBody
@param length Length of the package body - typically
labeled `D` in the mechanical drawings of most
datasheets.
@param width Width of the package body - typically
labeled `E1` in the mechanical drawings of most
datasheets. The default is `min-max(7.4, 7.6)`
@param height Height of the package body above
the board surface. This dimension is typically labeled `A`
in the mechanical drawings of most datasheets.
The default value is `min-max(2.35, 2.65)`.
<DOC>
public defn make-SOIC-wide-body (
  length:Toleranced
  --
  width:Toleranced = min-max(7.4, 7.6),
  height:Toleranced = min-max(2.35, 2.65)
  anchor:Anchor = C
  ) -> PackageBody :
  #PackageBody(width, length, height, anchor)

doc: \<DOC>
SOIC Standard Package Type

This type defines the physical features of an SOIC
package. Instances of this type can be used to create
a landpattern using the {@link make-landpattern}
interface.
<DOC>
public defstruct SOIC <: Package :
  doc: \<DOC>
  Total Number of Leads - excluding the thermal pad.
  <DOC>
  num-leads: Int with: (
    ensure => ensure-even-positive!,
    as-method => true
  )
  doc: \<DOC>
  Lead Span is the measure from the external edge of the leads
  on one side of the package to the external edge of the leads
  on the opposite side of the package. In the mechanical drawing
  of most datasheets, this dimension is labeled `E`
  <DOC>
  lead-span:Toleranced with: (
    ensure => ensure-positive!
  )
  doc: \<DOC>
  Specify the presence and shape of the exposed thermal lead (pad)
  on the bottom side of the package body.
  If `false` - then no thermal pad is created.
  <DOC>
  thermal-lead?:False|Shape
  doc: \<DOC>
  The center-to-center distance between leads of the package on
  one side. In the mechanical drawings of most datasheets, this
  dimension is labeled `e`.
  <DOC>
  pitch:Double with: (
    ensure => ensure-positive!
  )
  doc: \<DOC>
  Lead Structure for this Package
  By default the `SOIC-Lead()` default implementation
  is used.
  <DOC>
  lead:SMT-Lead with: (
    default => SOIC-Lead()
  )
  doc: \<DOC>
  Package Body for the SOIC.
  <DOC>
  package-body:PackageBody with: (as-method => true)

  doc: \<DOC>
  Pad Planner for the SOIC package

  This provides a default pad planner that assumes that all lead
  positions are active and provides a rectangle shaped pad for
  all positions. The user can override this with their preferred
  shape as desired.
  <DOC>
  pad-planner:PadPlanner with: (as-method => true)

  doc: \<DOC>
  Lead Numbering Scheme for the SOIC Package

  This provides a numbering scheme for the leads of the SOIC
  package. By default, it uses {@link Std-IC-Numbering}.
  <DOC>
  lead-numbering:Numbering with: (as-method => true)

with:
  hashable => true
  printer => true
  constructor => #SOIC

public defmethod name (x:SOIC) -> String :
  val p = to-int $ (100.0 * pitch(x))
  val l = to-int $ (100.0 * (typ $ lead-span(x)))
  val h = to-int $ (100.0 * (typ $ height $ package-body(x)))
  to-string("SOIC%_P%_X%_-%_" % [p, l, h, num-leads(x)])

val SOIC-DEF-PAD-PLANNER = RectanglePadPlanner

doc: \<DOC>
Create a SOIC Package
<DOC>
public defn SOIC (
  --
  num-leads:Int,
  lead-span:Toleranced,
  package-body:PackageBody,
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SMT-Lead,                 = SOIC-Lead(),
  thermal-lead?:False|Shape      = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = Std-IC-Numbering(num-leads),
  ) -> SOIC :
  #SOIC(
    num-leads, lead-span, thermal-lead?, pitch, lead, package-body,
    pad-planner, num-scheme
    )

doc: \<DOC>
Create a Narrow Body SOIC Package
@see {@link SOIC}
<DOC>
public defn SOIC-N (
  --
  num-leads: Int,
  lead-span:Toleranced,
  package-length:Toleranced,
  package-body:PackageBody       = make-SOIC-narrow-body(package-length),
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SOIC-Lead                 = SOIC-Lead(),
  thermal-lead?:False|Shape      = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = Std-IC-Numbering(num-leads),
  ) -> SOIC :
  #SOIC(
    num-leads, lead-span, thermal-lead?, pitch, lead, package-body,
    pad-planner, num-scheme
    )

doc: \<DOC>
Create a Wide Body SOIC Package
@see {@link SOIC}
<DOC>
public defn SOIC-W (
  --
  num-leads: Int,
  lead-span:Toleranced,
  package-length:Toleranced,
  package-body:PackageBody       = make-SOIC-wide-body(package-length)
  pitch:Double                   = SOIC-DEF-PITCH,
  lead:SOIC-Lead                 = SOIC-Lead(),
  thermal-lead?:False|Shape      = false,
  pad-planner:PadPlanner         = SOIC-DEF-PAD-PLANNER,
  num-scheme:Numbering           = Std-IC-Numbering(num-leads),
  ) -> SOIC:
  #SOIC(
    num-leads, lead-span, thermal-lead?, pitch, lead, package-body,
    pad-planner, num-scheme
    )

doc: \<DOC>
Generator for Creating SOIC LandPatterns
@param pkg SOIC Package Definition
@param density-level Defines the compactness of the symbol created. By default,
  the design density-level will be selected.
<DOC>
public defmethod make-landpattern (
  pkg:SOIC
  --
  density-level:DensityLevel = DENSITY-LEVEL,
  ) :
  inside pcb-landpattern:
    make-dual-row-smd-landpattern(
      num-leads(pkg),
      pitch(pkg),
      lead(pkg),
      lead-span(pkg),
      package-body(pkg),
      pad-planner = pad-planner(pkg),
      num-scheme = lead-numbering(pkg),
      density-level = density-level,
      with-pol-marker? = true
      thermal-lead? = thermal-lead?(pkg)
    )


