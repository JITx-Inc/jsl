#use-added-syntax(jitx)
defpackage jsl/landpatterns/two-pin/molded:
  import core
  import jitx
  import jitx/commands

  import jsl/design/settings
  import jsl/landpatterns/framework
  import jsl/landpatterns/two-pin/utils
  import jsl/landpatterns/IPC
  import jsl/geometry/box


public defstruct Molded-2pin-Lead <: SMT-Lead:
  lead-type:LeadProtrusion with:
    as-method => true
    default => BigRectangularLeads()
  length:Toleranced with:
    as-method => true
  width:Toleranced with:
    as-method => true
with:
  keyword-constructor => true

public defstruct Molded-2pin <: Package :
  doc: \<DOC>
  Span from lead edge to lead edge for this component
  Value in mm.
  <DOC>
  lead-span:Toleranced
  doc: \<DOC>
  Lead Specification for this land pattern.
  Typically this will use {@link type:Molded-2pin-Lead}.
  <DOC>
  lead:SMT-Lead,
  doc: \<DOC>
  Indicates whether `p[1]/p[2]` or `a/c` conventions are used for pads
  <DOC>
  polarized?:True|False
  doc: \<DOC>
  Controls which pad will get a dot marker indicating "Pin 1"

  For Diodes, this may need to be `c`. For Polarized capacitors, it may need to be `a`.

  By default - if the `polarized?` arg is false - then this value is `None()`.
  If the `polarized?` arg is true - then this value is `One(#R(a))` indicating
  that the `anode` pin gets a pin-1 marker.
  <DOC>
  pin-1-id?:Maybe<Int|Ref>

  doc: \<DOC>
  Optional Keepout for the Molded Component Body
  Typically, the user might use `IntraPadKeepOut` here.
  Default is `None()`
  <DOC>
  keep-out:Maybe<KeepoutCreator> with:
    default => None()

  doc: \<DOC>
  Package Body
  Typically a rectangular {@link type:PackageBody} but other
  shapes like {@link type:CylindricalBody} work as well.
  <DOC>
  package-body:PackageBody with:
    as-method => true
  doc: \<DOC>
  Pad Planner
  <DOC>
  pad-planner:PadPlanner with:
    as-method => true
  doc: \<DOC>
  Lead numbering scheme
  <DOC>
  lead-numbering:Numbering with:
    as-method => true
  doc: \<DOC>
  Density Level for the Generated Package
  <DOC>
  density-level:DensityLevel with:
    as-method => true
with:
  constructor => #Molded-2pin


public defn default-molded-pin-1-id (polarized?:True|False) -> Maybe<Int|Ref> :
  if polarized?:
    One $ #R(a)
  else:
    None()

public defn Molded-2pin (
  --
  lead-span:Toleranced
  lead:SMT-Lead,
  package-body:PackageBody,
  polarized?:True|False = false,
  pin-1-id?:Maybe<Ref|Int> = default-molded-pin-1-id(polarized?),
  keep-out:Maybe<KeepoutCreator> = None(),
  pad-planner:PadPlanner = RectanglePadPlanner
  lead-numbering:Numbering = select-numbering(polarized?)
  density-level:DensityLevel = DENSITY-LEVEL
  ) -> Molded-2pin :
  #Molded-2pin(
    lead-span, lead, polarized?, pin-1-id?, keep-out,
    package-body, pad-planner, lead-numbering
    density-level
  )

defmethod name (pkg:Molded-2pin) -> String :
  to-string("Molded")

defmethod courtyard-excess (pkg:Molded-2pin):
  val prot = lead-type $ lead(pkg)
  val fillets = lead-fillets(prot, density-level = density-level(pkg))
  courtyard-excess(fillets)

defmethod build-pads (
  pkg:Molded-2pin,
  vp:VirtualLP
  ) :

  val lead-fillets = lead-fillets(lead-type $ lead(pkg), density-level = density-level(pkg))

  val term-L = length $ lead(pkg)
  val term-W = width $ lead(pkg)

  val ipc = ipc-formula(lead-span(pkg), term-L, term-W, lead-fillets)
  val pad-size = transpose(pad-size(ipc))
  val lead-spacing = Gmin(ipc) + y(pad-size)

  val pad-seq = to-tuple $ pad-grid-smt(
    pad-size = pad-size,
    planner = pad-planner(pkg)
    lead-grid = GridPlanner(
      pitch = lead-spacing,
      columns = 1,
      rows = 2
    )
    num-scheme = lead-numbering(pkg)
  )

  append-all(vp, pad-seq)

public defmethod build-silkscreen (
  pkg:Molded-2pin,
  vp:VirtualLP
  ):
  val eo = EdgesOutline(
    pkg-body = package-body(pkg),
    edge = EW-Edge
    density-level = density-level(pkg)
  )
  build-outline(eo, vp)

  val outline-art = get-silkscreen-outline!(vp)
  val outline = shape(outline-art)

  match(pin-1-id?(pkg)):
    (_:None):false
    (given:One<Int|Ref>):
      val pd = get-pad-by-ref!(vp, value(given))

      val pd-pos = center $ loc(pd)
      val b = bounds(outline)
      val marker-pt = if y(pd-pos) < 0.0:
        Point(left(b), down(b) - 0.5)
      else:
        Point(left(b), up(b) + 0.5)

      add-pin-1-dot(vp, marker-pt)

  add-reference-designator(vp)

public defmethod build-keep-out (
  pkg:Molded-2pin,
  vp:VirtualLP
  ):
  match(keep-out(pkg)):
    (_:None): false
    (given:One<KeepoutCreator>):
      build-keep-out(value(given), vp)
