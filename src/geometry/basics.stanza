#use-added-syntax(jitx)
defpackage jsl/geometry/basics:
  import core
  import collections
  import math
  import jitx
  import jitx/commands

  import jsl/errors

; TODO -
;   I want to refactor the shape definitions in esir.stanza:
;   1.  We keep the form of `Shape(anchor:Anchor, args ...)` - this is useful for
;       reducing a lot of the duplicative `anchor = anchor` code.
;   2   We add a `Shape(args, ..., anchor:Anchor = C)` variant to all
;       so that the user can optional include an `anchor = C` in their
;       code.
public defn Capsule (size:Dims -- anchor:Anchor = C):
  Capsule(anchor, x(size), y(size))

public defn Rectangle (size:Dims -- anchor:Anchor = C, pose:Pose = loc(0.0, 0.0)):
  pose * Rectangle(anchor, x(size), y(size))

public defn RoundedRectangle (size:Dims, r:Double -- anchor:Anchor = C):
  RoundedRectangle(anchor, x(size), y(size), r)

public defn ChamferedRectangle (size:Dims, r:Double -- anchor:Anchor = C):
  ChamferedRectangle(anchor, x(size), y(size), r)

public defn DShape (size:Dims, r:Double -- anchor:Anchor = C):
  DShape(anchor, x(size), y(size), r)

public defn GeneralRoundedRectangle (size:Dims, r:Double, m:CornerModifier -- anchor:Anchor = C) :
  GeneralRoundedRectangle(anchor, x(size), y(size), r, m)

public defn GeneralRoundedRectangle (size:Dims, r:Tuple<Double> -- anchor:Anchor = C) :
  GeneralRoundedRectangle(anchor, x(size), y(size), r)

public defn GeneralChamferedRectangle (size:Dims, r:Double, m:CornerModifier -- anchor:Anchor = C) :
  GeneralChamferedRectangle(anchor, x(size), y(size), r, m)

public defn GeneralChamferedRectangle (size:Dims, r:Tuple<Double> -- anchor:Anchor = C) :
  GeneralChamferedRectangle(anchor, x(size), y(size), r)

; TODO - this conflicts with the circle definition
;   in `esir.stanza`

; public defn Circle (radius:Double -- anchor:Anchor = C):
;   Circle(anchor, radius)

doc: \<DOC>
Break a `Line` into a sequence of `Segment`

A `Line` can have multiple points. A Segment has
only a start and end. This deconstructs a line into
multiple segments.
<DOC>
defn to-segments (l:Line) -> Seq<Segment>:
  val pts = points(l)
  for (pt in pts, i in 0 to false) seq?:
    if i < (length(pts) - 1):
      One $ Segment(pts[i], pts[i + 1])
    else:
      None()

defn to-capsule (s:Segment, width:Double, radius:Double) -> Capsule:
  if radius < 0.0:
    throw $ ArgumentError("Invalid Radius for new Capsule - radius=%_ > 0" % [radius])

  val L = length(s)
  val ang = angle-degrees(s)
  val diam = (2.0 * radius)
  ; Create the raw capsule as if it starts at 0,0 and goes along
  ;   the X axis.
  val raw-cap = Capsule(Dims(L + diam, width + diam), anchor = W)
  ; The rotate it and translate it to place it where
  ;   the originating segment was.
  loc(source(s)) * loc(0.0, 0.0, ang) * raw-cap


defn expand-line (x:Line, amount:Double) -> Shape:
  Union $ to-tuple $ for seg in to-segments(x) seq:
    to-capsule(seg, width(x), amount)

defn expand-polyline (x:Polyline, amount:Double) -> Shape :
  Polyline(width(x) + (2.0 * amount), elements(x))

doc: \<DOC>
Expand for Union shapes

This is provides an implementation that supports `Union` by recursively
applying the `expand` operation on all shapes in the Union.
<DOC>
public defn expand-union (x:Shape|Union, amount:Double) -> Shape:
  match(x):
    (U:Union):
      Union $ for obj in shapes(U) seq:
        expand-union(obj, amount)
    (l:Line): expand-line(l, amount)
    (pl:Polyline): expand-polyline(pl, amount)
    (y:Shape):
      expand-or-shrink(y, amount)

public defn to-polygon (x:Shape -- top-level?:True|False, num-points:Int = 32) -> Polygon|Union :
  match(x):
    (U:Union):
      ; I have to use the hidden constructor here because
      ;  the `Union` function that overrides the constructor returns `Shape` instead of Union
      #Union $ to-tuple $ for obj in shapes(U) seq:
        to-polygon(obj, top-level? = false, num-points = num-points)
    (c:Circle|Arc|PolygonWithArcs|DShape|GeneralRoundedRectangle|RoundedRectangle|Capsule): to-polygon(c, num-points) as Polygon
    (p:Polyline|GeneralChamferedRectangle|Rectangle): to-polygon(p) as Polygon
    (p:Polygon): p

defn to-points (poly:Polygon|Union) -> Tuple<Point>:
  match(poly):
    (u:Union):
      to-tuple $ for sh in shapes(u) seq-cat:
        to-points(sh as Polygon|Union)
    (p:Polygon): points(p)


doc: \<DOC>
Compute the convex hull of a non-trivial polygon case.

This function uses Jarvis's Gift wrapping algorithm. It is a
brute-force algorithm that is not optimized for performance.

@see https://en.wikipedia.org/wiki/Gift_wrapping_algorithm

@param sh Non-trivial shape like `Polyline`, `Arc`, `PolygonWithArcs`, `Polygon`,
and `Union` shape cases. Other cases are handled with `to-polygon`
@param num-points When Approximating shapes like Arc, PolygonWithArcs, etc, we need to
use a number of points to create a polygon. This sets that polygonization amount.

@throws ValueError if the shapes passed are degenerate - ie less than 3 points.
<DOC>
defn non-trivial-convex-hull (sh:Shape, num-points:Int = 32) -> Polygon:
  val pt-set = to-vector<Point> $ to-points $ match(sh):
    (p:Polyline): to-polygon(p)
    (a:Arc|PolygonWithArcs): to-polygon(a, num-points)
    (u:Union):
      to-polygon(u, top-level? = true, num-points = num-points)
    (p:Polygon): p

  if length(pt-set) == 0:
    throw $ ValueError("No Points in Polygons to create Convex Hull")

  ; TODO - we should handle the 3 colinear point case
  ;   here.

  qsort!(pt-set, {x(_0) < x(_1)})
  ; The farthest left point is guaranteed to be part of the
  ;   convex hull.
  val far-left = pt-set[0]

  val hull-pts = to-vector<Point>([far-left])

  ; This function determines the state of q with respect to r
  ;  in a polar coordinate frame, with an origin a P.
  ;  This polar coordinate frame is "right-handed".
  ;  If `q` is more counter-clockwise than `r` - this function returns 2
  ;  If `q` is more clockwise than `r` - this function returns 1
  ;  If `p`, `q` and `r are colinear - then this function returns 0
  defn orientation (p:Point, q:Point, r:Point) -> Int:
    val ret = (y(q) - y(p)) * (x(r) - x(q)) -
              (x(q) - x(p)) * (y(r) - y(q))
    if ret == 0.0:
      0
    else if ret > 0.0:
      1 ; clock wise
    else:
      2 ; counterclockwise

  var done = false
  var i = 0
  while not done:
    ; println("Iteration: %_" % [i])
    ; The inner loop compares all of the points to the point on the hull
    ;   and finds the one to the farthest left. We keep going around until we
    ;   come back to the beginning

    val pointOnHull = peek(hull-pts)
    ; println("Origin: %_" % [pointOnHull])

    defn inner-loop (endpoint:Point, s:Point) -> Point:
      val is-clockwise = orientation(pointOnHull, s, endpoint) == 2
      if endpoint == pointOnHull or is-clockwise:
        ; println("Updated Endpoint: %_" % [s])
        s
      else:
        endpoint

    val newPt = reduce(inner-loop, pt-set[0], pt-set)
    add(hull-pts, newPt)
    ; println("New Pt: %_" % [newPt])
    i = i + 1

    done = newPt == hull-pts[0]
    ; This is a hedge in case the algorithm has a bug
    ;   I want to prevent getting trapped in an infinite
    ;   loop. The typical case should not encounter this.
    if not (i < (2 * length(pt-set))):
      ; Break if we have been through all the points.
      done = true

  Polygon(to-tuple(hull-pts))




doc: \<DOC>
Compute the Convex Hull of the passed Shape

This function uses Jarvis's Gift wrapping algorithm for
non-trivial polygon shapes. It is a brute-force algorithm
that is not optimized for performance.

@see https://en.wikipedia.org/wiki/Gift_wrapping_algorithm


@param x Shape object to construct the convex hull of
@param num-points Some objects need to be polygonized to
be able to run the convex hull algorithm. This parameter determines
how many points will be used for each shape. Alternatively, the
user can pass in pre-polygonized shapes and this value will be ignored.
<DOC>
public defn convex-hull (x:Shape -- num-points:Int = 32) -> Polygon:
  match(x):
    ; Some shapes are already their own convex hull - so we just convert them
    ;  to a polygon
    (c:Circle|DShape|GeneralRoundedRectangle|RoundedRectangle|Capsule): to-polygon(c, num-points)
    (p:GeneralChamferedRectangle|Rectangle): to-polygon(p)
    (x): non-trivial-convex-hull(x, num-points)




doc: \<DOC>
Increase the size of a `Dims` by `amount` on all sides

Effective width and height are larger by `2.0 * amount`

@param d Originating `Dims` instance that this method will expand.
@param amount quantity for expansion on all sides.
<DOC>
public defn expand (d:Dims, amount:Double) -> Dims :
  val r2 = amount * 2.0
  Dims(x(d) + r2, y(d) + r2)

doc: \<DOC>
Increase the size of a `Dims` by different x and y amounts.

@param d Originating `Dims` instance that this method will expand.
@param amount `Dims` that encodes the expansion amount of the X and Y
  axis as two different values.
<DOC>
public defn expand (d:Dims, amount:Dims) -> Dims :
  Dims(x(d) + (x(amount) * 2.0), y(d) + (y(amount) * 2.0))

doc: \<DOC>
Compute the bounding Dims object that encapsulates the sequence of passed Dims.

@param objs The set of objects that will be reviewed.
@param expand-by Add additional margin on all sides by this amount.
The resultant `Dims` object will be `2.0 * expand-by` greater than
the maximum outline
  Default value is 0.0.
<DOC>
public defn bounds (
  objs:Collection<Dims>
  --
  expand-by:Double = 0.0
  ) -> Dims:
  val max-X = maximum(x, objs)
  val max-Y = maximum(y, objs)
  expand{_, expand-by} $ Dims(x(max-X), y(max-Y))

doc: \<DOC>
Is B entirely enclosed by A ?
<DOC>
public defn contains? (a:Dims, b:Dims) -> True|False :
  (x(a) > x(b)) and (y(a) > y(b))

doc: \<DOC>
Diameter to Radius Converter
<DOC>
public defn to-radius (diam:Double) -> Double : diam / 2.0

public defn to-point (pt:Point|[Double, Double]|[Int, Int]) -> Point :
  match(pt):
    (x:[Double, Double]|[Int, Int]): Point(x[0], x[1])
    (x:Point): x

public defn scale-pose (p:Pose, scale:Double) -> Pose :
  val c* = scale * center(p)
  sub-center(p, c*)

public defn scale-pts (pts:Tuple<Point>, scale:Double) -> Tuple<Point> :
  to-tuple $ for pt in pts seq:
    scale * pt

doc: \<DOC>
Recursively scale the shapes of a Union
<DOC>
public defn scale-union (x:Shape|Union, scale:Double) -> Shape :
  match(x):
    (U:Union):
      Union $ for obj in shapes(U) seq:
        scale-union(obj, scale)
    (y:Shape): scale-shape(y, scale)

doc: \<DOC>
Scale a Shape by a factor

Scale in X/Y by factor `scale`
<DOC>
public defn scale-shape (s:Shape, scale:Double) -> Shape :
  match(s):
    (obj:Point): scale * obj
    (obj:Circle):
      Circle(scale * center(obj), scale * radius(obj))
    (obj:Arc):
      Arc(scale * center(obj), scale * radius(obj), start-angle(obj), angle(obj))
    (obj:Rectangle):
      val p* = scale-pose(pose(obj), scale)
      Rectangle( width(obj) * scale, height(obj) * scale, p*)
    (obj:Line):
      val pts* = map(scale-shape{_, scale}, points(obj))
      Line( width(obj) * scale, pts*)
    (obj:Polyline):
      val pts* = map(scale-shape{_, scale}, elements(obj))
      Polyline( width(obj) * scale, pts* )
    (obj:Text):
      sub-pose{_, scale-pose(pose(obj), scale)} $ sub-size(obj, size(obj) * scale)
    (obj:Polygon):
      Polygon $ scale-pts(points(obj), scale)
    (obj:Union):
      scale-union(obj, scale)
    (obj):
      throw $ NotImplementedYet("Shape: %_" % [obj])
    ; (obj:LineRectangle):


doc: \<DOC>
Given 3 Points - compute the circle
See here:
https://math.stackexchange.com/questions/2836274/3-point-to-circle-and-get-radius
<DOC>
public defn compute-circle (b:Point, e:Point, c:Point) -> Circle :

  val dE = e - b
  val dC = c - b

  val dX2 = x(dE)
  val dY2 = y(dE)

  val dX3 = x(dC)
  val dY3 = y(dC)

  val dX2_sq = (dX2 * dX2)
  val dY2_sq = (dY2 * dY2)
  val dX3_sq = (dX3 * dX3)
  val dY3_sq = (dY3 * dY3)

  val dXc-num = (dX2_sq * dY3) - (dX3_sq * dY2) + (dY2_sq * dY3) - (dY3_sq * dY2)
  val dXc = dXc-num / (2.0 * ((dX2 * dY3) - (dX3 * dY2)))

  val dYc-num = (dX2_sq * dX3) - (dX3_sq * dX2) + (dY2_sq * dX3) - (dY3_sq * dX2)
  val dYc = dYc-num / (2.0 * ((dX3 * dY2) - (dX2 * dY3)))

  val Xc = x(b) + dXc
  val Yc = y(b) + dYc

  val r = sqrt( (dXc * dXc) + (dYc * dYc) )

  Circle(Point(Xc, Yc), r)
